Directory structure:
└── docs/
    ├── README.md
    ├── docusaurus.config.ts
    ├── package.json
    ├── postcss.config.js
    ├── sidebars.ts
    ├── tailwind.config.js
    ├── tsconfig.json
    ├── versions.json
    ├── docs/
    │   ├── installation.mdx
    │   ├── introduction.mdx
    │   └── components/
    │       ├── accordion.mdx
    │       ├── badge.mdx
    │       ├── breadcrumbs.mdx
    │       ├── button.mdx
    │       ├── card.mdx
    │       ├── dialog-box.mdx
    │       ├── dropdown.mdx
    │       ├── input.mdx
    │       ├── navbar.mdx
    │       ├── sidebar.mdx
    │       ├── slider.mdx
    │       ├── spinner.mdx
    │       ├── stepper.mdx
    │       ├── switch.mdx
    │       ├── tab.mdx
    │       ├── table.mdx
    │       ├── textarea.mdx
    │       ├── toast.mdx
    │       └── tooltip.mdx
    ├── src/
    │   ├── components/
    │   │   ├── Demo/
    │   │   │   ├── Accordion.tsx
    │   │   │   ├── BadgeDemo.tsx
    │   │   │   ├── BreadcrumbsDemo.tsx
    │   │   │   ├── ButtonDemo.tsx
    │   │   │   ├── CardsDemo.tsx
    │   │   │   ├── DialogBoxDemo.tsx
    │   │   │   ├── DropdownDemo.tsx
    │   │   │   ├── InputDemo.tsx
    │   │   │   ├── NavbarDemo.tsx
    │   │   │   ├── SidebarDemo.tsx
    │   │   │   ├── SliderDemo.tsx
    │   │   │   ├── SpinnerDemo.tsx
    │   │   │   ├── SwitchDemo.tsx
    │   │   │   ├── TabDemo.tsx
    │   │   │   ├── TableDemo.tsx
    │   │   │   ├── TextareaDemo.tsx
    │   │   │   ├── ToastDemo.tsx
    │   │   │   ├── TooltipDemo.tsx
    │   │   │   └── VariantSelector.tsx
    │   │   ├── Examples/
    │   │   │   └── TableExample.tsx
    │   │   ├── HomepageFeatures/
    │   │   │   ├── components-desktop.tsx
    │   │   │   ├── components-showcase.tsx
    │   │   │   ├── index.tsx
    │   │   │   └── styles.module.css
    │   │   └── UI/
    │   │       ├── accordion/
    │   │       │   └── index.tsx
    │   │       ├── badge/
    │   │       │   └── index.tsx
    │   │       ├── blur-text/
    │   │       │   └── index.tsx
    │   │       ├── breadcrumbs/
    │   │       │   └── index.tsx
    │   │       ├── button/
    │   │       │   └── index.tsx
    │   │       ├── card/
    │   │       │   └── index.tsx
    │   │       ├── darkveil/
    │   │       │   ├── index.tsx
    │   │       │   └── lightveil.tsx
    │   │       ├── dialog-box/
    │   │       │   ├── dialog-demo.tsx
    │   │       │   ├── index.tsx
    │   │       │   └── use-dialog.ts
    │   │       ├── dropdown/
    │   │       │   └── index.tsx
    │   │       ├── input/
    │   │       │   ├── InputDemo.tsx
    │   │       │   └── index.tsx
    │   │       ├── magic-bento/
    │   │       │   ├── index.tsx
    │   │       │   └── showcase-components.tsx
    │   │       ├── navbar/
    │   │       │   ├── index.tsx
    │   │       │   ├── installation.tsx
    │   │       │   └── navbarDemo.tsx
    │   │       ├── shimmercard/
    │   │       │   └── index.tsx
    │   │       ├── sidebar/
    │   │       │   └── index.tsx
    │   │       ├── slider/
    │   │       │   └── index.tsx
    │   │       ├── sparkle-text/
    │   │       │   └── index.tsx
    │   │       ├── spinner/
    │   │       │   └── index.tsx
    │   │       ├── stepper/
    │   │       │   ├── demo.tsx
    │   │       │   └── index.tsx
    │   │       ├── switch/
    │   │       │   └── index.tsx
    │   │       ├── tab/
    │   │       │   └── index.tsx
    │   │       ├── table/
    │   │       │   ├── Table.module.css
    │   │       │   ├── index.tsx
    │   │       │   └── pagination/
    │   │       │       └── index.tsx
    │   │       ├── textarea/
    │   │       │   └── index.tsx
    │   │       ├── toast/
    │   │       │   ├── demos.tsx
    │   │       │   ├── index.tsx
    │   │       │   ├── types.ts
    │   │       │   └── use-toast.ts
    │   │       └── tooltip/
    │   │           └── index.tsx
    │   ├── css/
    │   │   └── custom.css
    │   ├── pages/
    │   │   ├── floating-components.tsx
    │   │   ├── index.module.css
    │   │   ├── index.tsx
    │   │   └── markdown-page.md
    │   └── utils/
    │       └── cn.ts
    ├── static/
    │   ├── .nojekyll
    │   └── img/
    ├── versioned_docs/
    │   └── version-1.0.0/
    │       ├── installation.mdx
    │       ├── introduction.mdx
    │       └── components/
    │           ├── accordion.mdx
    │           ├── badge.mdx
    │           ├── breadcrumbs.mdx
    │           ├── button.mdx
    │           ├── card.mdx
    │           ├── dialog-box.mdx
    │           ├── dropdown.mdx
    │           ├── input.mdx
    │           ├── navbar.mdx
    │           ├── sidebar.mdx
    │           ├── slider.mdx
    │           ├── spinner.mdx
    │           ├── stepper.mdx
    │           ├── switch.mdx
    │           ├── tab.mdx
    │           ├── table.mdx
    │           ├── textarea.mdx
    │           ├── toast.mdx
    │           └── tooltip.mdx
    └── versioned_sidebars/
        └── version-1.0.0-sidebars.json

================================================
File: README.md
================================================
# Ignix UI Documentation

Documentation site for Ignix UI, built with Docusaurus.

## Overview

This package contains the documentation website for Ignix UI, providing:

- Component API documentation
- Usage examples
- Development guides
- Interactive playground
- Theme customization guides
- Animation system documentation

## Structure

```
docs/
â”œâ”€â”€ docs/                 # Documentation content
â”‚   â”œâ”€â”€ components/      # Component documentation
â”‚   â”œâ”€â”€ guides/         # Development guides
â”‚   â”œâ”€â”€ api/            # API documentation
â”‚   â””â”€â”€ examples/       # Usage examples
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ components/     # Site components
â”‚   â”œâ”€â”€ pages/         # Static pages
â”‚   â”œâ”€â”€ css/           # Styles
â”‚   â””â”€â”€ theme/         # Docusaurus theme
â”œâ”€â”€ static/            # Static assets
â””â”€â”€ docusaurus.config.js  # Site configuration
```

## Development

```bash
# Install dependencies
pnpm install

# Start development server
pnpm dev

# Build documentation
pnpm build

# Serve built documentation
pnpm serve
```

## Writing Documentation

### Adding a New Component Page

1. Create a new MDX file in `docs/components/`:

```mdx
---
sidebar_position: 1
---

# ComponentName

Description of the component.

## Usage

\`\`\`tsx
import { ComponentName } from '@ignix-ui/registry';

<ComponentName>Content</ComponentName>
\`\`\`

## Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| prop | type | default | description |

## Examples

### Basic Usage

\`\`\`tsx live
<ComponentName>Example</ComponentName>
\`\`\`
```

### Adding a Guide

1. Create a new MDX file in `docs/guides/`:

```mdx
---
sidebar_position: 1
---

# Guide Title

Guide content...
```

## Features

- MDX support
- Live code editing
- Automatic API documentation
- Versioned documentation
- Full-text search
- Dark mode support

## Configuration

### Site Configuration

Edit `docusaurus.config.js`:

```js
module.exports = {
  title: 'Ignix UI',
  tagline: 'Beautiful animated components',
  // ... other configuration
};
```

### Sidebar Configuration

Edit `sidebars.js`:

```js
module.exports = {
  docs: [
    {
      type: 'category',
      label: 'Getting Started',
      items: ['introduction', 'installation']
    },
    // ... other sidebar items
  ]
};
```

## Contributing

See the main [CONTRIBUTING.md](../../CONTRIBUTING.md) for guidelines.

### Documentation Style Guide

- Use clear, concise language
- Include practical examples
- Provide TypeScript types
- Show live demos where possible
- Include accessibility information
- Document animation options

## License

MIT - See [LICENSE](../../LICENSE) for details.



================================================
File: docusaurus.config.ts
================================================
import {themes as prismThemes} from 'prism-react-renderer';
import type {Config} from '@docusaurus/types';
import type * as Preset from '@docusaurus/preset-classic';

const config: Config = {
  title: 'Ignix UI',
  tagline: 'Beautiful, animated UI components for modern web applications',
  favicon: 'img/logo.png',
  url: 'https://ignix-ui.com',
  baseUrl: '/ignix-ui/',
  organizationName: 'mindfiredigital',
  projectName: 'ignix-ui',
  onBrokenLinks: 'throw',
  onBrokenMarkdownLinks: 'warn',
  i18n: {
    defaultLocale: 'en',
    locales: ['en'],
  },

  presets: [
    [
      '@docusaurus/preset-classic',
      {
        docs: {
          sidebarPath: './sidebars.ts',
          editUrl: 'https://mindfiredigital.github.io/ignix-ui/',
          sidebarCollapsed: false,
        },
        blog: false,
        theme: {
          customCss: './src/css/custom.css',
        },
      } satisfies Preset.Options,
    ],
  ],

  themeConfig: {
    colorMode: {
      defaultMode: 'dark',
      disableSwitch: false,
      respectPrefersColorScheme: false,
    },
    image: 'img/social-card.jpg',
    navbar: {
      title: 'Ignix UI',
      logo: {
        alt: 'Ignix UI Logo',
        src: 'img/logo.png',
      },
      items: [
        {
          type: 'docSidebar',
          sidebarId: 'tutorialSidebar',
          position: 'left',
          label: 'Documentation',
        },
        {
          type: 'docsVersionDropdown',
          position: 'right',
          versions: {
            '1.0.0': {label: 'Version 1.0'},
          },
        },
        {
          href: 'https://github.com/mindfiredigital/ignix-ui',
          className: 'header--github-link',
          "aria-label": 'GitHub repository',
          position: 'right',
        },
      ],
    },
    footer: {
      style: 'light',
      copyright: `Copyright Â© ${new Date().getFullYear()} Ignix UI.`,
    },
    prism: {
      theme: prismThemes.github,
      darkTheme: prismThemes.dracula,
      magicComments: [
        {
          className: 'theme-code-block-highlighted-line',
          line: 'highlight-next-line',
          block: {start: 'highlight-start', end: 'highlight-end'},
        },
        {
          className: 'code-block-error-line',
          line: 'error-next-line',
        },
      ],
    },
  } satisfies Preset.ThemeConfig,
};

export default config; 


================================================
File: package.json
================================================
{
  "name": "docs",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "docusaurus": "docusaurus",
    "start": "docusaurus start",
    "build": "docusaurus build",
    "swizzle": "docusaurus swizzle",
    "deploy": "docusaurus deploy",
    "clear": "docusaurus clear",
    "serve": "docusaurus serve",
    "write-translations": "docusaurus write-translations",
    "write-heading-ids": "docusaurus write-heading-ids",
    "typecheck": "tsc"
  },
  "dependencies": {
    "@docusaurus/core": "3.7.0",
    "@docusaurus/preset-classic": "3.7.0",
    "@docusaurus/theme-classic": "^3.7.0",
    "@mdx-js/react": "^3.1.0",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@radix-ui/themes": "^3.2.1",
    "@tailwindcss/postcss": "^4.1.8",
    "@tailwindcss/typography": "^0.5.16",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.0.0",
    "framer-motion": "^12.4.10",
    "gsap": "^3.13.0",
    "lucide-react": "^0.511.0",
    "ogl": "^1.0.11",
    "postcss": "^8.5.3",
    "prism-react-renderer": "^2.3.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-live": "^4.1.8",
    "tailwind-merge": "^3.3.0"
  },
  "devDependencies": {
    "@docusaurus/module-type-aliases": "3.7.0",
    "@docusaurus/tsconfig": "3.7.0",
    "@docusaurus/types": "3.7.0",
    "tailwindcss": "4.0.9",
    "typescript": "~5.6.2"
  },
  "browserslist": {
    "production": [
      ">0.5%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 3 chrome version",
      "last 3 firefox version",
      "last 5 safari version"
    ]
  },
  "engines": {
    "node": ">=18.0"
  }
}



================================================
File: postcss.config.js
================================================
module.exports = {
    plugins: {
      "@tailwindcss/postcss": {},
    },
  }
  


================================================
File: sidebars.ts
================================================
import type { SidebarsConfig } from '@docusaurus/plugin-content-docs';

const sidebars: SidebarsConfig = {
  tutorialSidebar: [
    {
      type: 'category',
      label: 'Getting Started',
      items: ['introduction', 'installation'],
    },
    {
      type: 'category',
      label: 'Components',
      items: ['components/accordion', 'components/badge', 'components/breadcrumbs', 'components/button', 'components/card', 'components/dialog-box', 'components/dropdown', 'components/input', 'components/navbar', 'components/sidebar', 'components/slider', 'components/spinner', 'components/stepper', 'components/switch', 'components/tab', 'components/table', 'components/textarea', 'components/toast', 'components/tooltip'],
    },
  ],
};

export default sidebars;



================================================
File: tailwind.config.js
================================================
module.exports = {
  darkMode: ["class", "[data-theme=\"dark\"]"],
  content: [
    "./src/**/*.{js,ts,jsx,tsx,mdx}",
    "./docs/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./index.html",
    "./docs/**/*.{md,mdx}",
  ],
  corePlugins: {
    preflight: false,
  },
  theme: {
    extend: {
      colors: {
        //Custom Colors
      },
      keyframes: {
        shine: {
          '0%': { 'background-position': '100%' },
          '100%': { 'background-position': '-100%' },
        },
      },
      animation: {
        shine: 'shine 5s linear infinite',
      },
    },
  },
};


================================================
File: tsconfig.json
================================================
{
  // This file is not used in compilation. It is here just for a nice editor experience.
  "extends": "@docusaurus/tsconfig",
  "compilerOptions": {
    "baseUrl": "."
  },
  "exclude": [".docusaurus", "build"]
}



================================================
File: versions.json
================================================
[
  "1.0.0"
]



================================================
File: docs/installation.mdx
================================================
---
sidebar_position: 2
---
# Installation

Add Ignix UI to your React project in a few simple steps.

## Install Package

```bash
# npm
npm install @mindfiredigital/ignix-ui

# yarn
yarn add @mindfiredigital/ignix-ui

# pnpm
pnpm add @mindfiredigital/ignix-ui
```

## Setup

1. Initialize the package:
```bash
npx @mindfiredigital/ignix-ui init
```

## Next Steps

Explore available components:
- [Button](/docs/components/button)
- [Accordion](/docs/components/accordion)
- [Badge](/docs/components/badge)
- [Breadcrumbs](/docs/components/breadcrumbs)
- [Dialog Box](/docs/components/dialog-box)
- [Dropdown](/docs/components/dropdown)
- [Input](/docs/components/input)
- [Navbar](/docs/components/navbar)
- [Sidebar](/docs/components/sidebar)
- [Slider](/docs/components/slider)
- [Spinner](/docs/components/spinner)
- [Stepper](/docs/components/stepper)
- [Switch](/docs/components/switch)
- [Tab](/docs/components/tab)
- [Table](/docs/components/table)
- [Textarea](/docs/components/textarea)
- [Toast](/docs/components/toast)
- [Tooltip](/docs/components/tooltip)


================================================
File: docs/introduction.mdx
================================================
---
sidebar_position: 1
---
# Introduction

Ignix UI is a lightweight React component library with smooth animations built-in.

## What is Ignix UI?

A collection of reusable React components that combine clean design with subtle animations. Built with TypeScript and Framer Motion, it helps you create engaging interfaces quickly.

## Key Features

- **Clean Design**: Simple, modern components ready to use
- **Smooth Animations**: Built with Framer Motion for fluid interactions
- **Customizable**: Easy to style and adapt to your needs
- **TypeScript Ready**: Full type safety included
- **Accessible**: Built following accessibility best practices

## Why Choose Ignix UI?

Modern web interfaces need more than just static components. Ignix UI provides the right balance of design and motion to create engaging experiences without unnecessary complexity.

## Get Started

Ready to begin? Check out the [Installation](/docs/installation) guide to get started.


================================================
File: docs/components/accordion.mdx
================================================
---
sidebar_position: 1
title: Accordion
description: A vertically stacked set of interactive headings that each reveal a section of content.
---

import AccordionDemo from '@site/src/components/Demo/Accordion';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from '@site/src/components/UI/accordion';

## Overview

A vertically stacked set of interactive headings that each reveal a section of content.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
<div className="flex flex-col space-y-4 mb-8">
  <Accordion type="single" collapsible className="w-full">
    <AccordionItem value="item-1">
      <AccordionTrigger>Is it accessible?</AccordionTrigger>
      <AccordionContent>
        Yes. It adheres to the WAI-ARIA design pattern.
      </AccordionContent>
    </AccordionItem>
    <AccordionItem value="item-2">
      <AccordionTrigger>Is it styled?</AccordionTrigger>
      <AccordionContent>
        Yes. It comes with default styles that matches the other components' aesthetics.
      </AccordionContent>
    </AccordionItem>
    <AccordionItem value="item-3">
      <AccordionTrigger>Is it animated?</AccordionTrigger>
      <AccordionContent>
        Yes! It's animated by default, but you can disable it if you prefer.
      </AccordionContent>
    </AccordionItem>
  </Accordion>
</div>
</TabItem>
<TabItem value="code" label="Code">
```tsx
<div className="flex flex-col space-y-4 mb-8">
  <Accordion type="single" collapsible className="w-full">
    <AccordionItem value="item-1">
      <AccordionTrigger>Is it accessible?</AccordionTrigger>
      <AccordionContent>
        Yes. It adheres to the WAI-ARIA design pattern.
      </AccordionContent>
    </AccordionItem>
    <AccordionItem value="item-2">
      <AccordionTrigger>Is it styled?</AccordionTrigger>
      <AccordionContent>
        Yes. It comes with default styles that matches the other components' aesthetics.
      </AccordionContent>
    </AccordionItem>
    <AccordionItem value="item-3">
      <AccordionTrigger>Is it animated?</AccordionTrigger>
      <AccordionContent>
        Yes! It's animated by default, but you can disable it if you prefer.
      </AccordionContent>
    </AccordionItem>
  </Accordion>
</div>
```
</TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add accordion
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add accordion
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add accordion
    ```
  </TabItem>
</Tabs>

## Usage

Import the components:

```tsx
import * as React from 'react';
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from './components/ui';
```

### Basic Example

```tsx
export function AccordionDemo() {
  return (
    <Accordion type="single" collapsible className="w-full">
      <AccordionItem value="item-1">
        <AccordionTrigger>Is it accessible?</AccordionTrigger>
        <AccordionContent>
          Yes. It adheres to the WAI-ARIA design pattern.
        </AccordionContent>
      </AccordionItem>
    </Accordion>
  )
}
```

## Variants

<AccordionDemo />



================================================
File: docs/components/badge.mdx
================================================
---
sidebar_position: 3
title: Badge
description: A small status descriptor for UI elements that can display numbers, text, or a small dot.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Badge } from '@site/src/components/UI/badge';
import { Mail } from 'lucide-react';
import BadgeDemo from '@site/src/components/Demo/BadgeDemo';

## Overview

Badges are small status descriptors that can be used to highlight specific information, such as notification counts, status indicators, or labels. They can include text, numbers, or just a dot indicator.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="flex items-center gap-8 border rounded-lg p-4">
      <div className="relative inline-flex items-center">
        <Mail className="h-6 w-6" />
        <Badge text="3" type="primary" />
      </div>
      <div className="relative inline-flex items-center">
        <span className="text-lg font-medium">Notifications</span>
        <Badge text="99+" type="error" variant="pulse" />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Badge } from './components/ui';
    import { Mail } from 'lucide-react';


    function BadgeDemo() {
      return (
        <div className="flex items-center gap-8">
          <div className="relative inline-flex items-center">
            <Mail className="h-6 w-6" />
            <Badge text="3" type="primary" />
          </div>
          <div className="relative inline-flex items-center">
            <span className="text-lg font-medium">Notifications</span>
            <Badge text="99+" type="error" variant="pulse" />
          </div>
        </div>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add badge
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add badge
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add badge
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Badge } from './components/ui';
```

### Basic Usage

```tsx
function BasicBadge() {
  return (
    <div className="relative inline-flex items-center">
      <Mail className="h-6 w-6" />
      <Badge text="3" type="primary" />
    </div>
  );
}
```

## Variants

<BadgeDemo />



================================================
File: docs/components/breadcrumbs.mdx
================================================
---
sidebar_position: 2
title: Breadcrumbs
description: A navigational aid that shows the user's current location within a website's hierarchy.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Breadcrumbs } from '@site/src/components/UI/breadcrumbs';
import { ChevronRight } from 'lucide-react';

## Overview

Breadcrumbs provide users with a way to navigate back to previous pages or sections in a hierarchical structure. They help users understand their current location within the website and provide quick access to parent pages.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg">
      <Breadcrumbs 
        items={[
          { label: 'Home', href: '#' },
          { label: 'Products', href: '#' },
          { label: 'Electronics', href: '#' },
          { label: 'Smartphones' }
        ]}
        separatorIcon={ChevronRight}
      />
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Breadcrumbs } from './components/ui';
    import { ChevronRight } from 'lucide-react';

    function BreadcrumbDemo() {
      return (
        <Breadcrumbs 
          items={[
            { label: 'Home', href: '#' },
            { label: 'Products', href: '#' },
            { label: 'Electronics', href: '#' },
            { label: 'Smartphones' }
          ]}
          separatorIcon={ChevronRight}
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add breadcrumbs
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add breadcrumbs
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add breadcrumbs
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Breadcrumbs } from './components/ui';
```

### Basic Usage

```tsx
function BasicBreadcrumb() {
  return (
    <Breadcrumbs
      items={[
        { label: 'Home', href: '/' },
        { label: 'Products', href: '/products' },
        { label: 'Current Page' }
      ]}
    />
  );
}
```

import BreadcrumbsDemo from '@site/src/components/Demo/BreadcrumbsDemo';

## Variants

<BreadcrumbsDemo />


================================================
File: docs/components/button.mdx
================================================
---
sidebar_position: 4
title: Button
description: A customizable button component with variants, sizes, and animations.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Button } from '@site/src/components/UI/button';
import { Mail, ArrowRight, Loader2 } from 'lucide-react';

## Overview

Buttons allow users to take actions with a single tap. They can be customized with different styles, sizes, and animations.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg">
      <Button>Click me</Button>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Button } from './components/ui'

    function MyComponent() {
      return <Button>Click me</Button>;
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add button
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add button
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add button
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Button } from '@mindfiredigital/ignix-ui';
```

### Basic Usage

```tsx
function BasicButton() {
  return (
    <Button>Click me</Button>
  );
}
```

import ButtonDemo from '@site/src/components/Demo/ButtonDemo';

## Variants

<ButtonDemo />


================================================
File: docs/components/card.mdx
================================================
---
sidebar_position: 5
title: Card
description: A versatile card component for displaying content in a structured format.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@site/src/components/UI/card';
import {CardsDemo, FeatureCardDemo, StatCardDemo} from '@site/src/components/Demo/CardsDemo';

## Overview

The card component is a container for text, photos, and actions in the context of a single subject.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg">
      <Card>
        <CardHeader>
          <CardTitle>Card Title</CardTitle>
          <CardDescription>Card Description</CardDescription>
        </CardHeader>
        <CardContent>
          <p>Card Content</p>
        </CardContent>
        <CardFooter>
          Card Footer
        </CardFooter>
      </Card>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Card } from './components/ui';

    function MyComponent() {
      return <Card>
        <CardHeader>
          <CardTitle>Card Title</CardTitle>
          <CardDescription>Card Description</CardDescription>
        </CardHeader>
        <CardContent>
          <p>Card Content</p>
        </CardContent>
        <CardFooter>
          Card Footer
        </CardFooter>
      </Card>;
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add card
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add card
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add card
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Card } from '@mindfiredigital/ignix-ui';
```

### Basic Usage

```tsx
function BasicCard() {
  return (
    <Card>
      This is a basic card.
    </Card>
  );
}
```

## Examples

<CardsDemo />

## Feature Card

<FeatureCardDemo />

## Stat Card

<StatCardDemo />




================================================
File: docs/components/dialog-box.mdx
================================================
---
sidebar_position: 5
title: Dialog Box
description: A flexible and animated dialog component for displaying content and capturing user input.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { DialogProvider } from '@site/src/components/UI/dialog-box';
import DialogDemo from '@site/src/components/UI/dialog-box/dialog-demo';

## Overview

The Dialog Box component provides a flexible way to display modal dialogs with various animations and types. It's built on top of Framer Motion for smooth animations and supports different dialog types like alerts, confirmations, and custom content.


## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg">
      <DialogProvider>
        <div className="space-y-4">
          <DialogDemo type="alert" />
        </div>
      </DialogProvider>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { DialogProvider, useDialog } from './components/ui';
    import { Button } from './components/ui';

    function Demo() {
      const { openDialog } = useDialog();
      
      return (
        <Button 
          onClick={() => openDialog({
            title: 'Alert',
            content: 'This is an alert dialog.',
            dialogType: 'alert'
          })}
        >
          Show Alert Dialog
        </Button>
      );
    }

    // In your app:
    <DialogProvider>
      <Demo />
    </DialogProvider>
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add dialog-box
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add dialog-box
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add dialog-box
    ```
  </TabItem>
</Tabs>

## Basic Usage

### 1. Wrap your app with DialogProvider

```tsx
import { DialogProvider } from './components/ui';

function App() {
  return (
    <DialogProvider>
      {/* Your app components */}
    </DialogProvider>
  );
}
```

### 2. Use the useDialog hook in your components

```tsx
import { useDialog } from './components/ui';

function MyComponent() {
  const { openDialog } = useDialog();

  const handleClick = () => {
    openDialog({
      title: 'Hello',
      content: 'This is a dialog!',
      dialogType: 'alert'
    });
  };

  return <button onClick={handleClick}>Open Dialog</button>;
}
```

## Dialog Types

The dialog supports several built-in types with different styles:

import DialogBoxDemo from '@site/src/components/Demo/DialogBoxDemo';

## Variants

<DialogBoxDemo />


================================================
File: docs/components/dropdown.mdx
================================================
---
sidebar_position: 3
title: Dropdown
description: A reusable dropdown menu component with various styling options and animations.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Dropdown, DropdownItem } from '@site/src/components/UI/dropdown';
import { Button } from '@site/src/components/UI/button';

## Overview

The Dropdown component provides a flexible and customizable way to create dropdown menus with various styling options, animations, and sizing variants. Built with Radix UI and Framer Motion, it offers smooth animations and accessible functionality out of the box.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg">
      <Dropdown
        trigger={<Button>Open Menu</Button>}
        animation="default"
      >
        <DropdownItem>Profile</DropdownItem>
        <DropdownItem>Settings</DropdownItem>
        <DropdownItem>Logout</DropdownItem>
      </Dropdown>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Dropdown, DropdownItem } from './components/ui';

    function DropdownDemo() {
      return (
        <Dropdown
          trigger={<Button>Open Menu</Button>}
          animation="default"
        >
          <DropdownItem>Profile</DropdownItem>
          <DropdownItem>Settings</DropdownItem>
          <DropdownItem>Logout</DropdownItem>
        </Dropdown>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add dropdown
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add dropdown
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add dropdown
    ```
  </TabItem>
</Tabs>

## Usage

Import the components:

```tsx
import { Dropdown, DropdownItem } from './components/ui';
```

### Basic Usage

```tsx
function BasicDropdown() {
  return (
    <Dropdown trigger={<Button>Click me</Button>}>
      <DropdownItem>Option 1</DropdownItem>
      <DropdownItem>Option 2</DropdownItem>
      <DropdownItem>Option 3</DropdownItem>
    </Dropdown>
  );
}
```

import DropdownDemo from '@site/src/components/Demo/DropdownDemo';

## Variants

<DropdownDemo />


================================================
File: docs/components/input.mdx
================================================
---
sidebar_position: 4
title: Input
description: A collection of animated input components with various effects and styles.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { AnimatedInput } from '@site/src/components/UI/input';
import { useState } from 'react';
import { InputBasicDemo, InputAdvancedDemo } from '@site/src/components/UI/input/InputDemo';


## Overview

The AnimatedInput component provides a rich collection of animated input fields with various effects and styles. Each variant offers unique animations for both the input field and its label, creating engaging user interactions.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg space-y-4">
      <InputBasicDemo />
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { AnimatedInput } from './components/ui';
    import { useState } from 'react';

    function InputDemo() {
      const [value, setValue] = useState('');
      
      return (
        <AnimatedInput
          placeholder="Type something..."
          variant="clean"
          value={value}
          onChange={setValue}
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add input
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add input
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add input
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { AnimatedInput } from './components/ui';
```

### Basic Usage

```tsx
function BasicInput() {
  const [value, setValue] = useState('');
  
  return (
    <AnimatedInput
      placeholder="Enter your name"
      variant="clean"
      value={value}
      onChange={(newValue) => setValue(newValue)}
    />
  );
}
```

import InputDemo from '@site/src/components/Demo/InputDemo';

## Variants

<InputDemo />



================================================
File: docs/components/navbar.mdx
================================================
---
sidebar_position: 9
title: Navbar
description: A flexible and animated navbar component for displaying content and capturing user input.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Navbar } from '@site/src/components/UI/navbar';
import { Button } from '@site/src/components/UI/button';

## Overview

The Navbar component is a versatile and animated navigation bar that supports multiple styles, animations, and layouts. Built with Framer Motion, it offers smooth animations and various interactive features including submenu support and spotlight effects.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="space-y-4">
      <Navbar variant="default" size="md">
        <div className="flex gap-4">
          <Button>Home</Button>
          <Button>About</Button>
          <Button>Contact</Button>
        </div>
      </Navbar>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Navbar } from './components/ui';

    function NavbarDemo() {
      return (
        <Navbar variant="default" size="md">
          <div className="flex gap-4">
            <Button>Home</Button>
            <Button>About</Button>
            <Button>Contact</Button>
          </div>
        </Navbar>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add navbar
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add navbar
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add navbar
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Navbar } from './components/ui';
```

### Basic Usage

```tsx
function BasicNavbar() {
  return (
    <Navbar variant="default" size="md">
      <div className="flex gap-4">
        <Button>Home</Button>
        <Button>About</Button>
        <Button>Contact</Button>
      </div>
    </Navbar>
  );
}
```

import NavbarDemo from '@site/src/components/Demo/NavbarDemo';

## Variants

<NavbarDemo />

### Responsive Navigation

Create a responsive navigation bar that adapts to different screen sizes:

```tsx
import { useState } from 'react';
import { Menu, X } from 'lucide-react';

function ResponsiveNavbar() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Navbar variant="default" size="md">
      <div className="flex justify-between w-full">
        <div className="flex gap-4 items-center">
          <Button>Logo</Button>
        </div>
        
        {/* Mobile menu button */}
        <button
          className="md:hidden"
          onClick={() => setIsOpen(!isOpen)}
        >
          {isOpen ? <X /> : <Menu />}
        </button>

        {/* Desktop menu */}
        <div className="hidden md:flex gap-4">
          <Button>Home</Button>
          <Button>About</Button>
          <Button>Contact</Button>
        </div>

        {/* Mobile menu */}
        {isOpen && (
          <div className="absolute top-16 left-0 right-0 bg-white md:hidden">
            <div className="flex flex-col gap-2 p-4">
              <Button>Home</Button>
              <Button>About</Button>
              <Button>Contact</Button>
            </div>
          </div>
        )}
      </div>
    </Navbar>
  );
}
```



================================================
File: docs/components/sidebar.mdx
================================================
---
sidebar_position: 10
title: Sidebar
description: A flexible and animated sidebar component for displaying content.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import Sidebar from '@site/src/components/UI/sidebar';
import { Home, Settings, User, Mail, HelpCircle } from 'lucide-react';

## Overview

The Sidebar component is a versatile and animated navigation element that provides an elegant way to organize navigation links and actions in your application. It supports multiple positions, variants, and animations built with Framer Motion.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full h-[400px] relative border rounded-lg overflow-hidden bg-slate-100 shadow-lg">
      <div className="w-full h-8 bg-gray-200 flex items-center px-2 gap-2">
        <div className="w-3 h-3 rounded-full bg-red-500"/>
        <div className="w-3 h-3 rounded-full bg-yellow-500"/>
        <div className="w-3 h-3 rounded-full bg-green-500"/>
        <span className="text-sm text-gray-600 ml-2">Demo Window</span>
      </div>
      <div className="relative h-[calc(100%-2rem)] bg-white">
        <Sidebar
          links={[
            { label: 'Home', href: '#', icon: Home },
            { label: 'Profile', href: '#', icon: User },
            { label: 'Settings', href: '#', icon: Settings },
            { label: 'Help', href: '#', icon: HelpCircle },
          ]}
          brandName="Demo App"
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Sidebar } from './components/ui';
    import { Home, User, Settings, HelpCircle } from 'lucide-react';

    function SidebarDemo() {
      const links = [
        { label: 'Home', href: '#', icon: Home },
        { label: 'Profile', href: '#', icon: User },
        { label: 'Settings', href: '#', icon: Settings },
        { label: 'Help', href: '#', icon: HelpCircle },
      ];

      return (
        <Sidebar
          links={links}
          brandName="Demo App"
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add sidebar
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add sidebar
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add sidebar
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Sidebar } from './components/ui';
```

### Basic Usage

```tsx
import { Home, Settings, User, Mail } from 'lucide-react';

function BasicSidebar() {
  const links = [
    { label: 'Home', href: '/', icon: Home },
    { label: 'Profile', href: '/profile', icon: User },
    { label: 'Settings', href: '/settings', icon: Settings },
    { label: 'Contact', href: '/contact', icon: Mail },
  ];

  return (
    <Sidebar
      links={links}
      brandName="My App"
    />
  );
}
```

import SidebarDemo from '@site/src/components/Demo/SidebarDemo';

## Variants

<SidebarDemo />

## Customization

### With Custom Link Styling

```tsx
function CustomStyledSidebar() {
  const links = [
    { label: 'Home', href: '/', icon: Home },
    { label: 'Settings', href: '/settings', icon: Settings },
  ];

  return (
    <Sidebar
      links={links}
      brandName="Custom Links"
      className="[&_a]:hover:bg-blue-500 [&_a]:transition-colors"
    />
  );
}
```

### Responsive Sidebar

Create a responsive sidebar that adapts to different screen sizes:

```tsx
import { useState, useEffect } from 'react';

function ResponsiveSidebar() {
  const [isOpen, setIsOpen] = useState(true);

  useEffect(() => {
    const handleResize = () => {
      setIsOpen(window.innerWidth > 768);
    };

    window.addEventListener('resize', handleResize);
    handleResize();

    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <Sidebar
      links={links}
      isOpen={isOpen}
      onClose={() => setIsOpen(false)}
      className="md:relative absolute"
    />
  );
}
```



================================================
File: docs/components/slider.mdx
================================================
---
sidebar_position: 12
title: Slider
description: A flexible and animated slider component for displaying content and capturing user input.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Slider } from '@site/src/components/UI/slider';
import { useState } from 'react';

## Overview

The Slider component is a highly customizable input element that allows users to select a value within a range. Built with Radix UI and Framer Motion, it offers various styles, animations, and interactive features.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 border rounded-lg">
      <div className="p-6 rounded-lg">
        <Slider
          defaultValue={[50]}
          max={100}
          step={1}
          variant="default"
          showValue
          valueSuffix="%"
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Slider } from './components/ui';

    function SliderDemo() {
      return (
        <Slider
          defaultValue={[50]}
          max={100}
          step={1}
          variant="default"
          showValue
          valueSuffix="%"
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add slider
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add slider
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add slider
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Slider } from './components/ui';
```

### Basic Usage

```tsx
function BasicSlider() {
  const [value, setValue] = useState([50]);
  
  return (
    <Slider
      value={value}
      onValueChange={setValue}
      max={100}
      step={1}
    />
  );
}
```

import SliderDemo from '@site/src/components/Demo/SliderDemo';

## Variants

<SliderDemo />

### Custom Range Values

Create a slider with custom range and step values:

```tsx
<Slider
  defaultValue={[0]}
  min={-50}
  max={50}
  step={5}
  showValue
  valuePrefix="Temperature: "
  valueSuffix="Â°C"
/>
```


================================================
File: docs/components/spinner.mdx
================================================
---
sidebar_position: 13
title: Spinner
description: A flexible and animated spinner component for displaying loading states.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Spinner } from '@site/src/components/UI/spinner';

## Overview

The Spinner component is a versatile loading indicator that comes with multiple variants and customization options. Built with Framer Motion, it provides smooth animations and various styles to indicate loading states in your application.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 border rounded-lg">
      <div className=" p-6 rounded-lg">
        <div className="flex items-center justify-center gap-8">
          <Spinner size={40} color="border-primary" />
          <Spinner size={40} variant="bars" color="bg-primary" />
          <Spinner size={40} variant="dots-bounce" color="bg-primary" />
        </div>
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Spinner } from './components/ui';

    function SpinnerDemo() {
      return (
        <div className="flex items-center gap-8">
          <Spinner size={40} color="border-primary" />
          <Spinner size={40} variant="bars" color="bg-primary" />
          <Spinner size={40} variant="dots-bounce" color="bg-primary" />
        </div>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add spinner
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add spinner
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add spinner
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Spinner } from './components/ui';
```

### Basic Usage

```tsx
function BasicSpinner() {
  return <Spinner size={40} color="border-primary" />;
}
```

import SpinnerDemo from '@site/src/components/Demo/SpinnerDemo';

## Variants

<SpinnerDemo />

## Customization

### Custom Styling

You can customize the appearance using Tailwind CSS classes:

```tsx
<Spinner
  className="my-4"
  size={50}
  color="border-primary"
  thickness={6}
/>
```


================================================
File: docs/components/stepper.mdx
================================================
---
sidebar_position: 14
title: Stepper
description: A flexible and animated stepper component for displaying multi-step processes.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Stepper } from '@site/src/components/UI/stepper';
import StepperDemo from '@site/src/components/UI/stepper/demo';

## Overview

The Stepper component helps visualize progress through a multi-step process. It's perfect for forms, wizards, or any sequential workflow in your application. The component includes support for completed states, active states, and optional descriptions for each step.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 rounded-lg border ">
      <div className="p-6 rounded-lg">
        <Stepper
          steps={[
            { label: 'Details', description: 'Personal info' },
            { label: 'Address', description: 'Shipping info' },
            { label: 'Payment', description: 'Card details' },
            { label: 'Review', description: 'Final check' },
          ]}
          activeStep={1}
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Stepper } from './components/ui';

    function StepperDemo() {
      return (
        <Stepper
          steps={[
            { label: 'Details', description: 'Personal info' },
            { label: 'Address', description: 'Shipping info' },
            { label: 'Payment', description: 'Card details' },
            { label: 'Review', description: 'Final check' },
          ]}
          activeStep={1}
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add stepper
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add stepper
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add stepper
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Stepper } from './components/ui';
```

### Basic Usage

```tsx
function BasicStepper() {
  const [currentStep, setCurrentStep] = useState(0);
  
  const steps = [
    { label: 'Step 1' },
    { label: 'Step 2' },
    { label: 'Step 3' },
  ];

  return (
    <Stepper
      steps={steps}
      activeStep={currentStep}
    />
  );
}
```

## Examples

### Basic Stepper

<Tabs>
  <TabItem value="basic-preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 border rounded-lg">
      <div className="p-6 rounded-lg">
        <Stepper
          steps={[
            { label: 'Step 1' },
            { label: 'Step 2' },
            { label: 'Step 3' },
          ]}
          activeStep={1}
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="basic-code" label="Code">
    ```tsx
    <Stepper
      steps={[
        { label: 'Step 1' },
        { label: 'Step 2' },
        { label: 'Step 3' },
      ]}
      activeStep={1}
    />
    ```
  </TabItem>
</Tabs>

### With Descriptions

<Tabs>
  <TabItem value="descriptions-preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 border rounded-lg">
      <div className="p-6 rounded-lg">
        <Stepper
          steps={[
            { label: 'Account', description: 'Create account' },
            { label: 'Profile', description: 'Complete profile' },
            { label: 'Verify', description: 'Verification' },
            { label: 'Done', description: 'Final step' },
          ]}
          activeStep={2}
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="descriptions-code" label="Code">
    ```tsx
    <Stepper
      steps={[
        { label: 'Account', description: 'Create account' },
        { label: 'Profile', description: 'Complete profile' },
        { label: 'Verify', description: 'Verification' },
        { label: 'Done', description: 'Final step' },
      ]}
      activeStep={2}
    />
    ```
  </TabItem>
</Tabs>

### Interactive Example

<Tabs>
  <TabItem value="interactive-preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 border rounded-lg">
      <div className="p-6 rounded-lg space-y-4">
       <StepperDemo />
      </div>
    </div>
  </TabItem>
  <TabItem value="interactive-code" label="Code">
    ```tsx
    function InteractiveStepper() {
      const [step, setStep] = useState(0);
      
      return (
        <div className="space-y-4">
          <Stepper
            steps={[
              { label: 'Cart', description: 'Review items' },
              { label: 'Shipping', description: 'Delivery info' },
              { label: 'Payment', description: 'Card details' },
            ]}
            activeStep={step}
          />
          <div className="flex justify-between mt-4">
            <button
              onClick={() => setStep(Math.max(0, step - 1))}
              disabled={step === 0}
              className="px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
            >
              Previous
            </button>
            <button
              onClick={() => setStep(Math.min(2, step + 1))}
              disabled={step === 2}
              className="px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
            >
              Next
            </button>
          </div>
        </div>
      );
    }
    ```
  </TabItem>
</Tabs>

## Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `steps` | `Array<{ label: string; description?: string; }>` | `[]` | Array of step objects with labels and optional descriptions |
| `activeStep` | `number` | `0` | Current active step (0-based index) |
| `className` | `string` | - | Additional CSS classes |

## Customization

### Custom Styling

You can customize the appearance using Tailwind CSS classes:

```tsx
<Stepper
  className="max-w-2xl mx-auto"
  steps={[
    { label: 'Start', description: 'Begin here' },
    { label: 'Middle', description: 'Continue' },
    { label: 'End', description: 'Complete' },
  ]}
  activeStep={1}
/>
```

### Form Integration Example

```tsx
function StepperForm() {
  const [currentStep, setCurrentStep] = useState(0);
  const [formData, setFormData] = useState({
    personal: {},
    address: {},
    payment: {},
  });

  const steps = [
    { label: 'Personal', description: 'Basic info' },
    { label: 'Address', description: 'Shipping details' },
    { label: 'Payment', description: 'Payment method' },
  ];

  const renderStepContent = (step: number) => {
    switch (step) {
      case 0:
        return <PersonalInfoForm data={formData.personal} onSave={handleSave} />;
      case 1:
        return <AddressForm data={formData.address} onSave={handleSave} />;
      case 2:
        return <PaymentForm data={formData.payment} onSave={handleSave} />;
      default:
        return null;
    }
  };

  return (
    <div className="space-y-6">
      <Stepper steps={steps} activeStep={currentStep} />
      <div className="mt-8">
        {renderStepContent(currentStep)}
      </div>
    </div>
  );
}
```



================================================
File: docs/components/switch.mdx
================================================
---
sidebar_position: 15
title: Switch
description: A flexible and animated switch component for displaying content and capturing user input.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Switch } from '@site/src/components/UI/switch';

## Overview

The Switch component is a toggleable form control built on top of Radix UI's Switch Primitive, enhanced with beautiful animations using Framer Motion. It provides a user-friendly way to toggle between two states with smooth transitions and various visual styles.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 border rounded-lg">
      <div className="p-6 rounded-lg">
        <div className="flex items-center gap-4">
          <Switch defaultChecked />
          <Switch />
          <Switch variant="large" defaultChecked />
          <Switch variant="small" defaultChecked />
        </div>
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Switch } from './components/ui';

    function SwitchDemo() {
      return (
        <div className="flex items-center gap-4">
          <Switch defaultChecked />
          <Switch />
          <Switch variant="large" defaultChecked />
          <Switch variant="small" defaultChecked />
        </div>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add switch
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add switch
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add switch
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Switch } from './components/ui';
```

### Basic Usage

```tsx
function BasicSwitch() {
  return <Switch defaultChecked />;
}
```

import SwitchDemo from '@site/src/components/Demo/SwitchDemo';

## Variants

<SwitchDemo />




================================================
File: docs/components/tab.mdx
================================================
---
sidebar_position: 16
title: Tab
description: A flexible and animated tab component for displaying content and capturing user input.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Tabs as TabsComponent } from '@site/src/components/UI/tab';

## Overview

The Tabs component is a versatile navigation interface that allows users to switch between different views within the same context. Built with Framer Motion for smooth animations and powered by Class Variance Authority for flexible styling, it provides multiple variants and themes for different design needs.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 rounded-lg border shadow-lg">
      <div className="p-6 rounded-lg">
        <TabsComponent
          options={["Home", "Profile", "Settings", "About"]}
          selected={0}
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Tabs } from './components/ui';

    function TabsDemo() {
      return (
        <Tabs
          options={["Home", "Profile", "Settings", "About"]}
          selected={0}
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add tab
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add tab
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add tab
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Tabs } from './components/ui';
```

### Basic Usage

```tsx
function BasicTabs() {
  return (
    <Tabs
      options={["Tab 1", "Tab 2", "Tab 3"]}
      selected={0}
      value={(index) => console.log(`Selected tab: ${index}`)}
    />
  );
}
```

import TabDemo from '@site/src/components/Demo/TabDemo';

## Variants

<TabDemo />


================================================
File: docs/components/table.mdx
================================================
---
sidebar_position: 16
title: Table
description: A flexible and customizable table component with sorting and pagination support.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { useState } from 'react';
import { Table } from '@site/src/components/UI/table';
import TableExample from '@site/src/components/Examples/TableExample';

## Overview

The Table component provides a way to display data in a structured format with support for sorting, pagination, and customizable styling. It's built on top of Radix UI's table primitives for accessibility and performance.

## Preview

<Tabs defaultValue="preview" groupId="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg ">
      <TableExample />
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { useState } from 'react';
    import { Table } from './components/ui';

    function TableExample() {
      const [sortConfig, setSortConfig] = useState({ key: 'name', direction: 'asc' });
      const [currentPage, setCurrentPage] = useState(1);
      const totalPages = 3;

      const data = [
        { id: 1, name: 'John Doe', email: 'john@example.com', status: 'Active' },
        { id: 2, name: 'Jane Smith', email: 'jane@example.com', status: 'Inactive' },
        { id: 3, name: 'Bob Johnson', email: 'bob@example.com', status: 'Active' },
      ];

      const handleSort = (key, direction) => {
        setSortConfig({ key, direction });
        // Implement your sorting logic here
      };

      const handlePageChange = (page) => {
        setCurrentPage(page);
        // Fetch or update data for the new page
      };

      return (
        <Table
          headings={[
            { label: 'Name', key: 'name', sort: 'asc' },
            { label: 'Email', key: 'email', sort: 'asc' },
            { label: 'Status', key: 'status', sort: 'asc' },
          ]}
          data={data}
          applySort={handleSort}
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={handlePageChange}
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add table
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add table
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add table
    ```
  </TabItem>
</Tabs>

## Usage

### Basic Usage

```tsx
import { Table } from './components/ui';

function MyTable() {
  const [sortConfig, setSortConfig] = useState({ key: 'name', direction: 'asc' });
  
  const data = [
    { id: 1, name: 'John Doe', email: 'john@example.com' },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com' },
  ];

  const handleSort = (key, direction) => {
    setSortConfig({ key, direction });
    // Implement sorting logic
  };

  return (
    <Table
      headings={[
        { label: 'Name', key: 'name', sort: 'asc' },
        { label: 'Email', key: 'email', sort: 'asc' },
      ]}
      data={data}
      applySort={handleSort}
    />
  );
}
```

### With Pagination

```tsx
function PaginatedTable() {
  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = 5;

  // ... rest of your component code ...

  return (
    <Table
      // ... other props ...
      currentPage={currentPage}
      totalPages={totalPages}
      onPageChange={setCurrentPage}
    />
  );
}
```

### Custom Styling

```tsx
<Table
  // ... other props ...
  variant="ghost"
  accentColor="blue"
  radius="large"
  className="custom-table"
  style={{ '--accent-9': 'var(--blue-9)' }}
/>
```

## Best Practices

- Always provide a unique `key` for each column in the `headings` array
- Implement proper error handling for pagination
- Use the `applySort` callback to handle sorting logic in your parent component
- Consider using the `variant` prop to match your application's design system
- For large datasets, implement virtualization for better performance



================================================
File: docs/components/textarea.mdx
================================================
---
sidebar_position: 17
title: Textarea
description: A flexible and animated textarea component for displaying content and capturing user input.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import AnimatedTextarea from '@site/src/components/UI/textarea';
import { useState } from 'react';

## Overview

The Textarea component is an enhanced version of the standard HTML textarea with beautiful animations and interactive features. Built with Framer Motion, it provides various animation variants, auto-expanding capabilities, and interactive effects.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 rounded-lg border">
      <div className="p-6 rounded-lg">
        <AnimatedTextarea
          placeholder="Type something..."
          variant="clean"
          value=""
          onChange={() => {}}
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { AnimatedTextarea } from './components/ui';

    function TextareaDemo() {
      const [value, setValue] = useState('');
      
      return (
        <AnimatedTextarea
          placeholder="Type something..."
          variant="clean"
          value={value}
          onChange={setValue}
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add textarea
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add textarea
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add textarea
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { AnimatedTextarea } from './components/ui';
```

### Basic Usage

```tsx
function BasicTextarea() {
  const [value, setValue] = useState('');
  
  return (
    <AnimatedTextarea
      placeholder="Enter your message"
      variant="clean"
      value={value}
      onChange={setValue}
    />
  );
}
```

import TextareaDemo from '@site/src/components/Demo/TextareaDemo';

## Animation Variants

<TextareaDemo />



================================================
File: docs/components/toast.mdx
================================================
---
sidebar_position: 19
title: Toast
description: A flexible and animated toast component for displaying notifications and alerts.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { ToastProvider } from '@site/src/components/UI/toast';
import { BasicToastDemo, AnimationDemo, AppearanceDemo, ThemeDemo, SimpleToastDemo } from '@site/src/components/UI/toast/demos';

## Overview

The Toast component is a versatile notification system that provides animated, customizable alerts. Built with Framer Motion, it supports multiple variants, animations, themes, and appearance styles, making it perfect for providing feedback in your applications.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 rounded-lg border">
      <ToastProvider>
        <SimpleToastDemo />
      </ToastProvider>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { useToast } from './components/ui';
    import { InfoCircledIcon } from "@radix-ui/react-icons";

    function ToastDemo() {
      const toast = useToast();
      
      const showToast = () => {
        toast.addToast({
          message: "Hello from Toast!",
          variant: "info",
          animation: "slide",
          icon: <InfoCircledIcon className="w-5 h-5" />
        });
      };

      return (
        <button
          onClick={showToast}
          className="px-6 py-3 bg-primary text-white rounded-md hover:bg-primary/80 flex items-center justify-center gap-2"
        >
          <InfoCircledIcon className="w-5 h-5" />
          Show Toast
        </button>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add toast
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add toast
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add toast
    ```
  </TabItem>
</Tabs>

## Usage

First, wrap your application with the ToastProvider:

```tsx
import { ToastProvider } from './components/ui';

function App() {
  return (
    <ToastProvider>
      <YourApp />
    </ToastProvider>
  );
}
```

Then use the toast in your components:

```tsx
import { useToast } from './components/ui';

function MyComponent() {
  const toast = useToast();
  
  const showNotification = () => {
    toast.addToast({
      message: "Operation successful!",
      variant: "success",
      animation: "slide",
      mode: "light",
      icon: <CheckCircledIcon />
    });
  };
  
  return <button onClick={showNotification}>Show Toast</button>;
}
```

import ToastDemo from '@site/src/components/Demo/ToastDemo';

## Features

<ToastDemo />



================================================
File: docs/components/tooltip.mdx
================================================
---
sidebar_position: 20
title: Tooltip
description: A flexible tooltip component for displaying additional information on hover.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Tooltip } from '@site/src/components/UI/tooltip';

## Overview

The Tooltip component provides additional information when users hover over or focus on an element. Built with Radix UI and Framer Motion, it supports various animations, themes, and appearance styles.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 rounded-lg border flex items-center justify-center">
      <Tooltip content="This is a tooltip">
        <button className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
          Hover me
        </button>
      </Tooltip>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Tooltip } from './components/ui';

    function TooltipDemo() {
      return (
        <Tooltip content="This is a tooltip">
          <button className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
            Hover me
          </button>
        </Tooltip>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add tooltip
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add tooltip
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add tooltip
    ```
  </TabItem>
</Tabs>

## Usage

```tsx
import { Tooltip } from './components/ui';

function MyComponent() {
  return (
    <Tooltip content="Additional information">
      <button>Hover me</button>
    </Tooltip>
  );
}
```

import TooltipDemo from '@site/src/components/Demo/TooltipDemo';

## Features

<TooltipDemo />



================================================
File: src/components/Demo/Accordion.tsx
================================================


import React, { useState } from 'react';
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from '@site/src/components/UI/accordion';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';

const animationVariants = [
  'fade',
  'slideDown',
  'slideUp',
  'scaleIn',
  'rotate',
  'bounce',
  'flip',
  'zoomIn',
  'elastic',
  'springy',
];

const AccordionDemo = () => {
  const [variant, setVariant] = useState('fade');

  const codeString = `
<Accordion type="single" collapsible className="w-full">
  <AccordionItem value="item-1">
    <AccordionTrigger>Is it accessible?</AccordionTrigger>
    <AccordionContent variant="${variant}">
      Yes. It adheres to the WAI-ARIA design pattern.
    </AccordionContent>
  </AccordionItem>
  <AccordionItem value="item-2">
    <AccordionTrigger>Is it styled?</AccordionTrigger>
    <AccordionContent variant="${variant}">
      Yes. It comes with default styles that matches the other
      components' aesthetics.
    </AccordionContent>
  </AccordionItem>
  <AccordionItem value="item-3">
    <AccordionTrigger>Is it animated?</AccordionTrigger>
    <AccordionContent variant="${variant}">
      Yes! It's animated by default, but you can disable it if you
      prefer.
    </AccordionContent>
  </AccordionItem>
</Accordion>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <VariantSelector variants={animationVariants} selectedVariant={variant} onSelectVariant={setVariant} />
       <Tabs>
        <TabItem value="preview" label="Preview">
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="item-1">
              <AccordionTrigger>Is it accessible?</AccordionTrigger>
              <AccordionContent variant={variant as any}>
                Yes. It adheres to the WAI-ARIA design pattern.
              </AccordionContent>
            </AccordionItem>
            <AccordionItem value="item-2">
              <AccordionTrigger>Is it styled?</AccordionTrigger>
              <AccordionContent variant={variant as any}>
                Yes. It comes with default styles that matches the other
                components' aesthetics.
              </AccordionContent>
            </AccordionItem>
            <AccordionItem value="item-3">
              <AccordionTrigger>Is it animated?</AccordionTrigger>
              <AccordionContent variant={variant as any}>
                Yes! It's animated by default, but you can disable it if you
                prefer.
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx" className='whitespace-pre-wrap max-h-[500px] overflow-y-scroll'>
            {codeString}
          </CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default AccordionDemo;




================================================
File: src/components/Demo/BadgeDemo.tsx
================================================
import React, { useState } from 'react';
import { Badge } from '@site/src/components/UI/badge';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';
import { Mail } from 'lucide-react';

const badgeVariants = ['pulse', 'bounce', 'tinypop'];
const badgeTypes = ['primary', 'secondary', 'success', 'warning', 'error'];

const BadgeDemo = () => {
  const [variant, setVariant] = useState('pulse');
  const [type, setType] = useState('primary');

  const codeString = `
<div className="relative inline-flex items-center">
  <Mail className="h-6 w-6" />
  <Badge text="3" type="${type}" variant="${variant}" />
</div>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <div className="flex flex-wrap gap-4 justify-start md:justify-end">
        <VariantSelector
          variants={badgeVariants}
          selectedVariant={variant}
          onSelectVariant={setVariant}
        />
        <VariantSelector
          variants={badgeTypes}
          selectedVariant={type}
          onSelectVariant={setType}
          type='Type'
        />
      </div>
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="flex items-center gap-8 border rounded-lg p-4 mt-4">
            <div className="relative inline-flex items-center">
              <Mail className="h-6 w-6" />
              <Badge text="3" type={type as any} variant={variant as any} />
            </div>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx" className='whitespace-pre-wrap max-h-[500px] overflow-y-scroll'>{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default BadgeDemo;


================================================
File: src/components/Demo/BreadcrumbsDemo.tsx
================================================

import React, { useState } from 'react';
import { Breadcrumbs } from '@site/src/components/UI/breadcrumbs';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';
import { ChevronRight, Home } from 'lucide-react';

const breadcrumbVariants = ['text', 'step', 'progress', 'custom'];

const BreadcrumbsDemo = () => {
  const [variant, setVariant] = useState('text');
  const [currentStep, setCurrentStep] = useState(1);

  const items = [
    { label: 'Home', href: '#', icon: Home },
    { label: 'Products', href: '#' },
    { label: 'Electronics', href: '#' },
    { label: 'Smartphones' }
  ];

  const steps = ['Cart', 'Shipping', 'Payment', 'Confirmation'];

  const codeString = `
<Breadcrumbs 
  ${variant === 'text' || variant === 'custom' ? `items={[
    { label: 'Home', href: '#', icon: Home },
    { label: 'Products', href: '#' },
    { label: 'Electronics', href: '#' },
    { label: 'Smartphones' }
  ]}` : `steps={['Cart', 'Shipping', 'Payment', 'Confirmation']}
  currentStep={${currentStep}}`}
  separatorIcon={ChevronRight}
  variant="${variant}"
  ${variant === 'progress' ? 'size="lg"' : ''}
  ${variant === 'custom' ? 'bgColor="blue" textColor="white" shape="pill"' : ''}
/>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <VariantSelector
        variants={breadcrumbVariants}
        selectedVariant={variant}
        onSelectVariant={setVariant}
      />
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="mt-4 p-4 border rounded-lg bg-background/50">
            {variant === 'step' || variant === 'progress' ? (
              <div className="space-y-4">
                <Breadcrumbs 
                  steps={steps}
                  currentStep={currentStep}
                  separatorIcon={ChevronRight}
                  variant={variant}
                  size={variant === 'progress' ? 'lg' : 'md'}
                />
                <div className="flex justify-center gap-4 mt-6">
                  <button 
                    onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}
                    className="px-4 py-2 bg-muted rounded-lg text-sm font-medium hover:bg-muted/80 transition-colors"
                    disabled={currentStep === 0}
                  >
                    Previous
                  </button>
                  <button 
                    onClick={() => setCurrentStep(prev => Math.min(steps.length - 1, prev + 1))}
                    className="px-4 py-2 bg-primary text-primary-foreground rounded-lg text-sm font-medium hover:bg-primary/90 transition-colors"
                    disabled={currentStep === steps.length - 1}
                  >
                    Next
                  </button>
                </div>
              </div>
            ) : (
              <Breadcrumbs 
                items={items}
                separatorIcon={ChevronRight}
                variant={variant as any}
                currentStep={1}
                bgColor={variant === 'custom' ? 'primary' : undefined}
                textColor={variant === 'custom' ? 'primary' : undefined}
                shape={variant === 'custom' ? 'pill' : undefined}
              />
            )}
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default BreadcrumbsDemo;



================================================
File: src/components/Demo/ButtonDemo.tsx
================================================

import React, { useState } from 'react';
import { Button } from '@site/src/components/UI/button';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';

const buttonVariants = [
  { value: 'default', label: 'Default' },
  { value: 'primary', label: 'Primary' },
  { value: 'secondary', label: 'Secondary' },
  { value: 'success', label: 'Success' },
  { value: 'warning', label: 'Warning' },
  { value: 'danger', label: 'Danger' },
  { value: 'outline', label: 'Outline' },
  { value: 'ghost', label: 'Ghost' },
  { value: 'link', label: 'Link' },
  { value: 'subtle', label: 'Subtle' },
  { value: 'elevated', label: 'Elevated' },
  { value: 'glass', label: 'Glass' },
  { value: 'neon', label: 'Neon' },
  { value: 'pill', label: 'Pill' },
  { value: 'none', label: 'None' },
];

const buttonSizes = [
  { value: 'xs', label: 'Extra Small (xs)' },
  { value: 'sm', label: 'Small (sm)' },
  { value: 'md', label: 'Medium (md)' },
  { value: 'lg', label: 'Large (lg)' },
  { value: 'xl', label: 'Extra Large (xl)' },
  { value: 'icon', label: 'Icon' },
  { value: 'pill', label: 'Pill' },
  { value: 'block', label: 'Block' },
  { value: 'compact', label: 'Compact' },
  { value: 'wide', label: 'Wide' },
];

const animationVariants = [
  { value: '', label: 'None' },
  { value: 'bounce', label: 'Bounce' },
  { value: 'bounceSlow', label: 'Bounce Slow' },
  { value: 'bounceFast', label: 'Bounce Fast' },
  { value: 'bounceSmooth', label: 'Bounce Smooth' },
  { value: 'bounceJelly', label: 'Bounce Jelly' },
  { value: 'rotateClockwiseSlow', label: 'Rotate Clockwise Slow' },
  { value: 'rotateClockwiseFast', label: 'Rotate Clockwise Fast' },
  { value: 'rotateAntiClockwiseSlow', label: 'Rotate Anti-Clockwise Slow' },
  { value: 'rotateAntiClockwiseFast', label: 'Rotate Anti-Clockwise Fast' },
  { value: 'rotatePingPong', label: 'Rotate Ping Pong' },
  { value: 'scaleUp', label: 'Scale Up' },
  { value: 'scaleDown', label: 'Scale Down' },
  { value: 'scalePulse', label: 'Scale Pulse' },
  { value: 'scaleExpandContract', label: 'Scale Expand/Contract' },
  { value: 'scaleHeartbeat', label: 'Scale Heartbeat' },
  { value: 'flipX', label: 'Flip X' },
  { value: 'flipY', label: 'Flip Y' },
  { value: 'flipCard', label: 'Flip Card' },
  { value: 'fadeBlink', label: 'Fade Blink' },
  { value: 'fadeInOut', label: 'Fade In/Out' },
  { value: 'press3D', label: '3D Press' },
  { value: 'press3DSoft', label: '3D Press Soft' },
  { value: 'press3DHard', label: '3D Press Hard' },
  { value: 'press3DPop', label: '3D Press Pop' },
  { value: 'press3DDepth', label: '3D Press Depth' },
  { value: 'spinSlow', label: 'Spin Slow' },
  { value: 'spinFast', label: 'Spin Fast' },
  { value: 'wobble', label: 'Wobble' },
  { value: 'tilt3D', label: 'Tilt 3D' },
];

const ButtonDemo = () => {
  const [variant, setVariant] = useState('default');
  const [size, setSize] = useState('md');
  const [animationVariant, setAnimationVariant] = useState('');

  const codeString = `
<Button 
  variant="${variant}" 
  size="${size}" 
  ${animationVariant ? `animationVariant="${animationVariant}"` : ''}
>
  Click me
</Button>
`;

  return (
    <div className="space-y-6 mb-8">
      <div className="flex flex-wrap gap-4 justify-start sm:justify-end">
        <div className="space-y-2">
          <VariantSelector
            variants={buttonVariants.map(v => v.value)}
            selectedVariant={variant}
            onSelectVariant={setVariant}
          />
        </div>

        <div className="space-y-2">
          <VariantSelector
            variants={buttonSizes.map(s => s.value)}
            selectedVariant={size}
            onSelectVariant={setSize}
            type="Size"
          />
        </div>

        <div className="space-y-2">
          <VariantSelector
            variants={animationVariants.map(a => a.value)}
            selectedVariant={animationVariant || 'none'}
            onSelectVariant={(value) => setAnimationVariant(value === 'none' ? '' : value)}
            type="Animation"
          />
        </div>
      </div>

      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="p-6 border rounded-lg mt-4 ">
            <div className="flex flex-wrap gap-4 items-center justify-center p-4">
              <Button 
                variant={variant as any} 
                size={size as any}
                animationVariant={animationVariant as any}
              >
                Click me
              </Button>
            </div>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <div className="mt-4">
            <CodeBlock language="tsx" className="text-sm">
              {codeString}
            </CodeBlock>
          </div>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default ButtonDemo;



================================================
File: src/components/Demo/CardsDemo.tsx
================================================
import React, { useState } from 'react';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
  FeatureCard,
  StatCard,
} from '@site/src/components/UI/card';
import { Button } from '@site/src/components/UI/button';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';
import { Star } from 'lucide-react';

const cardVariants = [
  { value: 'default', label: 'Default' },
  { value: 'elevated', label: 'Elevated' },
  { value: 'glass', label: 'Glass' },
  { value: 'gradient', label: 'Gradient' },
  { value: 'neon', label: 'Neon' },
  { value: 'outline', label: 'Outline' },
  { value: 'minimal', label: 'Minimal' },
  { value: 'premium', label: 'Premium' },
  { value: 'success', label: 'Success' },
  { value: 'warning', label: 'Warning' },
  { value: 'error', label: 'Error' },
  { value: 'info', label: 'Info' },
];

const cardSizes = [
  { value: 'sm', label: 'Small' },
  { value: 'md', label: 'Medium' },
  { value: 'lg', label: 'Large' },
  { value: 'xl', label: 'Extra Large' },
];

const cardAnimations = [
  { value: 'none', label: 'None' },
  { value: 'fadeIn', label: 'Fade In' },
  { value: 'slideUp', label: 'Slide Up' },
  { value: 'scaleIn', label: 'Scale In' },
  { value: 'flipIn', label: 'Flip In' },
  { value: 'bounceIn', label: 'Bounce In' },
  { value: 'floatIn', label: 'Float In' },
];

const cardInteractions = [
  { value: 'none', label: 'None' },
  { value: 'hover', label: 'Hover' },
  { value: 'press', label: 'Press' },
  { value: 'lift', label: 'Lift' },
  { value: 'tilt', label: 'Tilt' },
  { value: 'glow', label: 'Glow' },
];

const CardsDemo = () => {
  const [variant, setVariant] = useState('default');
  const [size, setSize] = useState('md');
  const [animation, setAnimation] = useState('none');
  const [interaction, setInteraction] = useState('none');
  const [animationKey, setAnimationKey] = useState(0);

  // Reset animation key when animation prop changes
  const handleAnimationChange = (newAnimation: string) => {
    setAnimation(newAnimation);
    setAnimationKey((prevKey) => prevKey + 1);
  };

  const codeString = `
<Card 
  variant="${variant}" 
  size="${size}" 
  animation="${animation}"
  interactive="${interaction}"
>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card Description</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Card Content</p>
  </CardContent>
  <CardFooter>
    <Button>Action</Button>
  </CardFooter>
</Card>
`;

  return (
    <div className="space-y-6 mb-8">
      <div className="flex flex-wrap gap-4 justify-start sm:justify-end">
        <div className="space-y-2">
          <VariantSelector
            variants={cardVariants.map((v) => v.value)}
            selectedVariant={variant}
            onSelectVariant={setVariant}
          />
        </div>

        <div className="space-y-2">
          <VariantSelector
            variants={cardSizes.map((s) => s.value)}
            selectedVariant={size}
            onSelectVariant={setSize}
            type="Size"
          />
        </div>

        <div className="space-y-2">
          <VariantSelector
            variants={cardAnimations.map((a) => a.value)}
            selectedVariant={animation}
            onSelectVariant={handleAnimationChange}
            type="Animation"
          />
        </div>

        <div className="space-y-2">
          <VariantSelector
            variants={cardInteractions.map((i) => i.value)}
            selectedVariant={interaction}
            onSelectVariant={setInteraction}
            type="Interaction"
          />
        </div>
      </div>

      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="p-6 border rounded-lg mt-4">
            <div className="flex flex-wrap gap-4 items-center justify-center p-4">
              <Card
                key={`card-${animationKey}`}
                variant={variant as any}
                size={size as any}
                animation={animation as any}
                interactive={interaction as any}
              >
                <CardHeader>
                  <CardTitle>Card Title</CardTitle>
                  <CardDescription>Card Description</CardDescription>
                </CardHeader>
                <CardContent>
                  <p>
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam nec metus nec
                    ante feugiat placerat. Nullam nec metus nec ante feugiat placerat.
                  </p>
                </CardContent>
                <CardFooter>
                  <Button>Action</Button>
                </CardFooter>
              </Card>
            </div>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <div className="mt-4">
            <CodeBlock language="tsx" className="text-sm">
              {codeString}
            </CodeBlock>
          </div>
        </TabItem>
      </Tabs>
    </div>
  );
};

const FeatureCardDemo = () => {
  const codeString = `
<FeatureCard icon={<Star className="h-8 w-8 text-primary" />} variant="elevated">
  <CardTitle>Amazing Feature</CardTitle>
  <CardDescription>This feature will blow your mind</CardDescription>
</FeatureCard>
`;
  return (
    <div className="p-6 border rounded-lg mt-4">
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="flex flex-wrap gap-4 items-center justify-center p-4">
            <FeatureCard icon={<Star className="h-8 w-8 text-primary" />} variant="elevated">
              <CardTitle>Amazing Feature</CardTitle>
              <CardDescription>This feature will blow your mind</CardDescription>
            </FeatureCard>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <div className="mt-4">
            <CodeBlock language="tsx" className="text-sm">
              {codeString}
            </CodeBlock>
          </div>
        </TabItem>
      </Tabs>
    </div>
  );
};

const StatCardDemo = () => {
  const codeString = `
<StatCard value="99.9%" label="Uptime" trend="up" trendValue="+2.1%"/>
`;
  return (
    <div className="p-6 border rounded-lg mt-4">
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="flex flex-wrap gap-4 items-center justify-center p-4">
            <StatCard
              value="99.9%"
              label="Uptime"
              trend="up"
              trendValue="+2.1%"
            />
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <div className="mt-4">
            <CodeBlock language="tsx" className="text-sm">
              {codeString}
            </CodeBlock>
          </div>
        </TabItem>
      </Tabs>
    </div>
  );
};
export { CardsDemo, FeatureCardDemo, StatCardDemo };



================================================
File: src/components/Demo/DialogBoxDemo.tsx
================================================
import React, { useState } from 'react';
import {
  DialogAnimationTypes,
  DialogProvider,
  DialogTypes,
} from '@site/src/components/UI/dialog-box';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';
import { Button } from '@site/src/components/UI/button';
import { useDialog } from '../UI/dialog-box/use-dialog';

const dialogAnimations = [
  'popIn',
  'springPop',
  'backdropZoom',
  'flip3D',
  'skewSlide',
  'glassBlur',
  'skyDrop',
];

const dialogTypes = ['alert', 'confirm', 'error', 'success'];

const DialogBoxDemo = () => {
  const [animation, setAnimation] = useState('popIn');
  const [type, setType] = useState('alert');
  const { openDialog } = useDialog();

  const codeString = `
<Button 
  onClick={() => openDialog({
    title: 'Alert',
    content: 'This is an alert dialog.',
    dialogType: '${type}',
    animationKey: '${animation}',
  })}
>
  Show Alert Dialog
</Button>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <div className="flex flex-wrap gap-4 sm:justify-end justify-start ">
        <VariantSelector
          variants={dialogAnimations}
          selectedVariant={animation}
          onSelectVariant={setAnimation}
          type="Animation"
        />
        <VariantSelector variants={dialogTypes} selectedVariant={type} onSelectVariant={setType} type="Type" />
      </div>
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="p-4 border rounded-lg mt-4">
            <Button
              onClick={() =>
                openDialog({
                  title: 'Alert',
                  content: 'This is an alert dialog.',
                  dialogType: type as DialogTypes,
                  animationKey: animation as DialogAnimationTypes,
                })
              }
            >
              Show Alert Dialog
            </Button>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

const DialogBoxDemoWrapper = () => (
  <DialogProvider>
    <DialogBoxDemo />
  </DialogProvider>
);

export default DialogBoxDemoWrapper;



================================================
File: src/components/Demo/DropdownDemo.tsx
================================================

import React, { useState } from 'react';
import { Dropdown, DropdownItem } from '@site/src/components/UI/dropdown';
import { Button } from '@site/src/components/UI/button';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';

const dropdownAnimations = ['default', 'fade', 'scale', 'slide', 'flip'];
const dropdownBgs = ['default', 'dark', 'glass', 'transparent', 'gradient', 'primary'];

const DropdownDemo = () => {
  const [animation, setAnimation] = useState('default');
  const [bg, setBg] = useState('default');

  const codeString = `
<Dropdown
  trigger={<Button>Open Menu</Button>}
  animation="${animation}"
  bg="${bg}"
>
  <DropdownItem>Profile</DropdownItem>
  <DropdownItem>Settings</DropdownItem>
  <DropdownItem>Logout</DropdownItem>
</Dropdown>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <div className="flex flex-wrap gap-4 sm:justify-end justify-start">
        <VariantSelector
          variants={dropdownAnimations}
          selectedVariant={animation}
          onSelectVariant={setAnimation}
          type="Animation"
        />
        <VariantSelector variants={dropdownBgs} selectedVariant={bg} onSelectVariant={setBg} type="Bg" />
      </div>
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="p-4 border rounded-lg mt-4">
            <Dropdown
              trigger={<Button>Open Menu</Button>}
              animation={animation as any}
              bg={bg as any}
            >
              <DropdownItem>Profile</DropdownItem>
              <DropdownItem>Settings</DropdownItem>
              <DropdownItem>Logout</DropdownItem>
            </Dropdown>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default DropdownDemo;



================================================
File: src/components/Demo/InputDemo.tsx
================================================

import React, { useState } from 'react';
import { AnimatedInput } from '@site/src/components/UI/input';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';

const inputVariants = [
  'clean',
  'underline',
  'floating',
  'borderGlow',
  'shimmer',
  'bounce',
  'flip',
  'slide',
  'rotate',
  'elastic',
  'springy',
  'borderBeam',
  'glow',
  'shake',
  'wave',
  'typewriter',
  'neon',
  'particles',
  'cosmic',
  'materialFloat',
  'gradientBorder',
  'ripple',
  'neonPulse',
  'typewriterReveal',
  'morphing',
  'liquidBorder',
  'particleField',
  'magnetic',
  'pulse',
  'spotlight',
  'liquid',
  'origami',
  'glitch',
  'hologram',
  'cosmic',
  'premiumGradient',
  'premiumGlass',
  'glassmorphism',
  'holographic3D',
  'quantumParticles',
  'luxuryShimmer',
  'materialRipple',
  'cosmicField',
];

const InputDemo = () => {
  const [variant, setVariant] = useState('clean');
  const [value, setValue] = useState('');

  const codeString = `
<AnimatedInput
  placeholder="Type something..."
  variant="${variant}"
  value={value}
  onChange={setValue}
/>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8 sm:justify-end justify-start">
      <VariantSelector
        variants={inputVariants}
        selectedVariant={variant}
        onSelectVariant={setVariant}
        type="Variant"
      />
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="p-4 border rounded-lg mt-4">
            <AnimatedInput
              placeholder="Type something..."
              variant={variant}
              value={value}
              onChange={setValue}
            />
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default InputDemo;



================================================
File: src/components/Demo/NavbarDemo.tsx
================================================

import React, { useState } from 'react';
import { Navbar } from '@site/src/components/UI/navbar';
import { Button } from '@site/src/components/UI/button';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';

const navbarVariants = ['default', 'dark', 'glass', 'gradient'];
const navbarAnimations = ['slide', 'glow', 'basic', 'spotlight', 'hoverSubmenu', 'clickSubmenu'];
const submenuContent = (
  <div className="flex gap-4">
    <Button>Home</Button>
    <Button>About</Button>
    <Button>Contact</Button>
  </div>
);

const NavbarDemo = () => {
  const [variant, setVariant] = useState('default');
  const [animation, setAnimation] = useState('slide');

  const codeString = animation === 'hoverSubmenu' || animation === 'clickSubmenu' ? `
<Navbar variant="${variant}" animationType="${animation}" submenuContent={
 <div className="flex gap-4">
    <Button>Home</Button>
    <Button>About</Button>
    <Button>Contact</Button>
  </div>
}> 
</Navbar>
` : `
<Navbar variant="${variant}" animationType="${animation}">
  <div className="flex gap-4">
    <Button>Home</Button>
    <Button>About</Button>
    <Button>Contact</Button>
  </div>
</Navbar>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <div className="flex flex-wrap gap-4 sm:justify-end justify-start">
        <VariantSelector
          variants={navbarVariants}
          selectedVariant={variant}
          onSelectVariant={setVariant}
          type="Variant"
        />
        <VariantSelector
          variants={navbarAnimations}
          selectedVariant={animation}
          onSelectVariant={setAnimation}
          type="Animation"
        />
      </div>
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="p-4 border rounded-lg mt-4">
            <Navbar variant={variant as any} animationType={animation as any} submenuContent={submenuContent}>
              <div className="flex gap-4">
                <Button>Home</Button>
                <Button>About</Button>
                <Button>Contact</Button>
              </div>
            </Navbar>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default NavbarDemo;



================================================
File: src/components/Demo/SidebarDemo.tsx
================================================

import React, { useState } from 'react';
import Sidebar from '@site/src/components/UI/sidebar';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';
import { Home, Settings, User, HelpCircle } from 'lucide-react';

const sidebarVariants = ['default', 'dark', 'light', 'glass'];
const sidebarPositions = ['left', 'right'];

const SidebarDemo = () => {
  const [variant, setVariant] = useState('default');
  const [position, setPosition] = useState('left');

  const codeString = `
<Sidebar
  links={[
    { label: 'Home', href: '#', icon: Home },
    { label: 'Profile', href: '#', icon: User },
    { label: 'Settings', href: '#', icon: Settings },
    { label: 'Help', href: '#', icon: HelpCircle },
  ]}
  brandName="Demo App"
  variant="${variant}"
  position="${position}"
/>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <div className="flex flex-wrap gap-4 sm:justify-end justify-start">
        <VariantSelector
          variants={sidebarVariants}
          selectedVariant={variant}
          onSelectVariant={setVariant}
          type="Variant"
        />
        <VariantSelector
          variants={sidebarPositions}
          selectedVariant={position}
          onSelectVariant={setPosition}
          type="Position"
        />
      </div>
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="w-full h-[400px] relative border rounded-lg overflow-hidden bg-slate-100 shadow-lg mt-4">
            <div className="w-full h-8 bg-gray-200 flex items-center px-2 gap-2">
              <div className="w-3 h-3 rounded-full bg-red-500" />
              <div className="w-3 h-3 rounded-full bg-yellow-500" />
              <div className="w-3 h-3 rounded-full bg-green-500" />
              <span className="text-sm text-gray-600 ml-2">Demo Window</span>
            </div>
            <div className="relative h-[calc(100%-2rem)] bg-white">
              <Sidebar
                links={[
                  { label: 'Home', href: '#', icon: Home },
                  { label: 'Profile', href: '#', icon: User },
                  { label: 'Settings', href: '#', icon: Settings },
                  { label: 'Help', href: '#', icon: HelpCircle },
                ]}
                brandName="Demo App"
                variant={variant as any}
                position={position as any}
              />
            </div>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default SidebarDemo;



================================================
File: src/components/Demo/SliderDemo.tsx
================================================

import React, { useState } from 'react';
import { Slider } from '@site/src/components/UI/slider';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';

const sliderVariants = [
  'default',
  'minimal',
  'gradient',
  'glass',
  'neon',
  'material',
  'neumorphic',
  'retro',
  'cyberpunk',
  'brutalist',
  'skeuomorphic',
  'rounded',
  'outline',
  'shadow',
];
const sliderAnimations = ['none', 'slide', 'fade', 'flip', 'scale', 'breathe', 'rainbow', 'pulse', 'zoom', 'spring', 'elastic', 'parallax', 'morph', 'hover', 'bounce', 'wave'];

const SliderDemo = () => {
  const [variant, setVariant] = useState('default');
  const [animation, setAnimation] = useState('slide');

  const codeString = `
<Slider
  defaultValue={[50]}
  max={100}
  step={1}
  variant="${variant}"
  animationType="${animation}"
  showValue
  valueSuffix="%"
/>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <div className="flex flex-wrap gap-4 sm:justify-end justify-start">
        <VariantSelector
          variants={sliderVariants}
          selectedVariant={variant}
          onSelectVariant={setVariant}
          type="Variant"
        />
        <VariantSelector
          variants={sliderAnimations}
          selectedVariant={animation}
          onSelectVariant={setAnimation}
          type="Animation"
        />
      </div>
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="w-full p-8 space-y-8 border rounded-lg mt-4">
            <div className="p-6 rounded-lg">
              <Slider
                defaultValue={[50]}
                max={100}
                step={1}
                variant={variant as any}
                animationType={animation as any}
                showValue
                valueSuffix="%"
              />
            </div>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default SliderDemo;



================================================
File: src/components/Demo/SpinnerDemo.tsx
================================================

import React, { useState } from 'react';
import { Spinner } from '@site/src/components/UI/spinner';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';

const spinnerVariants = ['default', 'bars', 'dots-bounce'];

const SpinnerDemo = () => {
  const [variant, setVariant] = useState('default');

  const codeString = `
<Spinner size={40} variant="${variant}" color="border-primary" />
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <VariantSelector
        variants={spinnerVariants}
        selectedVariant={variant}
        onSelectVariant={setVariant}
        type="Variant"
      />

      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="w-full p-8 space-y-8 border rounded-lg mt-4">
            <div className="p-6 rounded-lg">
              <div className="flex items-center justify-center gap-8">
                {variant === 'default' && (
                  <Spinner size={40} variant={variant as any} color="border-primary" />
                )}
                {variant === 'bars' && (
                  <Spinner size={40} variant="bars" color="bg-primary" />
                )}
                {variant === 'dots-bounce' && (
                  <Spinner size={40} variant="dots-bounce" color="bg-primary" />
                )}
              </div>
            </div>  
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default SpinnerDemo;



================================================
File: src/components/Demo/SwitchDemo.tsx
================================================

import React, { useState } from 'react';
import { Switch } from '@site/src/components/UI/switch';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';

const switchVariants = [
  'default',
  'large',
  'small',
  'pill',
  'square',
  'slim',
  'ios',
  'material',
];
const switchAnimations = [
  'default',
  'bounce',
  'scale',
  'rotate',
  'fade',
  'elastic',
  'pulse',
  'shake',
  'flip',
  'jelly',
  'glow',
];

const SwitchDemo = () => {
  const [variant, setVariant] = useState('default');
  const [animation, setAnimation] = useState('default');

  const codeString = `
<Switch variant="${variant}" animation="${animation}" defaultChecked />
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <div className="flex flex-wrap gap-4 sm:justify-end justify-start">
        <VariantSelector
          variants={switchVariants}
          selectedVariant={variant}
          onSelectVariant={setVariant}
          type="Variant"
        />
        <VariantSelector
          variants={switchAnimations}
          selectedVariant={animation}
          onSelectVariant={setAnimation}
          type="Animation"
        />
      </div>
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="w-full p-8 space-y-8 border rounded-lg mt-4">
            <div className="p-6 rounded-lg">
              <div className="flex items-center gap-4">
                <Switch variant={variant as any} animation={animation as any} defaultChecked />
              </div>
            </div>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default SwitchDemo;



================================================
File: src/components/Demo/TabDemo.tsx
================================================

import React, { useState } from 'react';
import { Tabs as TabsComponent } from '@site/src/components/UI/tab';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';

const tabVariants = [
  'underline',
  'filled',
  'pill',
  'outline',
  'ghost',
  'shadow',
  'gradient',
  'glow',
  'block',
];
const tabThemes = ['light', 'dark', 'glass', 'glassDark', 'glassLight', 'glassGradient', 'glassGradientDark'];

const TabDemo = () => {
  const [variant, setVariant] = useState('underline');
  const [theme, setTheme] = useState('light');

  const codeString = `
<TabsComponent
  options={["Home", "Profile", "Settings", "About"]}
  selected={0}
  variant="${variant}"
  theme="${theme}"
/>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <div className="flex flex-wrap gap-4 sm:justify-end justify-start">
        <VariantSelector
          variants={tabVariants}
          selectedVariant={variant}
          onSelectVariant={setVariant}
          type="Variant"
        />
        <VariantSelector variants={tabThemes} selectedVariant={theme} onSelectVariant={setTheme} type="Theme" />
      </div>
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="w-full p-8 space-y-8 rounded-lg border shadow-lg mt-4">
            <div className="p-6 rounded-lg">
              <TabsComponent
                options={["Home", "Profile", "Settings", "About"]}
                selected={0}
                variant={variant as any}
                theme={theme as any}
              />
            </div>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default TabDemo;



================================================
File: src/components/Demo/TableDemo.tsx
================================================

import React, { useState } from 'react';
import { Table } from '@site/src/components/UI/table';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';

const animationVariants = ['fade', 'slide', 'scale', 'flip', 'elastic'];
const sizeVariants = ['sm', 'md', 'lg'];
const tableVariants = ['surface', 'ghost'];

const TableDemo = () => {
  const [animationVariant, setAnimationVariant] = useState('fade');
  const [size, setSize] = useState('md');
  const [variant, setVariant] = useState('surface');

    const [sortConfig, setSortConfig] = useState<{ key: string; direction: 'asc' | 'desc' }>({ key: 'name', direction: 'asc' });
  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = 2;

  const [data, setData] = useState([
    { id: 1, name: 'John Doe', email: 'john@example.com', status: 'Active' },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com', status: 'Inactive' },
    { id: 3, name: 'Bob Johnson', email: 'bob@example.com', status: 'Active' },
    { id: 4, name: 'Alice Johnson', email: 'alice@example.com', status: 'Active' },
  ]);

  const handleSort = (key: string, direction: 'asc' | 'desc') => {
    setSortConfig({ key, direction });

    setData(prevData => {
      const sortedData = [...prevData].sort((a, b) => {
        const aValue = a[key as keyof typeof a];
        const bValue = b[key as keyof typeof b];

        const valueA = String(aValue).toLowerCase();
        const valueB = String(bValue).toLowerCase();

        if (valueA < valueB) {
          return direction === 'asc' ? -1 : 1;
        }
        if (valueA > valueB) {
          return direction === 'asc' ? 1 : -1;
        }
        return 0;
      });

      return sortedData;
    });
  };

  const headings = [
    { label: 'Name', key: 'name', sort: sortConfig.key === 'name' ? sortConfig.direction : 'asc' },
    { label: 'Email', key: 'email', sort: sortConfig.key === 'email' ? sortConfig.direction : 'asc' },
    { label: 'Status', key: 'status', sort: sortConfig.key === 'status' ? sortConfig.direction : 'asc' },
  ];

  const codeString = `
<Table
  headings={headings}
  data={data}
  applySort={handleSort}
  size="${size}"
  animationVariant="${animationVariant}"
  variant="${variant}"
  currentPage={currentPage}
  totalPages={totalPages}
  onPageChange={setCurrentPage}
/>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <div className="flex flex-wrap gap-4 justify-start md:justify-end ">
        <VariantSelector
          variants={animationVariants}
          selectedVariant={animationVariant}
          onSelectVariant={setAnimationVariant}
          type="Animation"
        />
        <VariantSelector
          variants={sizeVariants}
          selectedVariant={size}
          onSelectVariant={setSize}
          type="Size"
        />
        <VariantSelector
          variants={tableVariants}
          selectedVariant={variant}
          onSelectVariant={setVariant}
          type="Variant"
        />
      </div>
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="flex items-center justify-center border rounded-lg p-4 mt-4">
            <Table
              headings={headings}
              data={data}
              applySort={handleSort}
              size={size as any}
              animationVariant={animationVariant as any}
              variant={variant as any}
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={setCurrentPage}
            />
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx" className='whitespace-pre-wrap max-h-[500px] overflow-y-scroll'>{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default TableDemo;



================================================
File: src/components/Demo/TextareaDemo.tsx
================================================

import React, { useState } from 'react';
import AnimatedTextarea from '@site/src/components/UI/textarea';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';

const textareaVariants = [
  'clean',
  'glowBorder',
  'neonGlow',
  'expandable',
  'characterCount',
  'lineHighlight',
  'syntaxHighlight',
  'particleField',
  'wave',
  'spotlight',
  'liquid',
  'cosmic',
  'hologram',
  'elastic',
  'rippleEffect',
  'gradientBorder',
];

const TextareaDemo = () => {
  const [variant, setVariant] = useState('clean');
  const [value, setValue] = useState('');

  const codeString = `
<AnimatedTextarea
  placeholder="Type something..."
  variant="${variant}"
  value={value}
  onChange={setValue}
/>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <VariantSelector
        variants={textareaVariants}
        selectedVariant={variant}
        onSelectVariant={setVariant}
        type="Variant"
      />
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="w-full p-8 space-y-8 rounded-lg border mt-4">
            <div className="p-6 rounded-lg">
              <AnimatedTextarea
                placeholder="Type something..."
                variant={variant}
                value={value}
                onChange={setValue}
              />
            </div>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default TextareaDemo;



================================================
File: src/components/Demo/ToastDemo.tsx
================================================

import React, { useState } from 'react';
import { ToastProvider } from '@site/src/components/UI/toast';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';
import { Button } from '@site/src/components/UI/button';
import { InfoCircledIcon } from '@radix-ui/react-icons';
import { useToast } from '../UI/toast/use-toast';

const toastVariants = ['success', 'error', 'warning', 'info', 'default'];
const toastAnimations = ['slide', 'fade', 'bounce', 'pop'];
const toastAppearances = ['glow', 'gradient', 'glassmorphism', 'premium', 'neon'];

const ToastDemo = () => {
  const [variant, setVariant] = useState('info');
  const [animation, setAnimation] = useState('slide');
  const [appearance, setAppearance] = useState('glow');
  const toast = useToast();

  const codeString = `
toast.addToast({
  message: "Hello from Toast!",
  variant: "${variant}",
  animation: "${animation}",
  appearance: "${appearance}",
  icon: <InfoCircledIcon className="w-5 h-5" />
});
`;

  const showToast = () => {
    toast.addToast({
      message: 'Hello from Toast!',
      variant: variant as any,
      animation: animation as any,
      appearance: appearance as any,
      icon: <InfoCircledIcon className="w-5 h-5" />,
    });
  };

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <div className="flex flex-wrap gap-4 sm:justify-end justify-start">
        <VariantSelector
          variants={toastVariants}
          selectedVariant={variant}
          onSelectVariant={setVariant}
          type="Variant"
        />
        <VariantSelector
          variants={toastAnimations}
          selectedVariant={animation}
          onSelectVariant={setAnimation}
          type="Animation"
        />
        <VariantSelector
          variants={toastAppearances}
          selectedVariant={appearance}
          onSelectVariant={setAppearance}
          type="Appearance"
        />
      </div>
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="w-full p-8 space-y-8 rounded-lg border mt-4">
            <Button onClick={showToast}>Show Toast</Button>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

const ToastDemoWrapper = () => (
  <ToastProvider>
    <ToastDemo />
  </ToastProvider>
);

export default ToastDemoWrapper;



================================================
File: src/components/Demo/TooltipDemo.tsx
================================================

import React, { useState } from 'react';
import { Tooltip } from '@site/src/components/UI/tooltip';
import VariantSelector from './VariantSelector';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import CodeBlock from '@theme/CodeBlock';

const tooltipAnimations = ['fade', 'scale', 'slideUp', 'slideDown', 'slideLeft', 'slideRight'];
const tooltipBgs = ['dark', 'light', 'slate', 'default', 'transparent', 'glass', 'gradient', 'primary'];
const tooltipRounded = ['sm', 'md', 'full'];

const TooltipDemo = () => {
  const [animation, setAnimation] = useState('fade');
  const [bg, setBg] = useState('dark');
  const [rounded, setRounded] = useState('sm');

  const codeString = `
<Tooltip
  content="This is a tooltip"
  animation="${animation}"
  bg="${bg}"
  rounded="${rounded}"
>
  <button className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
    Hover me
  </button>
</Tooltip>
`;

  return (
    <div className="flex flex-col space-y-4 mb-8">
      <div className="flex flex-wrap gap-4 sm:justify-end justify-start">
        <VariantSelector
          variants={tooltipAnimations}
          selectedVariant={animation}
          onSelectVariant={setAnimation}
          type="Animation"
        />
        <VariantSelector variants={tooltipBgs} selectedVariant={bg} onSelectVariant={setBg} type="Bg" />
        <VariantSelector
          variants={tooltipRounded}
          selectedVariant={rounded}
          onSelectVariant={setRounded}
          type="Rounded"
        />
      </div>
      <Tabs>
        <TabItem value="preview" label="Preview">
          <div className="w-full p-8 rounded-lg border flex items-center justify-center mt-4">
            <Tooltip
              content="This is a tooltip"
              animation={animation as any}
              bg={bg as any}
              rounded={rounded as any}
            >
              <button className="px-4 py-2 text-white rounded-md bg-primary">
                Hover me
              </button>
            </Tooltip>
          </div>
        </TabItem>
        <TabItem value="code" label="Code">
          <CodeBlock language="tsx">{codeString}</CodeBlock>
        </TabItem>
      </Tabs>
    </div>
  );
};

export default TooltipDemo;



================================================
File: src/components/Demo/VariantSelector.tsx
================================================
import React from 'react';
import { Dropdown, DropdownItem } from '@site/src/components/UI/dropdown';
import { Button } from '@site/src/components/UI/button';

interface VariantSelectorProps {
  variants: string[];
  selectedVariant: string;
  onSelectVariant: (variant: string) => void;
  type?: string;
}

const VariantSelector: React.FC<VariantSelectorProps> = ({
  variants,
  selectedVariant,
  onSelectVariant,
  type = 'Variant',
}) => {
  return (
    <div className="flex justify-end mb-4 ">
      <Dropdown animation='default' className='max-h-[500px] overflow-y-scroll' bg='default' trigger={<Button variant="outline">{type}: {selectedVariant}</Button>}>
        {variants.map((v) => (
          <DropdownItem key={v} onClick={() => onSelectVariant(v)}>
            {v}
          </DropdownItem>
        ))}
      </Dropdown>
    </div>
  );
};

export default VariantSelector;



================================================
File: src/components/Examples/TableExample.tsx
================================================
import { useState } from 'react';
import { Table } from '../UI/table';

export function TableExample() {
    const [sortConfig, setSortConfig] = useState<{ key: string; direction: 'asc' | 'desc' }>({ key: 'name', direction: 'asc' });
    const [currentPage, setCurrentPage] = useState(1);
    const totalPages = 2;

    const [data, setData] = useState([
    { id: 1, name: 'John Doe', email: 'john@example.com', status: 'Active' },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com', status: 'Inactive' },
    { id: 3, name: 'Bob Johnson', email: 'bob@example.com', status: 'Active' },
    { id: 4, name: 'Alice Johnson', email: 'alice@example.com', status: 'Active' },
  ]);

  const handleSort = (key: string, direction: 'asc' | 'desc') => {
    setSortConfig({ key, direction });
    
    setData(prevData => {
      const sortedData = [...prevData].sort((a, b) => {
        // Handle different data types appropriately
        const aValue = a[key as keyof typeof a];
        const bValue = b[key as keyof typeof b];
        
        // Convert to string for case-insensitive comparison
        const valueA = String(aValue).toLowerCase();
        const valueB = String(bValue).toLowerCase();
        
        if (valueA < valueB) {
          return direction === 'asc' ? -1 : 1;
        }
        if (valueA > valueB) {
          return direction === 'asc' ? 1 : -1;
        }
        return 0;
      });
      
      return sortedData;
    });
  };

  const headings = [
    { label: 'Name', key: 'name', sort: sortConfig.key === 'name' ? sortConfig.direction : 'asc' },
    { label: 'Email', key: 'email', sort: sortConfig.key === 'email' ? sortConfig.direction : 'asc' },
    { label: 'Status', key: 'status', sort: sortConfig.key === 'status' ? sortConfig.direction : 'asc' },
  ];

  return (
    <div className='flex items-center justify-center'>
      <Table
        headings={headings}
        data={data}
        applySort={handleSort}
        size="lg"
        animationVariant="elastic"
        showHoverEffects={true}
        showStripes={true}
        variant="surface"
        currentPage={currentPage}
        totalPages={totalPages}
        onPageChange={setCurrentPage}
      />
    </div>
  );
}

export default TableExample;



================================================
File: src/components/HomepageFeatures/components-desktop.tsx
================================================
import { useRef, useState, useEffect } from 'react';
import { motion, useInView } from 'framer-motion';
import MagicBento from '../UI/magic-bento';
import { SparklesText } from '../UI/sparkle-text';
import { Button } from '../UI/button';
import { RocketIcon } from 'lucide-react';
import Link from '@docusaurus/Link';

const ComponentDesktop = () => {
  const sectionRef = useRef<HTMLDivElement>(null);
  const isInView = useInView(sectionRef, { once: true, margin: '-20% 0px' });
  
  // State for interactive components
  const [sliderValue, setSliderValue] = useState(30);
  const [isSwitchOn, setIsSwitchOn] = useState(true);
  const [buttonText, setButtonText] = useState('Click Me!');
  const [badgeCount, setBadgeCount] = useState(3);
  const [currentStep, setCurrentStep] = useState(0);

  // Auto-animate components
  useEffect(() => {
    if (!isInView) return;
    
    // Slider animation
    const sliderInterval = setInterval(() => {
      setSliderValue(prev => (prev >= 100 ? 10 : prev + 10));
    }, 2000);
    
    // Switch toggle
    const switchInterval = setInterval(() => {
      setIsSwitchOn(prev => !prev);
    }, 3000);
    
    // Button text animation
    const buttonInterval = setInterval(() => {
      setButtonText(prev => prev === 'Click Me!' ? 'Try Me!' : 'Click Me!');
    }, 2500);
    
    // Step animation
    const stepInterval = setInterval(() => {
      setCurrentStep(prev => (prev + 1) % 3);
    }, 3500);
    
    return () => {
      clearInterval(sliderInterval);
      clearInterval(switchInterval);
      clearInterval(buttonInterval);
      clearInterval(stepInterval);
    };
  }, [isInView]);

  return (
    <motion.section
      ref={sectionRef}
      className="px-4 relative overflow-visible max-w-7xl mx-auto"
      initial={{ opacity: 0, y: 20 }}
      animate={{
        opacity: isInView ? 1 : 0,
        y: isInView ? 0 : 20,
        transition: { duration: 0.8, ease: 'easeOut' },
      }}
    >
      {/* Fade out effect with radial gradient */}
      <div
        className="absolute inset-0 z-10 pointer-events-none"
        style={{
          maskImage: 'radial-gradient(circle at 50% 50%, black 0%, transparent 100%)',
          WebkitMaskImage: 'radial-gradient(circle at 50% 50%, black 30%, transparent 80%)',
        }}
      />

      <div className="relative">
        <SparklesText className="text-5xl font-bold text-center mb-2">
          Featured Components
        </SparklesText>
        <div
          className="relative overflow-hidden rounded-2xl"
          style={{
            maskImage: 'linear-gradient(to right, black 0%, black 90%, transparent 100%)',
            WebkitMaskImage: 'linear-gradient(to right, black 0%, black 90%, transparent 100%)',
          }}
        >
          <div
            style={{
              maskImage: 'linear-gradient(to left, black 0%, black 90%, transparent 100%)',
              WebkitMaskImage: 'linear-gradient(to left, black 0%, black 90%, transparent 100%)',
            }}
          >
            <div
              style={{
                maskImage: 'linear-gradient(to bottom, black 0%, black 90%, transparent 100%)',
                WebkitMaskImage:
                  'linear-gradient(to bottom, black 0%, black 90%, transparent 100%)',
              }}
            >
              <MagicBento 
                sliderValue={sliderValue}
                onSliderChange={setSliderValue}
                isSwitchOn={isSwitchOn}
                onSwitchToggle={setIsSwitchOn}
                buttonText={buttonText}
                onButtonClick={() => setButtonText('Clicked!')}
                badgeCount={badgeCount}
                onBadgeIncrement={() => setBadgeCount(prev => prev + 1)}
                currentStep={currentStep}
                onStepClick={setCurrentStep}
                spotlightRadius={300} 
              />
            </div>
          </div>
        </div>
        <div className="flex justify-center mt-6">
          <Link to="/docs/introduction">
            <Button size="xl" className="px-8 py-3 transition-all duration-300 cursor-pointer">
              <RocketIcon className="mr-2 h-6 w-6" strokeWidth={2.5} />
              Browse All Components
            </Button>
          </Link>
        </div>
      </div>
    </motion.section>
  );
};

export default ComponentDesktop;



================================================
File: src/components/HomepageFeatures/components-showcase.tsx
================================================
import { useRef } from 'react';
import { RocketIcon } from 'lucide-react';
import { Card, CardContent } from '../UI/card';
import { Button } from '../UI/button';
import { useToast } from '../UI/toast/use-toast';
import { InfoCircledIcon } from '@radix-ui/react-icons';
import { Slider } from '../UI/slider';
import { Switch } from '../UI/switch';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '../UI/accordion';
import Link from '@docusaurus/Link';
import { motion, useInView } from 'framer-motion';
import { SparklesText } from '../UI/sparkle-text';

// A small wrapper for the toast demo to use the useToast hook correctly
const ToastDemo = () => {
  const toast = useToast();
  return (
    <Button
      variant="default"
      size="lg"
      onClick={() =>
        toast.addToast({
          message: 'Hello from Ignix UI!',
          variant: 'error',
          animation: 'slide',
          icon: <InfoCircledIcon className="w-5 h-5" />,
        })
      }
      className="m-12"
    >
      Show Toast
    </Button>
  );
};

const ComponentShowcase = () => {
  const sectionRef = useRef<HTMLDivElement>(null);
  const isInView = useInView(sectionRef, { once: true, margin: '-20% 0px' });

  const showcaseItems = [
    {
      id: 'themed-slider',
      title: 'Themed Sliders',
      description: 'From minimal to cyberpunk',
      size: 'medium',
      demo: (
        <div className="w-3/4 flex flex-col gap-4">
          <Slider
            defaultValue={[75]}
            max={100}
            variant="default"
            animationType="breathe"
            showValue
          />
          <Slider defaultValue={[50]} max={100} variant="retro" showValue />
        </div>
      ),
    },
    {
      id: 'variant-buttons',
      title: 'Variant-rich Buttons',
      description: 'Buttons for every occasion',
      size: 'medium',
      demo: (
        <div className="flex flex-col gap-4 items-center justify-center h-full">
          <Button variant="outline" size="lg" animationVariant="bounce">
            Bouncy
          </Button>
          <Button variant="default" animationVariant="wobble">
            Wobble
          </Button>
        </div>
      ),
    },
    {
      id: 'animated-accordion',
      title: 'Animated Accordion',
      description: 'Customizable reveal animations',
      size: 'medium',
      demo: (
        <div className="w-full p-4 flex items-center justify-center">
          <Accordion type="single" collapsible className="w-full text-foreground">
            <AccordionItem value="item-1">
              <AccordionTrigger>Is it animated?</AccordionTrigger>
              <AccordionContent variant="bounce">
                Yes! With multiple animation variants like bounce, slide, and flip.
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      ),
    },
    {
      id: 'custom-toast',
      title: 'Customizable Toasts',
      description: 'User feedback, delivered',
      size: 'medium',
      demo: <ToastDemo />,
    },
    {
      id: 'stylish-switch',
      title: 'Stylish Switches',
      description: 'Satisfying toggle animations',
      size: 'medium',
      demo: (
        <div className="flex items-center justify-center gap-6 h-full m-14">
          <Switch variant="ios" animation="bounce" defaultChecked />
          <Switch variant="material" animation="jelly" />
          <Switch variant="slim" animation="rotate" defaultChecked />
        </div>
      ),
    },
  ];

  const getBentoSize = (size: string) => {
    switch (size) {
      case 'large':
        return 'md:col-span-2 md:row-span-2';
      case 'wide':
        return 'md:col-span-2';
      case 'tall':
        return 'md:row-span-2';
      default:
        return 'md:col-span-1 md:row-span-1';
    }
  };

  return (
    <motion.section
      ref={sectionRef}
      className="px-4 relative overflow-hidden"
      initial={{ opacity: 0, y: 20 }}
      animate={{
        opacity: isInView ? 1 : 0,
        y: isInView ? 0 : 20,
        transition: { duration: 0.8, ease: 'easeOut' },
      }}
    >
      {/* Background Effects */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-red-500/5 rounded-full blur-3xl animate-pulse-slow"></div>
        <div
          className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-red-500/5 rounded-full blur-3xl animate-pulse-slow"
          style={{ animationDelay: '2s' }}
        ></div>
      </div>

      <div className="max-w-7xl mx-auto relative z-5">
        <div className="text-center mb-16">
          <SparklesText className="text-5xl font-bold text-center">
            Featured Components
          </SparklesText>
        </div>

        {/* Bento Grid */}
        <motion.div
          className="grid grid-cols-1 md:grid-cols-4 gap-4 max-w-6xl mx-auto"
          initial={{ y: 20 }}
          animate={{ y: 0 }}
          transition={{ duration: 1, ease: 'easeInOut', delay: 0.2 }}
        >
          {showcaseItems.map((item, index) => (
            <Card
              variant="glass"
              key={item.id}
              className={`${getBentoSize(
                item.size
              )} border-gray-700 hover:border-red-500/50 transition-all duration-500 group animate-fade-up backdrop-blur-sm relative overflow-hidden min-h-[200px]`}
              style={{
                animationDelay: `${index * 0.1}s`,
              }}
            >
              {/* Hover Gradient Overlay */}
              <div className="absolute inset-0 bg-gradient-to-br from-red-500/10 via-transparent to-red-500/10 opacity-0 group-hover:opacity-100 transition-all duration-200"></div>

              <CardContent className="p-6 h-full flex flex-col relative z-10">
                <div className="flex-1 flex items-center justify-center mb-4">{item.demo}</div>

                <div className="text-center">
                  <h3 className="text-lg font-semibold text-white mb-2">{item.title}</h3>

                  <p className="text-sm leading-relaxed">{item.description}</p>
                </div>
              </CardContent>

              {/* Corner Accent */}
              <div className="absolute top-0 right-0 w-16 h-16 bg-gradient-to-bl from-red-500/20 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300"></div>
            </Card>
          ))}
        </motion.div>

        {/* Call to Action */}
        <div className="flex justify-center mt-6">
          <Link to="/docs/introduction">
            <Button size="xl" className="px-8 py-3 transition-all duration-300 cursor-pointer">
              <RocketIcon className="mr-2 h-5 w-5" strokeWidth={2.5} />
              Browse All Elements
            </Button>
          </Link>
        </div>
      </div>
    </motion.section>
  );
};

export default ComponentShowcase;



================================================
File: src/components/HomepageFeatures/index.tsx
================================================
import React from 'react';
import styles from './styles.module.css';
import ComponentShowcase from './components-showcase';
import ComponentDesktop from './components-desktop';

export default function HomepageFeatures(): React.JSX.Element {
  return (
    <section className={styles.componentShowcase}>
      <div className="">
        <div className="hidden md:block">
          <ComponentDesktop />
          {/* <MagicBento spotlightRadius={300}/> */}
        </div>
        <div className="block md:hidden p-4">
          <ComponentShowcase />
        </div>
      </div>
    </section>
  );
}


================================================
File: src/components/HomepageFeatures/styles.module.css
================================================
.componentShowcase {
  position: relative;
  z-index: 1;
  min-height: 100vh;
  width: 100%;
  padding: 2rem;
}

.showcaseCard {
  background-color: hsl(var(--background) / 0.5);
  border: 1px solid hsl(var(--border));
  border-radius: 1rem;
  padding: 1.5rem;
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  overflow: hidden;
  position: relative;
  transition: transform 0.3s ease, box-shadow 0.3s ease, border-color 0.3s ease;
}

.showcaseCard:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 30px hsl(var(--primary) / 0.1);
  border-color: hsl(var(--primary) / 0.5);
}

.cardHeader {
  margin-bottom: 1.5rem;
}

.cardTitle {
  font-size: 1.25rem;
  font-weight: 600;
  color: hsl(var(--foreground));
  margin-bottom: 0.5rem;
}

.cardDescription {
  font-size: 0.9rem;
  color: hsl(var(--muted-foreground));
  line-height: 1.5;
}

.cardContent {
  min-height: 150px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: hsl(var(--secondary));
  border-radius: 0.75rem;
  padding: 2rem;
  border: 1px solid hsl(var(--border));
  position: relative;
  overflow: hidden;
}

.cardContent::before {
  content: '';
  position: absolute;
  inset: 0;
  background-image:
    linear-gradient(to right, hsl(var(--border)) 1px, transparent 1px),
    linear-gradient(to bottom, hsl(var(--border)) 1px, transparent 1px);
  background-size: 2rem 2rem;
  opacity: 0.1;
  mask-image: radial-gradient(ellipse at center, black, transparent 70%);
}


================================================
File: src/components/UI/accordion/index.tsx
================================================
'use client';

import * as React from 'react';
import * as AccordionPrimitive from '@radix-ui/react-accordion';
import { ChevronDown } from 'lucide-react';
import { motion } from 'framer-motion';
import { cn } from '../../../utils/cn';

const animations = {
  fade: {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { duration: 1 } },
  },
  slideDown: {
    hidden: { y: -10, opacity: 0 },
    visible: { y: 0, opacity: 1, transition: { duration: 1 } },
  },
  slideUp: {
    hidden: { y: 10, opacity: 0 },
    visible: { y: 0, opacity: 1, transition: { duration: 1 } },
  },
  scaleIn: {
    hidden: { scale: 0.8, opacity: 0 },
    visible: { scale: 1, opacity: 1, transition: { duration: 1 } },
  },
  rotate: {
    hidden: { rotateX: 90, opacity: 0 },
    visible: { rotateX: 0, opacity: 1, transition: { duration: 1 } },
  },
  bounce: {
    hidden: { scale: 0.8, opacity: 0 },
    visible: {
      scale: 1,
      opacity: 1,
      transition: { type: 'spring', stiffness: 300 },
    },
  },
  flip: {
    hidden: { rotateY: 90, opacity: 0 },
    visible: { rotateY: 0, opacity: 1, transition: { duration: 1 } },
  },
  zoomIn: {
    hidden: { scale: 0.5, opacity: 0 },
    visible: { scale: 1, opacity: 1, transition: { duration: 1 } },
  },
  elastic: {
    hidden: { scale: 0.5, opacity: 0 },
    visible: {
      scale: 1,
      opacity: 1,
      transition: { type: 'spring', stiffness: 100, damping: 10 },
    },
  },
  springy: {
    hidden: { y: -20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { type: 'spring', stiffness: 200 },
    },
  },
};

type AnimationVariants = keyof typeof animations;

const getAnimationVariant = (variant: AnimationVariants) => {
  return animations[variant] || animations.fade;
};
const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn('border-b AccordionItem', className)}
    {...props}
  />
));
AccordionItem.displayName = 'AccordionItem';

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex AccordionHeader">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180 AccordionTrigger',
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200 AccordionChevron" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

interface AccordionContentProps extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content> {
  variant?: AnimationVariants;
}

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  AccordionContentProps
>(({ className, children, variant = 'fade', ...props }, ref) => {
  const animationVariant = getAnimationVariant(variant);
  return (
    <AccordionPrimitive.Content
      ref={ref}
      className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down AccordionContent"
      {...props}
    >
      <div className={cn('pb-4 pt-0', className)}>
        {' '}
        <motion.div
          initial="hidden"
          animate="visible"
          exit="hidden"
          variants={animationVariant}
          className="AccordionContentText"
        >
          {children}
        </motion.div>
      </div>
    </AccordionPrimitive.Content>
  );
});

AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };



================================================
File: src/components/UI/badge/index.tsx
================================================
import React from "react";
import { motion, Variants} from "framer-motion";
import { cn } from "../../../utils/cn";

interface BadgeProps {
    text: string;
    type?: "primary" | "secondary" | "success" | "warning" | "error";
    variant?: "pulse" | "bounce" | "tinypop";
    className?: string;
    children?: React.ReactNode;
}

const Badge: React.FC<BadgeProps> = ({
    text,
    type = "primary",
    className,
    variant = "tinypop",
    children
}) => {
    const types = {
        primary: cn(
            "bg-primary text-primary-foreground",
            "shadow-lg shadow-primary/25",
            "ring-2 ring-primary/20"
        ),
        secondary: cn(
            "bg-secondary text-secondary-foreground",
            "shadow-lg shadow-secondary/25",
            "ring-2 ring-secondary/20"
        ),
        success: cn(
            "bg-success text-success-foreground",
            "shadow-lg shadow-success/25",
            "ring-2 ring-success/20"
        ),
        warning: cn(
            "bg-warning text-warning-foreground",
            "shadow-lg shadow-warning/25",
            "ring-2 ring-warning/30"
        ),
        error: cn(
            "bg-destructive text-destructive-foreground",
            "shadow-lg shadow-destructive/25",
            "ring-2 ring-destructive/20"
        ),
    };

    const getAnimationShadows = (type: string) => {
        const shadowColors = {
            primary: "hsl(var(--primary))",
            secondary: "hsl(var(--secondary))",
            success: "hsl(var(--success))",
            warning: "hsl(var(--warning))",
            error: "hsl(var(--destructive))",
        };
        return shadowColors[type as keyof typeof shadowColors] || shadowColors.primary;
    };

    const animationVariants:{'pulse': Variants, 'bounce': Variants, tinypop: Variants} = {
        pulse: {
            initial: {
                scale: 1,
                boxShadow: `0 0 0 0 rgba(${getAnimationShadows(type)}, 0.7)`,
            },
            animate: {
                scale: [1, 1.1, 1],
                boxShadow: [
                    `0 0 0 0 rgba(${getAnimationShadows(type)}, 0.7)`,
                    `0 0 0 8px rgba(${getAnimationShadows(type)}, 0.1)`,
                    `0 0 0 12px rgba(${getAnimationShadows(type)}, 0)`
                ],
                transition: {
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeOut",
                    times: [0, 0.5, 1]
                },
            },
        },
        bounce: {
            initial: { 
                y: 0,
                opacity: 1,
                rotate: 0,
                scale: 1 
            },
            animate: {
                y: [0, -70, 0, 50, 0, 0, 0],
                rotate: [0, -5, 0, -2, 0, -1, 0],
                scale: [1, 1.2, 0.95, 1.1, 0.98, 1.05, 1],
                transition: {
                    duration: 1.5,
                    repeat: Infinity,
                    repeatType: 'loop',
                    ease: "easeOut",
                    times: [0, 0.2, 0.4, 0.6, 0.75, 0.9, 1]
                },
            },
        },
        tinypop: {
            initial: { scale: 1 },
            animate: {
                scale: [1, 1.5, 1],
                rotate: [0, 2, -2, 0],
                transition: {
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut",
                    times: [0, 0.3, 1]
                }
            },           
        }
    };

    return (
        <div className="relative inline-flex items-center">
            {children}
            <motion.div
                variants={animationVariants[variant]}
                initial="initial"
                animate="animate"
                className={cn(
                    "absolute -top-1 -right-1 sm:-top-2 sm:-right-2",
                    "min-w-5 h-5 sm:min-w-6 sm:h-6",
                    "rounded-full flex items-center justify-center",
                    "text-xs sm:text-sm font-bold tracking-tight",
                    "backdrop-blur-sm",
                    "border border-white/20 dark:border-black/20",
                    "transition-all duration-200",
                    "px-1.5 sm:px-2",
                    "z-10",
                    "hover:scale-105 active:scale-95",
                    "hover:shadow-xl transition-transform duration-200",
                    types[type],
                    className
                )}
                whileHover={{ 
                    scale: 1.05,
                    transition: { duration: 0.2 }
                }}
                whileTap={{ 
                    scale: 0.95,
                    transition: { duration: 0.1 }
                }}
            >
                <span className="relative z-10 leading-none">
                    {text}
                </span>
                
                <div 
                    className="absolute inset-0 rounded-full bg-gradient-to-t from-transparent to-white/20 dark:to-white/10 pointer-events-none" 
                    aria-hidden="true"
                />
            </motion.div>
        </div>
    );
};

Badge.displayName = "Badge";
export { Badge };


================================================
File: src/components/UI/blur-text/index.tsx
================================================
import { motion, Transition } from "framer-motion";
import { EasingFunction } from "motion-utils";
import { useEffect, useRef, useState, useMemo } from "react";

type BlurTextProps = {
  text?: string;
  delay?: number;
  className?: string;
  animateBy?: "words" | "letters";
  direction?: "top" | "bottom";
  threshold?: number;
  rootMargin?: string;
  animationFrom?: Record<string, string | number>;
  animationTo?: Array<Record<string, string | number>>;
  easing?: EasingFunction;
  onAnimationComplete?: () => void;
  stepDuration?: number;
};

const buildKeyframes = (
  from: Record<string, string | number>,
  steps: Array<Record<string, string | number>>
): Record<string, Array<string | number>> => {
  const keys = new Set<string>([
    ...Object.keys(from),
    ...steps.flatMap((s) => Object.keys(s)),
  ]);

  const keyframes: Record<string, Array<string | number>> = {};
  keys.forEach((k) => {
    keyframes[k] = [from[k], ...steps.map((s) => s[k])];
  });
  return keyframes;
};

const BlurText: React.FC<BlurTextProps> = ({
  text = "",
  delay = 200,
  className = "",
  animateBy = "words",
  direction = "top",
  threshold = 0.1,
  rootMargin = "0px",
  animationFrom,
  animationTo,
  easing = (t) => t,
  onAnimationComplete,
  stepDuration = 0.35,
}) => {
  const elements = animateBy === "words" ? text.split(" ") : text.split("");
  const [inView, setInView] = useState(false);
  const ref = useRef<HTMLParagraphElement>(null);

  useEffect(() => {
    if (!ref.current) return;
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setInView(true);
          observer.unobserve(ref.current as Element);
        }
      },
      { threshold, rootMargin }
    );
    observer.observe(ref.current);
    return () => observer.disconnect();
  }, [threshold, rootMargin]);

  const defaultFrom = useMemo(
    () =>
      direction === "top"
        ? { filter: "blur(10px)", opacity: 0, y: -50 }
        : { filter: "blur(10px)", opacity: 0, y: 50 },
    [direction]
  );

  const defaultTo = useMemo(
    () => [
      {
        filter: "blur(5px)",
        opacity: 0.5,
        y: direction === "top" ? 5 : -5,
      },
      { filter: "blur(0px)", opacity: 1, y: 0 },
    ],
    [direction]
  );

  const fromSnapshot = animationFrom ?? defaultFrom;
  const toSnapshots = animationTo ?? defaultTo;

  const stepCount = toSnapshots.length + 1;
  const totalDuration = stepDuration * (stepCount - 1);
  const times = Array.from({ length: stepCount }, (_, i) =>
    stepCount === 1 ? 0 : i / (stepCount - 1)
  );

  return (
    <p ref={ref} className={`blur-text ${className} flex flex-wrap`}>
      {elements.map((segment, index) => {
        const animateKeyframes = buildKeyframes(fromSnapshot, toSnapshots);

        const spanTransition: Transition = {
          duration: totalDuration,
          times,
          delay: (index * delay) / 1000,
          ease: easing,
        };

        return (
          <motion.span
            key={index}
            initial={fromSnapshot}
            animate={inView ? animateKeyframes : fromSnapshot}
            transition={spanTransition}
            onAnimationComplete={
              index === elements.length - 1 ? onAnimationComplete : undefined
            }
            style={{
              display: "inline-block",
              willChange: "transform, filter, opacity",
            }}
          >
            {segment === " " ? "\u00A0" : segment}
            {animateBy === "words" && index < elements.length - 1 && "\u00A0"}
          </motion.span>
        );
      })}
    </p>
  );
};

export default BlurText;



================================================
File: src/components/UI/breadcrumbs/index.tsx
================================================
"use client";

import React from "react";
import { motion, AnimatePresence } from "framer-motion";
import { cva, type VariantProps } from "class-variance-authority";
import { ChevronRight, Check, Circle, Home, ArrowRight } from "lucide-react";
import { cn } from "../../../utils/cn";

export interface BreadcrumbsProps 
  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onAnimationStart' | 'onDragStart' | 'onDragEnd' | 'onDrag'>,
    VariantProps<typeof breadcrumbsVariants> {
  items?: { label: string; href?: string; icon?: React.ElementType }[];
  separatorIcon?: React.ElementType;
  steps?: string[];
  currentStep?: number;
}

const breadcrumbsVariants = cva("w-full", {
  variants: {
    size: {
      sm: "text-sm gap-1",
      md: "text-base gap-2", 
      lg: "text-lg gap-3",
    },
    shape: {
      rectangle: "rounded-lg",
      round: "rounded-full",
      pill: "rounded-2xl",
      default: "rounded-xl",
    },
    variant: {
      text: "flex items-center flex-wrap bg-background/50 backdrop-blur-sm p-2 rounded-xl",
      step: "flex flex-col space-y-6",
      progress: "space-y-6 bg-gradient-to-br from-background/80 to-muted/20 backdrop-blur-sm p-6 rounded-2xl shadow-lg",
      custom: "flex flex-wrap items-center gap-2 p-3 rounded-2xl shadow-xl",
    },
    bgColor: {
      primary: "bg-gradient-to-r from-primary to-primary/80 hover:from-primary/80 hover:to-primary shadow-lg shadow-primary/25",
      secondary: "bg-gradient-to-r from-secondary to-secondary/80 hover:from-secondary/80 hover:to-secondary shadow-lg shadow-secondary/25",
      success: "bg-gradient-to-r from-success to-success/80 hover:from-success/80 hover:to-success shadow-lg shadow-success/25",
      destructive: "bg-gradient-to-r from-destructive to-destructive/80 hover:from-destructive/80 hover:to-destructive shadow-lg shadow-destructive/25",
      transparent: "bg-transparent",
    },
    textColor: {
      primary: "text-primary-foreground",
      secondary: "text-secondary-foreground",
      muted: "text-muted-foreground",
      accent: "text-accent-foreground",
    },
  },
  defaultVariants: {
    size: "md",
    shape: "pill",
    variant: "text",
  },
});

// Individual item variants based on the main variant
const itemVariants = cva("relative inline-flex items-center font-medium transition-all duration-300", {
  variants: {
    variant: {
      text: "gap-2 px-3 py-1.5 rounded-xl backdrop-blur-sm hover:bg-muted/50 hover:shadow-md hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-primary/20 focus:ring-offset-2 focus:ring-offset-background",
      step: "gap-3 p-2",
      progress: "gap-3 p-1",
      custom: "gap-2 px-4 py-2 font-medium transition-all duration-300 backdrop-blur-sm hover:shadow-lg hover:scale-105 active:scale-95 focus:outline-none focus:ring-2 focus:ring-primary/20 focus:ring-offset-2 overflow-hidden group",
    },
    size: {
      sm: "px-2 py-1 text-xs",
      md: "px-3 py-1.5 text-sm",
      lg: "px-4 py-2 text-base"
    },
    isActive: { 
      true: "text-foreground bg-background/80 shadow-sm ",
      false: "text-muted-foreground"  
    }
  },
  defaultVariants: {
    variant: "text",
    size: "md",
    isActive: false
  }
});

const AnimatedSeparator: React.FC<{ 
  icon?: React.ElementType; 
  isActive?: boolean;
  size?: "sm" | "md" | "lg";
  variant?: "text" | "step" | "progress" | "custom";
}> = ({ 
  icon: Icon = ChevronRight, 
  isActive = false,
  size = "md",
  variant = "text"
}) => {
  const sizeClasses = {
    sm: "h-3 w-3",
    md: "h-4 w-4", 
    lg: "h-5 w-5"
  };

  const variantClasses = {
    text: "mx-1 sm:mx-2",
    step: "mx-3 sm:mx-4",
    progress: "mx-2 sm:mx-3",
    custom: "mx-2"
  };

  return (
    <motion.div
      className={cn(
        "flex items-center justify-center",
        variantClasses[variant]
      )}
      initial={{ scale: 0.8, opacity: 0.5 }}
      animate={{ 
        scale: isActive ? 1.1 : 1,
        opacity: isActive ? 1 : 0.6,
        rotate: isActive ? [0, 10, -10, 0] : 0
      }}
      transition={{
        duration: 0.3,
        ease: "easeInOut",
        rotate: {
          duration: 0.6,
          ease: "easeInOut"
        }
      }}
      whileHover={{
        scale: 1.2,
        transition: { duration: 0.2 }
      }}
    >
      <Icon className={cn(
        sizeClasses[size],
        "text-muted-foreground transition-colors duration-300",
        isActive && "text-primary"
      )} />
    </motion.div>
  );
};

const BreadcrumbItem: React.FC<{
  item: { label: string; href?: string; icon?: React.ElementType };
  isLast: boolean;
  isActive?: boolean;
  size?: "sm" | "md" | "lg";
  variant?: "text" | "step" | "progress" | "custom";
}> = ({ item, isLast, isActive = false, size = "md", variant = "text" }) => {

  const ItemContent = (
    <motion.span
      className={cn(
        itemVariants({ variant, size, isActive: isLast || isActive }),
        // Special styling for different variants
        variant === "text" && "rounded-xl",
        variant === "custom" && "rounded-2xl"
      )}
      whileHover={{
        scale: 1.05,
        transition: { type: "spring", stiffness: 400, damping: 15 }
      }}
      whileTap={{
        scale: 0.95,
        transition: { duration: 0.1 }
      }}
      layout
    >
      {item.icon && (
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ delay: 0.1 }}
        >
          <item.icon className={cn(
            "shrink-0",
            size === "sm" ? "h-3 w-3" : size === "lg" ? "h-5 w-5" : "h-4 w-4"
          )} />
        </motion.div>
      )}
      
      <span className="truncate max-w-[120px] sm:max-w-[200px] lg:max-w-none">
        {item.label}
      </span>
      
      {/* Enhanced glow effect for active items */}
      {(isLast || isActive) && (
        <motion.div
          className={cn(
            "absolute inset-0 -z-10",
            variant === "text" && "rounded-xl bg-gradient-to-r from-primary/10 to-primary/5",
            variant === "custom" && "rounded-2xl"
          )}
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.3 }}
        />
      )}
    </motion.span>
  );

  return (
    <motion.div
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4, ease: "easeOut" }}
      layout
    >
      {item.href && !isLast ? (
        <a
          href={item.href}
          className="group relative inline-block focus:outline-none"
        >
          {ItemContent}
          {variant === "text" && (
            <motion.div
              className="absolute bottom-0 left-0 h-0.5 bg-gradient-to-r from-primary to-primary/60 origin-left rounded-full"
              initial={{ scaleX: 0 }}
              whileHover={{ scaleX: 1 }}
              transition={{ duration: 0.3 }}
            />
          )}
        </a>
      ) : (
        ItemContent
      )}
    </motion.div>
  );
};

const StepIndicator: React.FC<{
  step: string;
  index: number;
  currentStep: number;
  size?: "sm" | "md" | "lg";
  variant?: "step" | "progress";
}> = ({ step, index, currentStep, size = "md", variant = "step" }) => {
  const isCompleted = index < currentStep;
  const isActive = index === currentStep;
  const isFuture = index > currentStep;

  const sizeClasses = {
    sm: { circle: "w-6 h-6 text-xs", text: "text-xs", gap: "gap-2" },
    md: { circle: "w-8 h-8 text-sm", text: "text-sm", gap: "gap-3" },
    lg: { circle: "w-10 h-10 text-base", text: "text-base", gap: "gap-4" }
  };

  const variantClasses = {
    step: "flex items-center",
    progress: "flex items-center bg-background/50 backdrop-blur-sm p-3 rounded-xl"
  };

  return (
    <motion.div
      className={cn(
        variantClasses[variant],
        sizeClasses[size].gap
      )}
      initial={{ opacity: 0, scale: 0.8 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ delay: index * 0.1 }}
    >
      <motion.div
        className={cn(
          "relative flex items-center justify-center rounded-full font-bold transition-all duration-500",
          sizeClasses[size].circle,
          "border-2 backdrop-blur-sm",
          isCompleted && "bg-gradient-to-br from-success to-success/80 border-success text-white shadow-lg shadow-success/25",
          isActive && "bg-gradient-to-br from-primary to-primary/80 border-primary text-white shadow-lg shadow-primary/25 ring-4 ring-primary/20",
          isFuture && "bg-muted/50 border-border text-muted-foreground"
        )}
        whileHover={{
          scale: 1.1,
          transition: { type: "spring", stiffness: 400, damping: 15 }
        }}
        animate={isActive ? {
          boxShadow: [
            "0 0 0 0 hsl(var(--primary) / 0.4)",
            "0 0 0 8px hsl(var(--primary) / 0.1)",
            "0 0 0 0 hsl(var(--primary) / 0)"
          ]
        } : {}}
        transition={{
          boxShadow: {
            duration: 2,
            repeat: Infinity,
            ease: "easeInOut"
          }
        }}
      >
        <AnimatePresence mode="wait">
          {isCompleted ? (
            <motion.div
              key="check"
              initial={{ scale: 0, rotate: -90 }}
              animate={{ scale: 1, rotate: 0 }}
              exit={{ scale: 0, rotate: 90 }}
              transition={{ type: "spring", stiffness: 500, damping: 15 }}
            >
              <Check className={cn(
                "shrink-0",
                size === "sm" ? "h-3 w-3" : size === "lg" ? "h-5 w-5" : "h-4 w-4"
              )} />
            </motion.div>
          ) : (
            <motion.span
              key="number"
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              exit={{ scale: 0 }}
              transition={{ type: "spring", stiffness: 300, damping: 15 }}
            >
              {index + 1}
            </motion.span>
          )}
        </AnimatePresence>

        {isActive && (
          <motion.div
            className="absolute inset-0 rounded-full border-2 border-primary/50"
            animate={{
              scale: [1, 1.3, 1],
              opacity: [1, 0, 1]
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              ease: "easeInOut"
            }}
          />
        )}
      </motion.div>

      <motion.span
        className={cn(
          "font-medium transition-colors duration-300 truncate max-w-[100px] sm:max-w-[150px] lg:max-w-none",
          sizeClasses[size].text,
          isCompleted && "text-success-foreground",
          isActive && "text-primary font-semibold",
          isFuture && "text-muted-foreground"
        )}
        animate={isActive ? {
          scale: [1, 1.05, 1]
        } : {}}
        transition={{
          duration: 2,
          repeat: Infinity,
          ease: "easeInOut"
        }}
      >
        {step}
      </motion.span>
    </motion.div>
  );
};

const ProgressBreadcrumbs: React.FC<{
  steps: string[];
  currentStep: number;
  size?: "sm" | "md" | "lg";
}> = ({ steps, currentStep, size = "md" }) => {
  const progress = ((currentStep + 1) / steps.length) * 100;

  return (
    <>
      {/* Enhanced progress bar with gradient */}
      <div className="relative mb-6 sm:mb-8">
        <div className="h-3 bg-gradient-to-r from-muted/30 to-muted/50 rounded-full overflow-hidden backdrop-blur-sm border border-border/30 shadow-inner">
          <motion.div
            className="h-full bg-gradient-to-r from-primary via-primary/80 to-primary shadow-sm relative overflow-hidden"
            initial={{ width: 0 }}
            animate={{ width: `${progress}%` }}
            transition={{ duration: 0.8, ease: "easeInOut" }}
          >
            {/* Animated shine effect */}
            <motion.div
              className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent"
              animate={{
                x: ["-100%", "100%"]
              }}
              transition={{
                duration: 2,
                repeat: Infinity,
                ease: "linear"
              }}
            />
          </motion.div>
        </div>
        
        {/* Enhanced progress percentage */}
        <motion.div
          className="absolute -top-10 bg-gradient-to-br from-background/95 to-muted/30 backdrop-blur-sm px-3 py-1.5 rounded-lg shadow-lg border border-border/60 text-xs font-bold text-primary"
          initial={{ left: 0 }}
          animate={{ left: `calc(${progress}% - 1.5rem)` }}
          transition={{ duration: 0.8, ease: "easeInOut" }}
        >
          {Math.round(progress)}%
          <div className="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-[4px] border-r-[4px] border-t-[4px] border-transparent border-t-border/60" />
        </motion.div>
      </div>

      {/* Steps with progress variant styling */}
      <div className="flex flex-wrap items-center gap-2 sm:gap-4">
        {steps.map((step, index) => (
          <React.Fragment key={step}>
            <StepIndicator 
              step={step} 
              index={index} 
              currentStep={currentStep}
              size={size}
              variant="progress"
            />
            {index < steps.length - 1 && (
              <AnimatedSeparator 
                icon={ArrowRight}
                isActive={index < currentStep}
                size={size}
                variant="progress"
              />
            )}
          </React.Fragment>
        ))}
      </div>
    </>
  );
};

export const Breadcrumbs: React.FC<BreadcrumbsProps> = ({
  items = [],
  variant = "text",
  size = "md",
  separatorIcon: SeparatorIcon,
  steps = [],
  currentStep = 0,
  className,
  shape,
  ...props
}) => {
  // Add home icon to first item if not present
  const processedItems = items.map((item, index) => ({
    ...item,
    icon: item.icon || (index === 0 ? Home : undefined)
  }));

  return (
    <motion.nav
      className={cn(
        breadcrumbsVariants({ size, variant, shape }), 
        className
      )}
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      aria-label="Breadcrumb navigation"
      {...props}
    >
      {variant === "text" && processedItems.length > 0 && (
        <>
          {processedItems.map((item, index) => (
            <React.Fragment key={`${item.label}-${index}`}>
              <BreadcrumbItem
                item={item}
                isLast={index === processedItems.length - 1}
                size={size}
                variant={variant}
              />
              {index < processedItems.length - 1 && (
                <AnimatedSeparator 
                  icon={SeparatorIcon}
                  isActive={index < processedItems.length - 1}
                  size={size}
                  variant={variant}
                />
              )}
            </React.Fragment>
          ))}
        </>
      )}

      {variant === "step" && steps.length > 0 && (
        <div className="flex flex-wrap items-center gap-2 sm:gap-4">
          {steps.map((step, index) => (
            <React.Fragment key={step}>
              <StepIndicator 
                step={step} 
                index={index} 
                currentStep={currentStep}
                size={size}
                variant={variant}
              />
              {index < steps.length - 1 && (
                <AnimatedSeparator 
                  icon={SeparatorIcon}
                  isActive={index < currentStep}
                  size={size}
                  variant={variant}
                />
              )}
            </React.Fragment>
          ))}
        </div>
      )}

      {variant === "progress" && steps.length > 0 && (
        <ProgressBreadcrumbs 
          steps={steps} 
          currentStep={currentStep}
          size={size}
        />
      )}

      {variant === "custom" && processedItems.length > 0 && (
        <>
          {processedItems.map((item, index) => (
            <React.Fragment key={`${item.label}-${index}`}>
              <motion.a
                href={item.href || "#"}
                className={cn(
                  itemVariants({ variant, size }),
                  breadcrumbsVariants({
                    shape,
                  })
                )}
                whileHover={{
                  scale: 1.05,
                  transition: { type: "spring", stiffness: 400, damping: 15 }
                }}
                whileTap={{
                  scale: 0.95,
                  transition: { duration: 0.1 }
                }}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.1 }}
              >
                <motion.span
                  className="relative z-10 flex items-center gap-2"
                  whileHover={{ x: 2 }}
                  transition={{ type: "spring", stiffness: 400, damping: 15 }}
                >
                  {index <= currentStep ? (
                    <motion.div
                      initial={{ scale: 0, rotate: -180 }}
                      animate={{ scale: 1, rotate: 0 }}
                      transition={{ type: "spring", stiffness: 300, damping: 15 }}
                    >
                      <Check className="h-4 w-4" />
                    </motion.div>
                  ) : (
                    <Circle className="h-4 w-4" />
                  )}
                  {item.label}
                </motion.span>
                
                {index <= currentStep && (
                  <motion.div
                    className="absolute inset-0 -z-10 rounded-2xl"
                    initial={{ scaleX: 0 }}
                    animate={{ scaleX: 1 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    style={{ originX: 0 }}
                  />
                )}
              </motion.a>
              {index < processedItems.length - 1 && (
                <AnimatedSeparator 
                  icon={SeparatorIcon}
                  isActive={index < currentStep}
                  size={size}
                  variant={variant}
                />
              )}
            </React.Fragment>
          ))}
        </>
      )}
    </motion.nav>
  );
};



================================================
File: src/components/UI/button/index.tsx
================================================
'use client';

import { motion } from 'framer-motion';
import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '../../../utils/cn';

export interface ButtonProps
  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onDrag'>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
  animationVariant?: string;
  children?: React.ReactNode;
}

const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'px-4 py-2 bg-primary text-white hover:bg-primary/90',
        primary: 'px-4 py-2 bg-secondary text-secondary-foreground hover:bg-secondary/90',
        secondary: 'bg-muted text-muted-foreground hover:bg-muted/90',
        success: 'bg-success text-success-foreground hover:bg-success/90',
        warning: 'bg-warning text-warning-foreground hover:bg-warning/90',
        danger: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline: 'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
        subtle: 'bg-accent text-accent-foreground hover:bg-accent/80',
        elevated: 'bg-background shadow-md hover:shadow-lg',
        glass: 'bg-black/10 backdrop-blur-lg text-white hover:bg-black/20',
        neon: 'bg-pink-500 text-white shadow-lg shadow-pink-500/50 hover:bg-pink-600',
        pill: 'rounded-full px-6 py-2 bg-pill text-white hover:bg-pill/90',
        none: '',
      },
      size: {
        xs: 'h-8 px-2 text-xs rounded-sm',
        sm: 'h-9 px-3 text-sm rounded-md',
        md: 'h-10 px-4 text-base rounded-md',
        lg: 'h-12 px-6 text-lg rounded-lg',
        xl: 'h-14 px-8 text-xl rounded-lg',
        icon: 'h-10 w-10 p-2',
        pill: 'h-10 px-6 text-base rounded-full',
        block: 'w-full py-3 text-lg',
        compact: 'h-8 px-2 text-xs',
        wide: 'px-12 py-3 text-lg',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'md',
    },
  }
);

const animations = {
  bounce: {
    animate: { y: [0, -10, 0] },
    transition: { repeat: Infinity, duration: 0.5 },
  },
  bounceSlow: {
    animate: { y: [0, -15, 0] },
    transition: { repeat: Infinity, duration: 0.8 },
  },
  bounceFast: {
    animate: { y: [0, -8, 0] },
    transition: { repeat: Infinity, duration: 0.3 },
  },
  bounceSmooth: {
    animate: { y: [0, -20, 0] },
    transition: { repeat: Infinity, duration: 1, ease: 'easeInOut' },
  },
  bounceJelly: {
    animate: { scale: [1, 1.2, 0.9, 1.1, 1] },
    transition: { repeat: Infinity, duration: 1, ease: 'easeInOut' },
  },
  rotateClockwiseSlow: {
    whileHover: { rotate: 360 },
    transition: { duration: 0.3 },
  },
  rotateClockwiseFast: {
    whileHover: { rotate: 360 },
    transition: { duration: 0.5 },
  },
  rotateAntiClockwiseSlow: {
    whileHover: { rotate: -360 },
    transition: { duration: 0.3 },
  },
  rotateAntiClockwiseFast: {
    whileHover: { rotate: -360 },
    transition: { duration: 0.5 },
  },
  rotatePingPong: {
    whileHover: { rotate: [0, 15, -15, 0] },
    transition: { repeat: Infinity, duration: 1, ease: 'easeInOut' },
  },
  scaleUp: { whileHover: { scale: 1.2 }, transition: { duration: 0.3 } },
  scaleDown: { whileHover: { scale: 0.9 }, transition: { duration: 0.3 } },
  scalePulse: {
    animate: { scale: [1, 1.1, 1] },
    transition: { repeat: Infinity, duration: 0.6 },
  },
  scaleExpandContract: {
    animate: { scale: [1, 1.3, 1] },
    transition: { repeat: Infinity, duration: 1.2, ease: 'easeInOut' },
  },
  scaleHeartbeat: {
    animate: { scale: [1, 1.15, 1] },
    transition: { repeat: Infinity, duration: 0.8, ease: 'easeInOut' },
  },
  flipX: { whileHover: { rotateY: 360 }, transition: { duration: 0.5 } },
  flipY: { whileHover: { rotateX: 360 }, transition: { duration: 0.5 } },
  flipCard: {
    animate: { rotateY: [0, 180, 360] },
    transition: { repeat: Infinity, duration: 2, ease: 'easeInOut' },
  },

  fadeBlink: {
    animate: { opacity: [1, 0, 1] },
    transition: { repeat: Infinity, duration: 0.5 },
  },
  fadeInOut: {
    animate: { opacity: [0, 1, 0] },
    transition: { repeat: Infinity, duration: 2 },
  },
  fadeInOutTop: {
    animate: { y: [-20, 0, -20], opacity: [0, 1, 0] },
    transition: { repeat: Infinity, duration: 2 },
  },
  fadeInOutBottom: {
    animate: { y: [20, 0, 20], opacity: [0, 1, 0] },
    transition: { repeat: Infinity, duration: 2 },
  },
  fadeInOutLeft: {
    animate: { x: [-20, 0, -20], opacity: [0, 1, 0] },
    transition: { repeat: Infinity, duration: 2 },
  },
  fadeInOutRight: {
    animate: { x: [20, 0, 20], opacity: [0, 1, 0] },
    transition: { repeat: Infinity, duration: 2 },
  },
  fadeInOutTopLeft: {
    animate: { x: [-20, 0, -20], y: [-20, 0, -20], opacity: [0, 1, 0] },
    transition: { repeat: Infinity, duration: 2 },
  },
  fadeInOutTopRight: {
    animate: { x: [20, 0, 20], y: [-20, 0, -20], opacity: [0, 1, 0] },
    transition: { repeat: Infinity, duration: 2 },
  },
  fadeInOutBottomLeft: {
    animate: { x: [-20, 0, -20], y: [20, 0, 20], opacity: [0, 1, 0] },
    transition: { repeat: Infinity, duration: 2 },
  },
  fadeInOutBottomRight: {
    animate: { x: [20, 0, 20], y: [20, 0, 20], opacity: [0, 1, 0] },
    transition: { repeat: Infinity, duration: 2 },
  },
  swipeRight: { whileHover: { x: 20 }, transition: { duration: 0.3 } },
  swipeLeft: { whileHover: { x: -20 }, transition: { duration: 0.3 } },
  swipeUp: { whileHover: { y: 20 }, transition: { duration: 0.3 } },
  swipeDown: { whileHover: { y: -20 }, transition: { duration: 0.3 } },
  slideLeftRight: {
    animate: { x: [0, -20, 20, 0] },
    transition: { repeat: Infinity, duration: 2, ease: 'easeInOut' },
  },
  slideUpDown: {
    animate: { y: [0, -20, 20, 0] },
    transition: { repeat: Infinity, duration: 2, ease: 'easeInOut' },
  },
  press3D: {
    whileTap: { scale: 0.9, y: 5 },
    transition: { duration: 0.1 },
  },
  press3DSoft: {
    whileTap: { scale: 0.95, y: 3 },
    transition: { duration: 0.1 },
  },
  press3DHard: {
    whileTap: { scale: 0.85, y: 8 },
    transition: { duration: 0.1 },
  },
  press3DPop: {
    whileTap: { scale: 1.05, y: -2 },
    transition: { duration: 0.1 },
  },
  press3DDepth: {
    whileTap: {
      scale: 0.9,
      y: 5,
      boxShadow: 'inset 4px 4px 10px rgba(0,0,0,0.2)',
    },
    transition: { duration: 0.1 },
  },
  spinSlow: {
    animate: { rotate: [0, 360] },
    transition: { repeat: Infinity, duration: 5, ease: 'linear' },
  },
  spinFast: {
    animate: { rotate: [0, 360] },
    transition: { repeat: Infinity, duration: 1, ease: 'linear' },
  },
  spinPingPong: {
    animate: { rotate: [0, 90, -90, 0] },
    transition: { repeat: Infinity, duration: 2, ease: 'easeInOut' },
  },
  shake: {
    animate: { x: [0, -5, 5, -5, 5, 0] },
    transition: { repeat: Infinity, duration: 0.5 },
  },
  wobble: {
    animate: { rotate: [0, -5, 5, -5, 5, 0] },
    transition: { repeat: Infinity, duration: 0.8 },
  },
  tilt3D: {
    animate: { rotateX: 15, rotateY: 15 },
    transition: { repeat: Infinity, duration: 1, ease: 'easeInOut' },
  },
  tiltCrazy: {
    animate: {
      rotateX: [0, 15, -15, 10, -10, 0],
      rotateY: [0, -10, 10, -15, 15, 0],
    },
    transition: { repeat: Infinity, duration: 3, ease: 'easeInOut' },
  },
  pulse: {
    animate: { scale: [1, 1.1, 1] },
    transition: { repeat: Infinity, duration: 0.6 },
  },
  gradientShift: {
    animate: {
      background: [
        'linear-gradient(45deg, #ff0000, #00ff00)',
        'linear-gradient(45deg, #00ff00, #0000ff)',
        'linear-gradient(45deg, #0000ff, #ff0000)',
      ],
    },
    transition: { repeat: Infinity, duration: 3, ease: 'linear' },
  },
  borderPulse: {
    whileHover: {
      border: '2px solid #ff0000',
      boxShadow: '0 0 10px #ff0000',
    },
    transition: { repeat: Infinity, duration: 1, ease: 'easeInOut' },
  },
  borderPulseRainbow: {
    animate: {
      boxShadow: ['0 0 10px #ff0000', '0 0 10px #0000ff', '0 0 10px #00ff00', '0 0 10px #ff00ff'],
    },
    transition: { repeat: Infinity, duration: 2, ease: 'easeInOut' },
  },
  shadowGlow: {
    whileHover: {
      boxShadow: '0 0 20px rgba(37, 99, 255, 0.8)',
    },
    transition: { duration: 0.5 },
  },
  neonGlow: {
    whileHover: {
      boxShadow: '0 0 10px #00ff00, 0 0 20px #00ff00, 0 0 40px #00ff00',
    },
    transition: { duration: 0.5 },
  },
  rippleBorder: {
    whileHover: {
      scale: 1.1,
      boxShadow: '0 0 0 10px rgba(0, 255, 0, 0.2)',
    },
    transition: { duration: 0.5 },
  },
  ping: {
    animate: { scale: [1, 1.3], opacity: [1, 0] },
    transition: { duration: 0.8, repeat: Infinity },
  },
  reveal: {
    initial: { scale: 0 },
    animate: { rotate: 360, scale: 1 },
    transition: {
      type: 'spring',
      stiffness: 260,
      damping: 20,
      duration: 0.8,
      repeat: Infinity,
    },
  },
  nina: {},
};

// nina
const ninaTextVariants = {
  initial: { opacity: 0, y: -10 },
  hover: (i: number) => ({
    opacity: 1,
    y: 0,
    transition: { delay: i * 0.045, duration: 0.3, ease: [0.75, 0, 0.125, 1] },
  }),
};

const ninaBeforeVariants = {
  initial: { opacity: 1, y: 0 },
  hover: {
    opacity: 0,
    y: 20,
    transition: { duration: 0.3, ease: [0.75, 0, 0.125, 1] },
  },
};

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, animationVariant, children, ...props }, ref) => {
    const animationProps = animationVariant ? animations[animationVariant] || {} : {};

    const slotProps = asChild ? { ...props } : {};
    const motionProps = !asChild ? { ...props, ...animationProps } : {};

    const renderNinaVariant = () => {
      const content = typeof children === 'string' ? (
        <>
          <motion.span
            className="absolute inset-0 flex items-center justify-center"
            variants={ninaBeforeVariants}
          >
            {children}
          </motion.span>
          <motion.div className="relative flex gap-1" initial="initial" whileHover="hover">
            {children.split('').map((char, i) => (
              <motion.span key={i} custom={i} variants={ninaTextVariants}>
                {char}
              </motion.span>
            ))}
          </motion.div>
        </>
      ) : (
        <span>{children}</span>
      );

      return (
        <motion.button
          className={cn(buttonVariants({ variant, size }), className, 'relative overflow-hidden')}
          ref={ref}
          {...(motionProps as any)}
          initial="initial"
          whileHover="hover"
        >
          {content}
        </motion.button>
      );
    };

    if (asChild) {
      return (
        <Slot className={cn(buttonVariants({ variant, size }), className)} ref={ref} {...slotProps}>
          {children}
        </Slot>
      );
    }

    if (animationVariant === 'nina') {
      return renderNinaVariant();
    }

    return (
      <motion.button
        className={cn(buttonVariants({ variant, size }), className)}
        ref={ref}
        {...(motionProps as any)}
      >
        {children}
      </motion.button>
    );
  }
);

Button.displayName = 'Button';

export { Button, buttonVariants };



================================================
File: src/components/UI/card/index.tsx
================================================
import { cn } from "@site/src/utils/cn"
import * as React from "react"
import { HTMLMotionProps, motion } from "framer-motion"
import { cva, type VariantProps } from "class-variance-authority"

// Card Animation Variants
const cardAnimations = {
  none: {},
  fadeIn: {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: 0.6, ease: [0.4, 0, 0.2, 1] }
  },
  slideUp: {
    initial: { opacity: 0, y: 60, scale: 0.95 },
    animate: { opacity: 1, y: 0, scale: 1 },
    transition: { duration: 0.7, ease: [0.4, 0, 0.2, 1] }
  },
  scaleIn: {
    initial: { opacity: 0, scale: 0.8, rotateX: 15 },
    animate: { opacity: 1, scale: 1, rotateX: 0 },
    transition: { duration: 0.6, ease: [0.4, 0, 0.2, 1] }
  },
  flipIn: {
    initial: { opacity: 0, rotateY: -90, scale: 0.8 },
    animate: { opacity: 1, rotateY: 0, scale: 1 },
    transition: { duration: 0.8, ease: [0.4, 0, 0.2, 1] }
  },
  bounceIn: {
    initial: { opacity: 0, scale: 0.3, y: 50 },
    animate: { opacity: 1, scale: 1, y: 0 },
    transition: { 
      type: "spring", 
      stiffness: 300, 
      damping: 20,
      duration: 0.8 
    }
  },
  floatIn: {
    initial: { opacity: 0, y: 100, rotateX: 45 },
    animate: { opacity: 1, y: 0, rotateX: 0 },
    transition: { duration: 0.8, ease: [0.68, -0.55, 0.265, 1.55] }
  }
};

type AnimationVariant = keyof typeof cardAnimations;

// CVA Variants for Card
const cardVariants = cva(
  "relative overflow-hidden transition-all duration-300 transform-gpu will-change-transform group",
  {
    variants: {
      variant: {
        default: cn(
          "rounded-xl bg-background/80 backdrop-blur-sm text-foreground",
          "border border-border/60 shadow-lg shadow-black/5",
          "dark:shadow-white/5 hover:shadow-xl hover:shadow-black/10",
          "dark:hover:shadow-white/10 hover:border-border/80",
          "before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/5 before:to-transparent before:pointer-events-none"
        ),
        elevated: cn(
          "rounded-2xl bg-background text-foreground",
          "shadow-2xl shadow-black/15 dark:shadow-black/40",
          "hover:shadow-3xl hover:-translate-y-2 hover:shadow-black/20",
          "dark:hover:shadow-black/50 border border-border/40",
          "before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/10 before:via-white/5 before:to-transparent before:pointer-events-none"
        ),
        glass: cn(
          "rounded-2xl bg-white/10 dark:bg-black/10 backdrop-blur-xl",
          "text-foreground border border-white/20 dark:border-white/10",
          "shadow-xl shadow-black/10 dark:shadow-white/5",
          "hover:bg-white/20 dark:hover:bg-black/20 hover:shadow-2xl",
          "before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/20 before:via-white/10 before:to-transparent before:pointer-events-none"
        ),
        gradient: cn(
          "rounded-2xl bg-gradient-to-br from-blue-500/90 via-purple-600/90 to-pink-500/90",
          "text-white border border-white/20 backdrop-blur-sm",
          "shadow-xl shadow-blue-500/25 hover:shadow-2xl hover:shadow-purple-500/30",
          "hover:from-blue-600/90 hover:via-purple-700/90 hover:to-pink-600/90",
          "before:absolute before:inset-0 before:bg-gradient-to-t before:from-black/10 before:to-white/20 before:pointer-events-none"
        ),
        neon: cn(
          "rounded-2xl bg-black text-white border-2 border-cyan-400/50",
          "shadow-xl shadow-cyan-400/25 hover:shadow-2xl hover:shadow-cyan-400/40",
          "hover:border-cyan-400/80 animate-pulse hover:animate-none",
          "before:absolute before:inset-0 before:bg-gradient-to-br before:from-cyan-400/10 before:to-transparent before:pointer-events-none"
        ),
        outline: cn(
          "rounded-xl bg-transparent text-foreground",
          "border-2 border-border/60 hover:border-border",
          "hover:bg-muted/30 backdrop-blur-sm",
          "shadow-sm hover:shadow-lg hover:shadow-black/5 dark:hover:shadow-white/5"
        ),
        minimal: cn(
          "rounded-lg bg-transparent text-foreground",
          "hover:bg-muted/40 transition-colors duration-200"
        ),
        premium: cn(
          "rounded-3xl bg-gradient-to-br from-background/95 to-muted/30",
          "text-foreground border border-border/40 backdrop-blur-xl",
          "shadow-2xl shadow-black/10 dark:shadow-black/30",
          "hover:shadow-3xl hover:shadow-black/15 dark:hover:shadow-black/40",
          "hover:-translate-y-1 hover:scale-[1.02]",
          "before:absolute before:inset-0 before:rounded-3xl before:bg-gradient-to-br before:from-white/20 before:via-white/5 before:to-transparent before:pointer-events-none",
          "after:absolute after:inset-0 after:rounded-3xl after:bg-gradient-to-t after:from-black/5 after:to-transparent after:pointer-events-none"
        ),
        success: cn(
          "rounded-xl bg-gradient-to-br from-emerald-500/90 to-green-600/90",
          "text-white border border-emerald-400/30",
          "shadow-lg shadow-emerald-500/25 hover:shadow-xl hover:shadow-emerald-500/40",
          "hover:from-emerald-600/90 hover:to-green-700/90"
        ),
        warning: cn(
          "rounded-xl bg-gradient-to-br from-amber-400/90 to-orange-500/90",
          "text-amber-950 border border-amber-300/30",
          "shadow-lg shadow-amber-500/25 hover:shadow-xl hover:shadow-amber-500/40",
          "hover:from-amber-500/90 hover:to-orange-600/90"
        ),
        error: cn(
          "rounded-xl bg-gradient-to-br from-red-500/90 to-rose-600/90",
          "text-white border border-red-400/30",
          "shadow-lg shadow-red-500/25 hover:shadow-xl hover:shadow-red-500/40",
          "hover:from-red-600/90 hover:to-rose-700/90"
        ),
        info: cn(
          "rounded-xl bg-gradient-to-br from-blue-500/90 to-cyan-600/90",
          "text-white border border-blue-400/30",
          "shadow-lg shadow-blue-500/25 hover:shadow-xl hover:shadow-blue-500/40",
          "hover:from-blue-600/90 hover:to-cyan-700/90"
        )
      },
      size: {
        sm: "text-sm",
        md: "text-base", 
        lg: "text-lg",
        xl: "text-xl"
      },
      interactive: {
        none: "",
        hover: "hover:scale-[1.02] cursor-pointer",
        press: "hover:scale-[1.02] active:scale-[0.98] cursor-pointer",
        lift: "hover:-translate-y-2 hover:scale-[1.02] cursor-pointer",
        tilt: "hover:rotate-1 hover:scale-[1.02] cursor-pointer",
        glow: "hover:shadow-2xl hover:shadow-primary/20 cursor-pointer"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "md",
      interactive: "none"
    }
  }
);

type CardProps = React.PropsWithChildren<
  HTMLMotionProps<"div"> &
  VariantProps<typeof cardVariants> &
  {
    asChild?: boolean;
    animation?: AnimationVariant;
  }
>;

const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ className, variant, size, interactive, animation = "none", asChild = false, children, ...props }, ref) => {
    const animationProps = cardAnimations[animation];
    
    if (asChild) {
      return (
        <motion.div
          ref={ref}
          className={cn(cardVariants({ variant, size, interactive }), className)}
          {...props}
        >
          {children}
        </motion.div>
      );
    }

    return (
      <motion.div
        ref={ref}
        className={cn(cardVariants({ variant, size, interactive }), className)}
        {...animationProps}
        whileHover={
          interactive !== "none" 
            ? { 
                scale: interactive === "tilt" ? 1.02 : undefined,
                rotate: interactive === "tilt" ? 1 : undefined,
                y: interactive === "lift" ? -8 : undefined 
              }
            : undefined
        }
        whileTap={
          interactive === "press" 
            ? { scale: 0.98, transition: { duration: 0.1 } }
            : undefined
        }
        {...props}
      >
        {/* Animated shimmer effect - FIXED: Moved outside children */}
        {(variant === "premium" || variant === "glass" || variant === "gradient") && (
          <motion.div
            className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -skew-x-12 pointer-events-none"
            initial={{ x: "-100%" }}
            whileHover={{ 
              x: "100%",
              transition: { duration: 0.8, ease: "easeInOut" }
            }}
          />
        )}
        
        {/* Properly typed children */}
        <div className="relative z-10">
          {children}
        </div>
      </motion.div>
    );
  }
);
Card.displayName = "Card";

// Enhanced Card Header - FIXED: Proper typing
const cardHeaderVariants = cva(
  "flex flex-col space-y-1.5 relative",
  {
    variants: {
      variant: {
        default: "p-6",
        compact: "p-4", 
        spacious: "p-8",
        minimal: "p-3"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
);

type CardHeaderProps = React.PropsWithChildren<HTMLMotionProps<"div"> & VariantProps<typeof cardHeaderVariants>>;


const CardHeader = React.forwardRef<HTMLDivElement, CardHeaderProps>(
  ({ className, variant, children, ...props }, ref) => (
    <motion.div
      ref={ref}
      className={cn(cardHeaderVariants({ variant }), className)}
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.1, duration: 0.5 }}
      {...props}
    >
      {children}
    </motion.div>
  )
);
CardHeader.displayName = "CardHeader";

// Enhanced Card Title - FIXED: Proper typing with React.ReactNode
const cardTitleVariants = cva(
  "font-semibold leading-none tracking-tight",
  {
    variants: {
      size: {
        sm: "text-lg",
        md: "text-xl", 
        lg: "text-2xl",
        xl: "text-3xl"
      },
      gradient: {
        none: "",
        blue: "bg-gradient-to-r from-primary to-cyan-600 bg-clip-text text-transparent",
        purple: "bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent",
        green: "bg-gradient-to-r from-success to-green-600 bg-clip-text text-transparent",
        gold: "bg-gradient-to-r from-warning to-orange-600 bg-clip-text text-transparent"
      }
    },
    defaultVariants: {
      size: "lg",
      gradient: "none"
    }
  }
);

type CardTitleProps = React.PropsWithChildren<HTMLMotionProps<"h3"> & VariantProps<typeof cardTitleVariants>>;

const CardTitle = React.forwardRef<HTMLHeadingElement, CardTitleProps>(
  ({ className, size, gradient, children, ...props }, ref) => (
    <motion.h3
      ref={ref}
      className={cn(cardTitleVariants({ size, gradient }), className)}
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ delay: 0.2, duration: 0.5 }}
      {...props}
    >
      {children}
    </motion.h3>
  )
);
CardTitle.displayName = "CardTitle";

// Enhanced Card Description - FIXED: Proper typing
type CardDescriptionProps = React.PropsWithChildren<HTMLMotionProps<"p"> & VariantProps<typeof cardHeaderVariants>>;

const CardDescription = React.forwardRef<HTMLParagraphElement, CardDescriptionProps>(
  ({ className, children, ...props }, ref) => (
    <motion.p
      ref={ref}
      className={cn("text-sm text-muted-foreground leading-relaxed", className)}
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ delay: 0.3, duration: 0.5 }}
      {...props}
    >
      {children}
    </motion.p>
  )
);
CardDescription.displayName = "CardDescription";

// Enhanced Card Content - FIXED: Proper typing
const cardContentVariants = cva(
  "relative",
  {
    variants: {
      variant: {
        default: "p-6 pt-0",
        compact: "p-4 pt-0",
        spacious: "p-8 pt-0", 
        minimal: "p-3 pt-0",
        flush: "p-0"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
);

type CardContentProps = React.PropsWithChildren<
  HTMLMotionProps<"div"> & VariantProps<typeof cardContentVariants>
>;

const CardContent = React.forwardRef<HTMLDivElement, CardContentProps>(
  ({ className, variant, children, ...props }, ref) => (
    <motion.div
      ref={ref}
      className={cn(cardContentVariants({ variant }), className)}
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.3, duration: 0.5 }}
      {...props}
    >
      {children}
    </motion.div>
  )
);
CardContent.displayName = "CardContent";

// Enhanced Card Footer - FIXED: Proper typing
const cardFooterVariants = cva(
  "flex items-center relative",
  {
    variants: {
      variant: {
        default: "p-6 pt-0",
        compact: "p-4 pt-0",
        spacious: "p-8 pt-0",
        minimal: "p-3 pt-0"
      },
      justify: {
        start: "justify-start",
        center: "justify-center", 
        end: "justify-end",
        between: "justify-between",
        around: "justify-around"
      }
    },
    defaultVariants: {
      variant: "default",
      justify: "start"
    }
  }
);

type CardFooterProps = React.PropsWithChildren<
  HTMLMotionProps<"div"> & VariantProps<typeof cardFooterVariants>
>;

const CardFooter = React.forwardRef<HTMLDivElement, CardFooterProps>(
  ({ className, variant, justify, children, ...props }, ref) => (
    <motion.div
      ref={ref}
      className={cn(cardFooterVariants({ variant, justify }), className)}
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.4, duration: 0.5 }}
      {...props}
    >
      {children}
    </motion.div>
  )
);
CardFooter.displayName = "CardFooter";

// Special Card Components - FIXED: Proper typing
interface FeatureCardProps extends CardProps {
  icon?: React.ReactNode;
  }

const FeatureCard = React.forwardRef<HTMLDivElement, FeatureCardProps>(
  ({ icon, children, className, ...props }, ref) => (
    <Card
      ref={ref}
      variant="premium"
      interactive="lift"
      animation="slideUp"
      className={cn("text-center", className)}
      {...props}
    >
      {icon && (
        <CardHeader variant="spacious">
          <>
            <motion.div
              className="mx-auto w-16 h-16 rounded-2xl bg-gradient-to-br from-primary/20 to-primary/10 flex items-center justify-center mb-4"
              whileHover={{ scale: 1.1, rotate: 5 }}
              transition={{ type: "spring", stiffness: 400, damping: 15 }}
            >
              {icon}
            </motion.div>
            {children}
          </>
        </CardHeader>
      )}
    </Card>
  )
);
FeatureCard.displayName = "FeatureCard";

// Stat Card - FIXED: Proper typing
interface StatCardProps extends CardProps {
  value: string | number; 
  label: string; 
  trend?: "up" | "down" | "neutral";
  trendValue?: string;
}

const StatCard = React.forwardRef<HTMLDivElement, StatCardProps>(
  ({ value, label, trend, trendValue, className, ...props }, ref) => (
    <Card
      ref={ref}
      variant="elevated"
      interactive="hover"
      animation="scaleIn"
      className={cn("text-center", className)}
      {...props}
    >
      <CardContent variant="spacious">
        <motion.div
          className="text-3xl font-bold text-primary mb-2"
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ delay: 0.2, type: "spring", stiffness: 300 }}
        >
          {value}
        </motion.div>
        <div className="text-sm text-muted-foreground mb-2">{label}</div>
        {trend && trendValue && (
          <div className={cn(
            "text-xs font-medium",
            trend === "up" && "text-success",
            trend === "down" && "text-destructive", 
            trend === "neutral" && "text-muted-foreground"
          )}>
            {trend === "up" && "â†— "}
            {trend === "down" && "â†˜ "}
            {trendValue}
          </div>
        )}
      </CardContent>
    </Card>
  )
);
StatCard.displayName = "StatCard";

export { 
  Card, 
  CardHeader, 
  CardFooter, 
  CardTitle, 
  CardDescription, 
  CardContent,
  FeatureCard,
  StatCard,
  cardVariants,
  type AnimationVariant,
  type CardProps
};



================================================
File: src/components/UI/darkveil/index.tsx
================================================
import { useRef, useEffect } from "react";
import { Renderer, Program, Mesh, Triangle, Vec2 } from "ogl";

const vertex = `
attribute vec2 position;
void main(){gl_Position=vec4(position,0.0,1.0);}
`;

const fragment = `
#ifdef GL_ES
precision lowp float;
#endif
uniform vec2 uResolution;
uniform float uTime;
uniform float uHueShift;
uniform float uNoise;
uniform float uScan;
uniform float uScanFreq;
uniform float uWarp;
#define iTime uTime
#define iResolution uResolution

vec4 buf[8];
float rand(vec2 c){return fract(sin(dot(c,vec2(12.9898,78.233)))*43758.5453);}

mat3 rgb2yiq=mat3(0.299,0.587,0.114,0.596,-0.274,-0.322,0.211,-0.523,0.312);
mat3 yiq2rgb=mat3(1.0,0.956,0.621,1.0,-0.272,-0.647,1.0,-1.106,1.703);

vec3 hueShiftRGB(vec3 col,float deg){
    vec3 yiq=rgb2yiq*col;
    float rad=radians(deg);
    float cosh=cos(rad),sinh=sin(rad);
    vec3 yiqShift=vec3(yiq.x,yiq.y*cosh-yiq.z*sinh,yiq.y*sinh+yiq.z*cosh);
    return clamp(yiq2rgb*yiqShift,0.0,1.0);
}

vec4 sigmoid(vec4 x){return 1./(1.+exp(-x));}

vec4 cppn_fn(vec2 coordinate,float in0,float in1,float in2){
    buf[6]=vec4(coordinate.x,coordinate.y,0.3948333106474662+in0,0.36+in1);
    buf[7]=vec4(0.14+in2,sqrt(coordinate.x*coordinate.x+coordinate.y*coordinate.y),0.,0.);
    buf[0]=mat4(vec4(6.5404263,-3.6126034,0.7590882,-1.13613),vec4(2.4582713,3.1660357,1.2219609,0.06276096),vec4(-5.478085,-6.159632,1.8701609,-4.7742867),vec4(6.039214,-5.542865,-0.90925294,3.251348))*buf[6]+mat4(vec4(0.8473259,-5.722911,3.975766,1.6522468),vec4(-0.24321538,0.5839259,-1.7661959,-5.350116),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.))*buf[7]+vec4(0.21808943,1.1243913,-1.7969975,5.0294676);
    buf[1]=mat4(vec4(-3.3522482,-6.0612736,0.55641043,-4.4719114),vec4(0.8631464,1.7432913,5.643898,1.6106541),vec4(2.4941394,-3.5012043,1.7184316,6.357333),vec4(3.310376,8.209261,1.1355612,-1.165539))*buf[6]+mat4(vec4(5.24046,-13.034365,0.009859298,15.870829),vec4(2.987511,3.129433,-0.89023495,-1.6822904),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.))*buf[7]+vec4(-5.9457836,-6.573602,-0.8812491,1.5436668);
    buf[0]=sigmoid(buf[0]);buf[1]=sigmoid(buf[1]);
    buf[2]=mat4(vec4(-15.219568,8.095543,-2.429353,-1.9381982),vec4(-5.951362,4.3115187,2.6393783,1.274315),vec4(-7.3145227,6.7297835,5.2473326,5.9411426),vec4(5.0796127,8.979051,-1.7278991,-1.158976))*buf[6]+mat4(vec4(-11.967154,-11.608155,6.1486754,11.237008),vec4(2.124141,-6.263192,-1.7050359,-0.7021966),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.))*buf[7]+vec4(-4.17164,-3.2281182,-4.576417,-3.6401186);
    buf[3]=mat4(vec4(3.1832156,-13.738922,1.879223,3.233465),vec4(0.64300746,12.768129,1.9141049,0.50990224),vec4(-0.049295485,4.4807224,1.4733979,1.801449),vec4(5.0039253,13.000481,3.3991797,-4.5561905))*buf[6]+mat4(vec4(-0.1285731,7.720628,-3.1425676,4.742367),vec4(0.6393625,3.714393,-0.8108378,-0.39174938),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.))*buf[7]+vec4(-1.1811101,-21.621881,0.7851888,1.2329718);
    buf[2]=sigmoid(buf[2]);buf[3]=sigmoid(buf[3]);
    buf[4]=mat4(vec4(5.214916,-7.183024,2.7228765,2.6592617),vec4(-5.601878,-25.3591,4.067988,0.4602802),vec4(-10.57759,24.286327,21.102104,37.546658),vec4(4.3024497,-1.9625226,2.3458803,-1.372816))*buf[0]+mat4(vec4(-17.6526,-10.507558,2.2587414,12.462782),vec4(6.265566,-502.75443,-12.642513,0.9112289),vec4(-10.983244,20.741234,-9.701768,-0.7635988),vec4(5.383626,1.4819539,-4.1911616,-4.8444734))*buf[1]+mat4(vec4(12.785233,-16.345072,-0.39901125,1.7955981),vec4(-30.48365,-1.8345358,1.4542528,-1.1118771),vec4(19.872723,-7.337935,-42.941723,-98.52709),vec4(8.337645,-2.7312303,-2.2927687,-36.142323))*buf[2]+mat4(vec4(-16.298317,3.5471997,-0.44300047,-9.444417),vec4(57.5077,-35.609753,16.163465,-4.1534753),vec4(-0.07470326,-3.8656476,-7.0901804,3.1523974),vec4(-12.559385,-7.077619,1.490437,-0.8211543))*buf[3]+vec4(-7.67914,15.927437,1.3207729,-1.6686112);
    buf[5]=mat4(vec4(-1.4109162,-0.372762,-3.770383,-21.367174),vec4(-6.2103205,-9.35908,0.92529047,8.82561),vec4(11.460242,-22.348068,13.625772,-18.693201),vec4(-0.3429052,-3.9905605,-2.4626114,-0.45033523))*buf[0]+mat4(vec4(7.3481627,-4.3661838,-6.3037653,-3.868115),vec4(1.5462853,6.5488915,1.9701879,-0.58291394),vec4(6.5858274,-2.2180402,3.7127688,-1.3730392),vec4(-5.7973905,10.134961,-2.3395722,-5.965605))*buf[1]+mat4(vec4(-2.5132585,-6.6685553,-1.4029363,-0.16285264),vec4(-0.37908727,0.53738135,4.389061,-1.3024765),vec4(-0.70647055,2.0111287,-5.1659346,-3.728635),vec4(-13.562562,10.487719,-0.9173751,-2.6487076))*buf[2]+mat4(vec4(-8.645013,6.5546675,-6.3944063,-5.5933375),vec4(-0.57783127,-1.077275,36.91025,5.736769),vec4(14.283112,3.7146652,7.1452246,-4.5958776),vec4(2.7192075,3.6021907,-4.366337,-2.3653464))*buf[3]+vec4(-5.9000807,-4.329569,1.2427121,8.59503);
    buf[4]=sigmoid(buf[4]);buf[5]=sigmoid(buf[5]);
    buf[6]=mat4(vec4(-1.61102,0.7970257,1.4675229,0.20917463),vec4(-28.793737,-7.1390953,1.5025433,4.656581),vec4(-10.94861,39.66238,0.74318546,-10.095605),vec4(-0.7229728,-1.5483948,0.7301322,2.1687684))*buf[0]+mat4(vec4(3.2547753,21.489103,-1.0194173,-3.3100595),vec4(-3.7316632,-3.3792162,-7.223193,-0.23685838),vec4(13.1804495,0.7916005,5.338587,5.687114),vec4(-4.167605,-17.798311,-6.815736,-1.6451967))*buf[1]+mat4(vec4(0.604885,-7.800309,-7.213122,-2.741014),vec4(-3.522382,-0.12359311,-0.5258442,0.43852118),vec4(9.6752825,-22.853785,2.062431,0.099892326),vec4(-4.3196306,-17.730087,2.5184598,5.30267))*buf[2]+mat4(vec4(-6.545563,-15.790176,-6.0438633,-5.415399),vec4(-43.591583,28.551912,-16.00161,18.84728),vec4(4.212382,8.394307,3.0958717,8.657522),vec4(-5.0237565,-4.450633,-4.4768,-5.5010443))*buf[3]+mat4(vec4(1.6985557,-67.05806,6.897715,1.9004834),vec4(1.8680354,2.3915145,2.5231109,4.081538),vec4(11.158006,1.7294737,2.0738268,7.386411),vec4(-4.256034,-306.24686,8.258898,-17.132736))*buf[4]+mat4(vec4(1.6889864,-4.5852966,3.8534803,-6.3482175),vec4(1.3543309,-1.2640043,9.932754,2.9079645),vec4(-5.2770967,0.07150358,-0.13962056,3.3269649),vec4(28.34703,-4.918278,6.1044083,4.085355))*buf[5]+vec4(6.6818056,12.522166,-3.7075126,-4.104386);
    buf[7]=mat4(vec4(-8.265602,-4.7027016,5.098234,0.7509808),vec4(8.6507845,-17.15949,16.51939,-8.884479),vec4(-4.036479,-2.3946867,-2.6055532,-1.9866527),vec4(-2.2167742,-1.8135649,-5.9759874,4.8846445))*buf[0]+mat4(vec4(6.7790847,3.5076547,-2.8191125,-2.7028968),vec4(-5.743024,-0.27844876,1.4958696,-5.0517144),vec4(13.122226,15.735168,-2.9397483,-4.101023),vec4(-14.375265,-5.030483,-6.2599335,2.9848232))*buf[1]+mat4(vec4(4.0950394,-0.94011575,-5.674733,4.755022),vec4(4.3809423,4.8310084,1.7425908,-3.437416),vec4(2.117492,0.16342592,-104.56341,16.949184),vec4(-5.22543,-2.994248,3.8350096,-1.9364246))*buf[2]+mat4(vec4(-5.900337,1.7946124,-13.604192,-3.8060522),vec4(6.6583457,31.911177,25.164474,91.81147),vec4(11.840538,4.1503043,-0.7314397,6.768467),vec4(-6.3967767,4.034772,6.1714606,-0.32874924))*buf[3]+mat4(vec4(3.4992442,-196.91893,-8.923708,2.8142626),vec4(3.4806502,-3.1846354,5.1725626,5.1804223),vec4(-2.4009497,15.585794,1.2863957,2.0252278),vec4(-71.25271,-62.441242,-8.138444,0.50670296))*buf[4]+mat4(vec4(-12.291733,-11.176166,-7.3474145,4.390294),vec4(10.805477,5.6337385,-0.9385842,-4.7348723),vec4(-12.869276,-7.039391,5.3029537,7.5436664),vec4(1.4593618,8.91898,3.5101583,5.840625))*buf[5]+vec4(2.2415268,-6.705987,-0.98861027,-2.117676);
    buf[6]=sigmoid(buf[6]);buf[7]=sigmoid(buf[7]);
    buf[0]=mat4(vec4(1.6794263,1.3817469,2.9625452,0.),vec4(-1.8834411,-1.4806935,-3.5924516,0.),vec4(-1.3279216,-1.0918057,-2.3124623,0.),vec4(0.2662234,0.23235129,0.44178495,0.))*buf[0]+mat4(vec4(-0.6299101,-0.5945583,-0.9125601,0.),vec4(0.17828953,0.18300213,0.18182953,0.),vec4(-2.96544,-2.5819945,-4.9001055,0.),vec4(1.4195864,1.1868085,2.5176322,0.))*buf[1]+mat4(vec4(-1.2584374,-1.0552157,-2.1688404,0.),vec4(-0.7200217,-0.52666044,-1.438251,0.),vec4(0.15345335,0.15196142,0.272854,0.),vec4(0.945728,0.8861938,1.2766753,0.))*buf[2]+mat4(vec4(-2.4218085,-1.968602,-4.35166,0.),vec4(-22.683098,-18.0544,-41.954372,0.),vec4(0.63792,0.5470648,1.1078634,0.),vec4(-1.5489894,-1.3075932,-2.6444845,0.))*buf[3]+mat4(vec4(-0.49252132,-0.39877754,-0.91366625,0.),vec4(0.95609266,0.7923952,1.640221,0.),vec4(0.30616966,0.15693925,0.8639857,0.),vec4(1.1825981,0.94504964,2.176963,0.))*buf[4]+mat4(vec4(0.35446745,0.3293795,0.59547555,0.),vec4(-0.58784515,-0.48177817,-1.0614829,0.),vec4(2.5271258,1.9991658,4.6846647,0.),vec4(0.13042648,0.08864098,0.30187556,0.))*buf[5]+mat4(vec4(-1.7718065,-1.4033192,-3.3355875,0.),vec4(3.1664357,2.638297,5.378702,0.),vec4(-3.1724713,-2.6107926,-5.549295,0.),vec4(-2.851368,-2.249092,-5.3013067,0.))*buf[6]+mat4(vec4(1.5203838,1.2212278,2.8404984,0.),vec4(1.5210563,1.2651345,2.683903,0.),vec4(2.9789467,2.4364579,5.2347264,0.),vec4(2.2270417,1.8825914,3.8028636,0.))*buf[7]+vec4(-1.5468478,-3.6171484,0.24762098,0.);
    buf[0]=sigmoid(buf[0]);
    return vec4(buf[0].x,buf[0].y,buf[0].z,1.);
}

void mainImage(out vec4 fragColor,in vec2 fragCoord){
    vec2 uv=fragCoord/uResolution.xy*2.-1.;
    uv.y*=-1.;
    uv+=uWarp*vec2(sin(uv.y*6.283+uTime*0.5),cos(uv.x*6.283+uTime*0.5))*0.05;
    fragColor=cppn_fn(uv,0.1*sin(0.3*uTime),0.1*sin(0.69*uTime),0.1*sin(0.44*uTime));
}

void main(){
    vec4 col;mainImage(col,gl_FragCoord.xy);
    col.rgb=hueShiftRGB(col.rgb,uHueShift);
    float scanline_val=sin(gl_FragCoord.y*uScanFreq)*0.5+0.5;
    col.rgb*=1.-(scanline_val*scanline_val)*uScan;
    col.rgb+=(rand(gl_FragCoord.xy+uTime)-0.5)*uNoise;
    gl_FragColor=vec4(clamp(col.rgb,0.0,1.0),1.0);
}
`;

type Props = {
  hueShift?: number;
  noiseIntensity?: number;
  scanlineIntensity?: number;
  speed?: number;
  scanlineFrequency?: number;
  warpAmount?: number;
  resolutionScale?: number;
};

export default function DarkVeil({
  hueShift = 0,
  noiseIntensity = 0,
  scanlineIntensity = 0,
  speed = 0.5,
  scanlineFrequency = 0,
  warpAmount = 0,
  resolutionScale = 1,
}: Props) {
  const ref = useRef<HTMLCanvasElement>(null);
  useEffect(() => {
    const canvas = ref.current as HTMLCanvasElement;
    const parent = canvas.parentElement as HTMLElement;

    const renderer = new Renderer({
      dpr: Math.min(window.devicePixelRatio, 2),
      canvas,
    });

    const gl = renderer.gl;
    const geometry = new Triangle(gl);

    const program = new Program(gl, {
      vertex,
      fragment,
      uniforms: {
        uTime: { value: 0 },
        uResolution: { value: new Vec2() },
        uHueShift: { value: hueShift },
        uNoise: { value: noiseIntensity },
        uScan: { value: scanlineIntensity },
        uScanFreq: { value: scanlineFrequency },
        uWarp: { value: warpAmount },
      },
    });

    const mesh = new Mesh(gl, { geometry, program });

    const resize = () => {
      const w = parent.clientWidth,
        h = parent.clientHeight;
      renderer.setSize(w * resolutionScale, h * resolutionScale);
      program.uniforms.uResolution.value.set(w, h);
    };

    window.addEventListener("resize", resize);
    resize();

    const start = performance.now();
    let frame = 0;

    const loop = () => {
      program.uniforms.uTime.value =
        ((performance.now() - start) / 1000) * speed;
      program.uniforms.uHueShift.value = hueShift;
      program.uniforms.uNoise.value = noiseIntensity;
      program.uniforms.uScan.value = scanlineIntensity;
      program.uniforms.uScanFreq.value = scanlineFrequency;
      program.uniforms.uWarp.value = warpAmount;
      renderer.render({ scene: mesh });
      frame = requestAnimationFrame(loop);
    };

    loop();

    return () => {
      cancelAnimationFrame(frame);
      window.removeEventListener("resize", resize);
    };
  }, [
    hueShift,
    noiseIntensity,
    scanlineIntensity,
    speed,
    scanlineFrequency,
    warpAmount,
    resolutionScale,
  ]);
  return (
    <canvas
      ref={ref}
      className="w-full h-full block"
    />
  );
}



================================================
File: src/components/UI/darkveil/lightveil.tsx
================================================
import { useRef, useEffect } from "react";
import { Renderer, Program, Mesh, Triangle, Vec2 } from "ogl";

const vertex = `
attribute vec2 position;
void main(){gl_Position=vec4(position,0.0,1.0);}
`;

const fragment = `
#ifdef GL_ES
precision lowp float;
#endif
uniform vec2 uResolution;
uniform float uTime;
uniform float uHueShift;
uniform float uNoise;
uniform float uScan;
uniform float uScanFreq;
uniform float uWarp;
#define iTime uTime
#define iResolution uResolution

vec4 buf[8];
float rand(vec2 c){return fract(sin(dot(c,vec2(12.9898,78.233)))*43758.5453);}

mat3 rgb2yiq=mat3(0.299,0.587,0.114,0.596,-0.274,-0.322,0.211,-0.523,0.312);
mat3 yiq2rgb=mat3(1.0,0.956,0.621,1.0,-0.272,-0.647,1.0,-1.106,1.703);

vec3 hueShiftRGB(vec3 col,float deg){
    vec3 yiq=rgb2yiq*col;
    float rad=radians(deg);
    float cosh=cos(rad),sinh=sin(rad);
    vec3 yiqShift=vec3(yiq.x,yiq.y*cosh-yiq.z*sinh,yiq.y*sinh+yiq.z*cosh);
    return clamp(yiq2rgb*yiqShift,0.0,1.0);
}

vec4 sigmoid(vec4 x){return 1./(1.+exp(-x));}

vec4 cppn_fn(vec2 coordinate,float in0,float in1,float in2){
    buf[6]=vec4(coordinate.x,coordinate.y,0.3948333106474662+in0,0.36+in1);
    buf[7]=vec4(0.14+in2,sqrt(coordinate.x*coordinate.x+coordinate.y*coordinate.y),0.,0.);
    buf[0]=mat4(vec4(6.5404263,-3.6126034,0.7590882,-1.13613),vec4(2.4582713,3.1660357,1.2219609,0.06276096),vec4(-5.478085,-6.159632,1.8701609,-4.7742867),vec4(6.039214,-5.542865,-0.90925294,3.251348))*buf[6]+mat4(vec4(0.8473259,-5.722911,3.975766,1.6522468),vec4(-0.24321538,0.5839259,-1.7661959,-5.350116),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.))*buf[7]+vec4(0.21808943,1.1243913,-1.7969975,5.0294676);
    buf[1]=mat4(vec4(-3.3522482,-6.0612736,0.55641043,-4.4719114),vec4(0.8631464,1.7432913,5.643898,1.6106541),vec4(2.4941394,-3.5012043,1.7184316,6.357333),vec4(3.310376,8.209261,1.1355612,-1.165539))*buf[6]+mat4(vec4(5.24046,-13.034365,0.009859298,15.870829),vec4(2.987511,3.129433,-0.89023495,-1.6822904),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.))*buf[7]+vec4(-5.9457836,-6.573602,-0.8812491,1.5436668);
    buf[0]=sigmoid(buf[0]);buf[1]=sigmoid(buf[1]);
    buf[2]=mat4(vec4(-15.219568,8.095543,-2.429353,-1.9381982),vec4(-5.951362,4.3115187,2.6393783,1.274315),vec4(-7.3145227,6.7297835,5.2473326,5.9411426),vec4(5.0796127,8.979051,-1.7278991,-1.158976))*buf[6]+mat4(vec4(-11.967154,-11.608155,6.1486754,11.237008),vec4(2.124141,-6.263192,-1.7050359,-0.7021966),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.))*buf[7]+vec4(-4.17164,-3.2281182,-4.576417,-3.6401186);
    buf[3]=mat4(vec4(3.1832156,-13.738922,1.879223,3.233465),vec4(0.64300746,12.768129,1.9141049,0.50990224),vec4(-0.049295485,4.4807224,1.4733979,1.801449),vec4(5.0039253,13.000481,3.3991797,-4.5561905))*buf[6]+mat4(vec4(-0.1285731,7.720628,-3.1425676,4.742367),vec4(0.6393625,3.714393,-0.8108378,-0.39174938),vec4(0.,0.,0.,0.),vec4(0.,0.,0.,0.))*buf[7]+vec4(-1.1811101,-21.621881,0.7851888,1.2329718);
    buf[2]=sigmoid(buf[2]);buf[3]=sigmoid(buf[3]);
    buf[4]=mat4(vec4(5.214916,-7.183024,2.7228765,2.6592617),vec4(-5.601878,-25.3591,4.067988,0.4602802),vec4(-10.57759,24.286327,21.102104,37.546658),vec4(4.3024497,-1.9625226,2.3458803,-1.372816))*buf[0]+mat4(vec4(-17.6526,-10.507558,2.2587414,12.462782),vec4(6.265566,-502.75443,-12.642513,0.9112289),vec4(-10.983244,20.741234,-9.701768,-0.7635988),vec4(5.383626,1.4819539,-4.1911616,-4.8444734))*buf[1]+mat4(vec4(12.785233,-16.345072,-0.39901125,1.7955981),vec4(-30.48365,-1.8345358,1.4542528,-1.1118771),vec4(19.872723,-7.337935,-42.941723,-98.52709),vec4(8.337645,-2.7312303,-2.2927687,-36.142323))*buf[2]+mat4(vec4(-16.298317,3.5471997,-0.44300047,-9.444417),vec4(57.5077,-35.609753,16.163465,-4.1534753),vec4(-0.07470326,-3.8656476,-7.0901804,3.1523974),vec4(-12.559385,-7.077619,1.490437,-0.8211543))*buf[3]+vec4(-7.67914,15.927437,1.3207729,-1.6686112);
    buf[5]=mat4(vec4(-1.4109162,-0.372762,-3.770383,-21.367174),vec4(-6.2103205,-9.35908,0.92529047,8.82561),vec4(11.460242,-22.348068,13.625772,-18.693201),vec4(-0.3429052,-3.9905605,-2.4626114,-0.45033523))*buf[0]+mat4(vec4(7.3481627,-4.3661838,-6.3037653,-3.868115),vec4(1.5462853,6.5488915,1.9701879,-0.58291394),vec4(6.5858274,-2.2180402,3.7127688,-1.3730392),vec4(-5.7973905,10.134961,-2.3395722,-5.965605))*buf[1]+mat4(vec4(-2.5132585,-6.6685553,-1.4029363,-0.16285264),vec4(-0.37908727,0.53738135,4.389061,-1.3024765),vec4(-0.70647055,2.0111287,-5.1659346,-3.728635),vec4(-13.562562,10.487719,-0.9173751,-2.6487076))*buf[2]+mat4(vec4(-8.645013,6.5546675,-6.3944063,-5.5933375),vec4(-0.57783127,-1.077275,36.91025,5.736769),vec4(14.283112,3.7146652,7.1452246,-4.5958776),vec4(2.7192075,3.6021907,-4.366337,-2.3653464))*buf[3]+vec4(-5.9000807,-4.329569,1.2427121,8.59503);
    buf[4]=sigmoid(buf[4]);buf[5]=sigmoid(buf[5]);
    buf[6]=mat4(vec4(-1.61102,0.7970257,1.4675229,0.20917463),vec4(-28.793737,-7.1390953,1.5025433,4.656581),vec4(-10.94861,39.66238,0.74318546,-10.095605),vec4(-0.7229728,-1.5483948,0.7301322,2.1687684))*buf[0]+mat4(vec4(3.2547753,21.489103,-1.0194173,-3.3100595),vec4(-3.7316632,-3.3792162,-7.223193,-0.23685838),vec4(13.1804495,0.7916005,5.338587,5.687114),vec4(-4.167605,-17.798311,-6.815736,-1.6451967))*buf[1]+mat4(vec4(0.604885,-7.800309,-7.213122,-2.741014),vec4(-3.522382,-0.12359311,-0.5258442,0.43852118),vec4(9.6752825,-22.853785,2.062431,0.099892326),vec4(-4.3196306,-17.730087,2.5184598,5.30267))*buf[2]+mat4(vec4(-6.545563,-15.790176,-6.0438633,-5.415399),vec4(-43.591583,28.551912,-16.00161,18.84728),vec4(4.212382,8.394307,3.0958717,8.657522),vec4(-5.0237565,-4.450633,-4.4768,-5.5010443))*buf[3]+mat4(vec4(1.6985557,-67.05806,6.897715,1.9004834),vec4(1.8680354,2.3915145,2.5231109,4.081538),vec4(11.158006,1.7294737,2.0738268,7.386411),vec4(-4.256034,-306.24686,8.258898,-17.132736))*buf[4]+mat4(vec4(1.6889864,-4.5852966,3.8534803,-6.3482175),vec4(1.3543309,-1.2640043,9.932754,2.9079645),vec4(-5.2770967,0.07150358,-0.13962056,3.3269649),vec4(28.34703,-4.918278,6.1044083,4.085355))*buf[5]+vec4(6.6818056,12.522166,-3.7075126,-4.104386);
    buf[7]=mat4(vec4(-8.265602,-4.7027016,5.098234,0.7509808),vec4(8.6507845,-17.15949,16.51939,-8.884479),vec4(-4.036479,-2.3946867,-2.6055532,-1.9866527),vec4(-2.2167742,-1.8135649,-5.9759874,4.8846445))*buf[0]+mat4(vec4(6.7790847,3.5076547,-2.8191125,-2.7028968),vec4(-5.743024,-0.27844876,1.4958696,-5.0517144),vec4(13.122226,15.735168,-2.9397483,-4.101023),vec4(-14.375265,-5.030483,-6.2599335,2.9848232))*buf[1]+mat4(vec4(4.0950394,-0.94011575,-5.674733,4.755022),vec4(4.3809423,4.8310084,1.7425908,-3.437416),vec4(2.117492,0.16342592,-104.56341,16.949184),vec4(-5.22543,-2.994248,3.8350096,-1.9364246))*buf[2]+mat4(vec4(-5.900337,1.7946124,-13.604192,-3.8060522),vec4(6.6583457,31.911177,25.164474,91.81147),vec4(11.840538,4.1503043,-0.7314397,6.768467),vec4(-6.3967767,4.034772,6.1714606,-0.32874924))*buf[3]+mat4(vec4(3.4992442,-196.91893,-8.923708,2.8142626),vec4(3.4806502,-3.1846354,5.1725626,5.1804223),vec4(-2.4009497,15.585794,1.2863957,2.0252278),vec4(-71.25271,-62.441242,-8.138444,0.50670296))*buf[4]+mat4(vec4(-12.291733,-11.176166,-7.3474145,4.390294),vec4(10.805477,5.6337385,-0.9385842,-4.7348723),vec4(-12.869276,-7.039391,5.3029537,7.5436664),vec4(1.4593618,8.91898,3.5101583,5.840625))*buf[5]+vec4(2.2415268,-6.705987,-0.98861027,-2.117676);
    buf[6]=sigmoid(buf[6]);buf[7]=sigmoid(buf[7]);
    buf[0]=mat4(vec4(1.6794263,1.3817469,2.9625452,0.),vec4(-1.8834411,-1.4806935,-3.5924516,0.),vec4(-1.3279216,-1.0918057,-2.3124623,0.),vec4(0.2662234,0.23235129,0.44178495,0.))*buf[0]+mat4(vec4(-0.6299101,-0.5945583,-0.9125601,0.),vec4(0.17828953,0.18300213,0.18182953,0.),vec4(-2.96544,-2.5819945,-4.9001055,0.),vec4(1.4195864,1.1868085,2.5176322,0.))*buf[1]+mat4(vec4(-1.2584374,-1.0552157,-2.1688404,0.),vec4(-0.7200217,-0.52666044,-1.438251,0.),vec4(0.15345335,0.15196142,0.272854,0.),vec4(0.945728,0.8861938,1.2766753,0.))*buf[2]+mat4(vec4(-2.4218085,-1.968602,-4.35166,0.),vec4(-22.683098,-18.0544,-41.954372,0.),vec4(0.63792,0.5470648,1.1078634,0.),vec4(-1.5489894,-1.3075932,-2.6444845,0.))*buf[3]+mat4(vec4(-0.49252132,-0.39877754,-0.91366625,0.),vec4(0.95609266,0.7923952,1.640221,0.),vec4(0.30616966,0.15693925,0.8639857,0.),vec4(1.1825981,0.94504964,2.176963,0.))*buf[4]+mat4(vec4(0.35446745,0.3293795,0.59547555,0.),vec4(-0.58784515,-0.48177817,-1.0614829,0.),vec4(2.5271258,1.9991658,4.6846647,0.),vec4(0.13042648,0.08864098,0.30187556,0.))*buf[5]+mat4(vec4(-1.7718065,-1.4033192,-3.3355875,0.),vec4(3.1664357,2.638297,5.378702,0.),vec4(-3.1724713,-2.6107926,-5.549295,0.),vec4(-2.851368,-2.249092,-5.3013067,0.))*buf[6]+mat4(vec4(1.5203838,1.2212278,2.8404984,0.),vec4(1.5210563,1.2651345,2.683903,0.),vec4(2.9789467,2.4364579,5.2347264,0.),vec4(2.2270417,1.8825914,3.8028636,0.))*buf[7]+vec4(-1.5468478,-3.6171484,0.24762098,0.);
    buf[0]=sigmoid(buf[0]);
    return vec4(buf[0].x,buf[0].y,buf[0].z,1.);
}

void mainImage(out vec4 fragColor,in vec2 fragCoord){
    vec2 uv=fragCoord/uResolution.xy*2.-1.;
    uv.y*=-1.;
    uv+=uWarp*vec2(sin(uv.y*6.283+uTime*0.5),cos(uv.x*6.283+uTime*0.5))*0.05;
    fragColor=cppn_fn(uv,0.1*sin(0.3*uTime),0.1*sin(0.69*uTime),0.1*sin(0.44*uTime));
}

void main(){
    vec4 col;mainImage(col,gl_FragCoord.xy);
    col.rgb=hueShiftRGB(col.rgb,uHueShift);
    float scanline_val=sin(gl_FragCoord.y*uScanFreq)*0.5+0.5;
    col.rgb*=1.-(scanline_val*scanline_val)*uScan;
    col.rgb+=(rand(gl_FragCoord.xy+uTime)-0.5)*uNoise;
    
    // Invert the colors to create white background
    col.rgb = 1.0 - col.rgb;
    
    gl_FragColor=vec4(clamp(col.rgb,0.0,1.0),1.0);
}
`;

type Props = {
  hueShift?: number;
  noiseIntensity?: number;
  scanlineIntensity?: number;
  speed?: number;
  scanlineFrequency?: number;
  warpAmount?: number;
  resolutionScale?: number;
};

export default function LightVeil({
  hueShift = 0,
  noiseIntensity = 0,
  scanlineIntensity = 0,
  speed = 0.5,
  scanlineFrequency = 0,
  warpAmount = 0,
  resolutionScale = 1,
}: Props) {
  const ref = useRef<HTMLCanvasElement>(null);
  
  useEffect(() => {
    const canvas = ref.current as HTMLCanvasElement;
    const parent = canvas.parentElement as HTMLElement;

    const renderer = new Renderer({
      dpr: Math.min(window.devicePixelRatio, 2),
      canvas,
    });

    const gl = renderer.gl;
    const geometry = new Triangle(gl);

    const program = new Program(gl, {
      vertex,
      fragment,
      uniforms: {
        uTime: { value: 0 },
        uResolution: { value: new Vec2() },
        uHueShift: { value: hueShift },
        uNoise: { value: noiseIntensity },
        uScan: { value: scanlineIntensity },
        uScanFreq: { value: scanlineFrequency },
        uWarp: { value: warpAmount },
      },
    });

    const mesh = new Mesh(gl, { geometry, program });

    const resize = () => {
      const w = parent.clientWidth,
        h = parent.clientHeight;
      renderer.setSize(w * resolutionScale, h * resolutionScale);
      program.uniforms.uResolution.value.set(w, h);
    };

    window.addEventListener("resize", resize);
    resize();

    const start = performance.now();
    let frame = 0;

    const loop = () => {
      program.uniforms.uTime.value =
        ((performance.now() - start) / 1000) * speed;
      program.uniforms.uHueShift.value = hueShift;
      program.uniforms.uNoise.value = noiseIntensity;
      program.uniforms.uScan.value = scanlineIntensity;
      program.uniforms.uScanFreq.value = scanlineFrequency;
      program.uniforms.uWarp.value = warpAmount;
      renderer.render({ scene: mesh });
      frame = requestAnimationFrame(loop);
    };

    loop();

    return () => {
      cancelAnimationFrame(frame);
      window.removeEventListener("resize", resize);
    };
  }, [
    hueShift,
    noiseIntensity,
    scanlineIntensity,
    speed,
    scanlineFrequency,
    warpAmount,
    resolutionScale,
  ]);

  return (
    <canvas
      ref={ref}
      className="w-full h-full block"
    />
  );
}



================================================
File: src/components/UI/dialog-box/dialog-demo.tsx
================================================
import { useDialog } from "./use-dialog";
import { Button } from "../button";
import { DialogAnimationTypes, DialogTypes } from "./index";

interface DialogDemoProps {
  type?: DialogTypes;
  animation?: DialogAnimationTypes;
  customContent?: boolean;
}

const DialogDemo = ({ 
  type = 'alert', 
  animation = 'glassBlur', 
  customContent = false 
}: DialogDemoProps) => {
    const { openDialog } = useDialog();
    
    const openDemoDialog = () => {
      const baseProps = {
        title: `${type.charAt(0).toUpperCase() + type.slice(1)} Dialog`,
        dialogType: type as DialogTypes,
        animationKey: animation as DialogAnimationTypes
      };
  
      if (customContent) {
        openDialog({
          ...baseProps,
          children: (
            <div className="space-y-4">
              <p>This is a custom content area with HTML elements.</p>
              <div className="p-3 bg-gray-100 rounded">
                <h4 className="font-semibold mb-2">Custom Section</h4>
                <p>You can put any React components here.</p>
              </div>
            </div>
          )
        });
      } else {
        openDialog({
          ...baseProps,
          content: `This is a ${type} dialog ${animation ? 'with ' + animation + ' animation' : ''}.`,
          ...(type === 'confirm' ? {
            confirmationCallBack: (confirmed: boolean) => {
              console.log('User confirmed:', confirmed);
            }
          } : {})
        });
      }
    };
  
    return (
      <Button onClick={openDemoDialog}>
        Open {type.charAt(0).toUpperCase() + type.slice(1)} Dialog
      </Button>
    );
  }
  
  export default DialogDemo;


================================================
File: src/components/UI/dialog-box/index.tsx
================================================
import { motion, AnimatePresence } from 'framer-motion';
import { createContext, CSSProperties, useState } from 'react';
import { X, Check, AlertTriangle, Info, XCircle } from 'lucide-react';

// types/dialog.ts
export interface DialogRef {
  open: (options?: DialogProps) => void;
  close: () => void;
}

export type DialogAnimationTypes =
  | 'popIn'
  | 'springPop'
  | 'backdropZoom'
  | 'flip3D'
  | 'skewSlide'
  | 'glassBlur'
  | 'skyDrop'
  | 'morphSlide'
  | 'quantumFold'
  | 'prismBreak'
  | 'liquidFloat'
  | 'dimensionRip';

export type DialogTypes = 'success' | 'confirm' | 'error' | 'alert' | 'info' | 'warning';

export const animations = {
  popIn: {
    initial: {
      scale: 0.95,
      opacity: 0,
      y: 20,
    },
    animate: {
      scale: 1,
      opacity: 1,
      y: 0,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 25,
        duration: 0.3,
      },
    },
    exit: {
      scale: 0.95,
      opacity: 0,
      y: 20,
      transition: {
        duration: 0.2,
      },
    },
  },
  springPop: {
    initial: {
      y: 100,
      opacity: 0,
      scale: 0.2,
      rotateX: 20,
      filter: 'blur(8px)',
    },
    animate: {
      y: 0,
      opacity: 1,
      scale: 1,
      rotateX: 0,
      filter: 'blur(0px)',
      transition: {
        type: 'spring',
        stiffness: 200,
        damping: 15,
        mass: 0.5,
        velocity: 2,
      },
    },
    exit: {
      y: 100,
      scale: 0.2,
      opacity: 0,
      filter: 'blur(4px)',
      transition: {
        duration: 0.4,
        ease: 'easeIn',
      },
    },
  },
  backdropZoom: {
    initial: { scale: 1.3, opacity: 0, filter: 'blur(10px)' },
    animate: {
      scale: 1,
      opacity: 1,
      filter: 'blur(0px)',
      transition: {
        duration: 0.8,
        type: 'spring',
        stiffness: 200,
        ease: 'easeInOut',
      },
    },
    exit: {
      scale: 0.95,
      opacity: 0,
      filter: 'blur(4px)',
      transition: { duration: 0.3, ease: 'easeIn' },
    },
  },
  flip3D: {
    initial: {
      rotateY: -180,
      opacity: 0,
      scale: 0.8,
      filter: 'brightness(0.5)',
    },
    animate: {
      rotateY: 0,
      opacity: 1,
      scale: 1,
      filter: 'brightness(1)',
      transition: {
        duration: 0.8,
        ease: [0.68, -0.55, 0.265, 1.55],
        times: [0, 0.6, 1],
      },
    },
    exit: {
      rotateY: 180,
      opacity: 0,
      scale: 0.8,
      filter: 'brightness(0.5)',
      transition: { duration: 0.5, ease: 'easeIn' },
    },
  },
  skewSlide: {
    initial: {
      skewY: -30,
      skewX: -30,
      scale: 0.2,
      y: -400,
      x: -300,
      opacity: 0,
      rotateZ: -15,
      filter: 'blur(8px) brightness(0.3)',
    },
    animate: {
      skewY: [30, -5, 0],
      skewX: [30, -5, 0],
      scale: [0.2, 1.1, 1],
      y: [-400, 20, 0],
      x: [-300, 15, 0],
      opacity: [0, 0.7, 1],
      rotateZ: [-15, 2, 0],
      filter: 'blur(0px) brightness(1)',
      transition: {
        duration: 1.2,
        ease: [0.68, -0.55, 0.265, 1.55],
        times: [0, 0.7, 1],
      },
    },
    exit: {
      skewY: 30,
      skewX: 30,
      scale: 0.2,
      y: -300,
      x: 400,
      opacity: 0,
      rotateZ: 15,
      filter: 'blur(6px)',
      transition: { duration: 0.6, ease: 'easeIn' },
    },
  },
  glassBlur: {
    initial: {
      opacity: 0,
      scale: 0.95,
      filter: 'blur(20px) saturate(1.5)',
      backdropFilter: 'blur(0px)',
    },
    animate: {
      opacity: 1,
      scale: 1,
      filter: 'blur(0px) saturate(1)',
      backdropFilter: 'blur(20px)',
      transition: {
        duration: 0.8,
        ease: 'easeOut',
        filter: { duration: 1 },
      },
    },
    exit: {
      opacity: 0,
      scale: 0.95,
      filter: 'blur(10px)',
      transition: { duration: 0.4, ease: 'easeIn' },
    },
  },
  skyDrop: {
    initial: {
      y: -500,
      opacity: 0,
      scale: 0.7,
      rotateX: -45,
      filter: 'blur(10px)',
    },
    animate: {
      y: [0, 15, 0],
      opacity: [0, 0.8, 1],
      scale: [0.7, 1.05, 1],
      rotateX: [-45, 5, 0],
      filter: 'blur(0px)',
      transition: {
        duration: 1,
        ease: [0.34, 1.56, 0.64, 1],
        times: [0, 0.6, 1],
      },
    },
    exit: {
      y: -400,
      opacity: 0,
      scale: 0.8,
      rotateX: -30,
      filter: 'blur(6px)',
      transition: { duration: 0.5, ease: 'easeIn' },
    },
  },
  // NEW PREMIUM ANIMATIONS
  morphSlide: {
    initial: {
      scale: 0.3,
      opacity: 0,
      x: -200,
      rotateZ: -45,
      borderRadius: '50%',
      filter: 'blur(15px) hue-rotate(180deg)',
    },
    animate: {
      scale: [0.3, 1.2, 1],
      opacity: [0, 0.6, 1],
      x: [-200, 30, 0],
      rotateZ: [-45, 10, 0],
      borderRadius: ['50%', '20%', '12px'],
      filter: 'blur(0px) hue-rotate(0deg)',
      transition: {
        duration: 1.5,
        ease: [0.68, -0.55, 0.265, 1.55],
        times: [0, 0.6, 1],
      },
    },
    exit: {
      scale: 0.4,
      opacity: 0,
      x: 200,
      rotateZ: 45,
      borderRadius: '50%',
      filter: 'blur(10px)',
      transition: { duration: 0.8, ease: 'easeIn' },
    },
  },
  quantumFold: {
    initial: {
      scaleX: 0,
      scaleY: 1.5,
      opacity: 0,
      rotateY: 90,
      rotateX: 45,
      filter: 'brightness(2) contrast(0.5) blur(10px)',
    },
    animate: {
      scaleX: [0, 1.3, 1],
      scaleY: [1.5, 0.8, 1],
      opacity: [0, 0.4, 1],
      rotateY: [90, -15, 0],
      rotateX: [45, -10, 0],
      filter: 'brightness(1) contrast(1) blur(0px)',
      transition: {
        duration: 1.3,
        ease: [0.68, -0.55, 0.265, 1.55],
        times: [0, 0.5, 1],
      },
    },
    exit: {
      scaleX: 0,
      scaleY: 1.5,
      opacity: 0,
      rotateY: -90,
      filter: 'blur(8px)',
      transition: { duration: 0.6, ease: 'easeIn' },
    },
  },
  prismBreak: {
    initial: {
      scale: 0.1,
      opacity: 0,
      rotateX: 180,
      rotateY: 180,
      rotateZ: 180,
      filter: 'blur(20px) saturate(3) hue-rotate(90deg)',
    },
    animate: {
      scale: [0.1, 1.4, 1],
      opacity: [0, 0.3, 1],
      rotateX: [180, -20, 0],
      rotateY: [180, 20, 0],
      rotateZ: [180, -10, 0],
      filter: 'blur(0px) saturate(1) hue-rotate(0deg)',
      transition: {
        duration: 1.8,
        ease: [0.68, -0.55, 0.265, 1.55],
        times: [0, 0.4, 1],
      },
    },
    exit: {
      scale: 0.2,
      opacity: 0,
      rotateX: -90,
      rotateY: 90,
      rotateZ: 45,
      filter: 'blur(15px)',
      transition: { duration: 0.8, ease: 'easeIn' },
    },
  },
  liquidFloat: {
    initial: {
      scale: 0.6,
      opacity: 0,
      y: 100,
      borderRadius: '50%',
      filter: 'blur(12px)',
    },
    animate: {
      scale: [0.6, 1.1, 0.95, 1.02, 1],
      opacity: [0, 0.7, 0.9, 1, 1],
      y: [100, -20, 10, -5, 0],
      borderRadius: ['50%', '30%', '20%', '15%', '12px'],
      filter: 'blur(0px)',
      transition: {
        duration: 2,
        ease: 'easeOut',
        times: [0, 0.3, 0.6, 0.8, 1],
      },
    },
    exit: {
      scale: 0.7,
      opacity: 0,
      y: -50,
      borderRadius: '50%',
      filter: 'blur(8px)',
      transition: { duration: 0.6, ease: 'easeIn' },
    },
  },
  dimensionRip: {
    initial: {
      scaleX: 0.1,
      scaleY: 2,
      opacity: 0,
      rotateZ: 45,
      skewX: 30,
      filter: 'blur(20px) brightness(3) contrast(2)',
    },
    animate: {
      scaleX: [0.1, 2, 1],
      scaleY: [2, 0.5, 1],
      opacity: [0, 0.5, 1],
      rotateZ: [45, -10, 0],
      skewX: [30, -5, 0],
      filter: 'blur(0px) brightness(1) contrast(1)',
      transition: {
        duration: 1.4,
        ease: [0.68, -0.55, 0.265, 1.55],
        times: [0, 0.4, 1],
      },
    },
    exit: {
      scaleX: 0.1,
      scaleY: 2,
      opacity: 0,
      rotateZ: -45,
      skewX: -30,
      filter: 'blur(15px)',
      transition: { duration: 0.7, ease: 'easeIn' },
    },
  },
};

interface DialogProps {
  animationKey?: DialogAnimationTypes;
  confirmationCallBack?: (confirm: boolean) => void;
  dialogType?: DialogTypes;
  title?: string;
  confirmButtonText?: string;
  cancelButtonText?: string;
  headerStyles?: CSSProperties;
  children?: React.ReactNode;
  defaultButtons?: boolean;
  content?: string;
  showCloseButton?: boolean;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

const typeConfig = {
  success: {
    gradient: 'from-success-light via-success to-success-dark',
    icon: Check,
    iconBg: 'bg-success/20',
    iconColor: 'text-success-dark',
    borderColor: 'border-success/30',
    shadowColor: 'shadow-success/25',
  },
  confirm: {
    gradient: 'from-primary-light via-primary to-primary-dark',
    icon: Info,
    iconBg: 'bg-primary/20',
    iconColor: 'text-primary-dark',
    borderColor: 'border-primary/30',
    shadowColor: 'shadow-primary/25',
  },
  error: {
    gradient: 'from-destructive-light via-destructive to-destructive-dark',
    icon: XCircle,
    iconBg: 'bg-destructive/20',
    iconColor: 'text-destructive-dark',
    borderColor: 'border-destructive/30',
    shadowColor: 'shadow-destructive/25',
  },
  alert: {
    gradient: 'from-warning-light via-warning to-warning-dark',
    icon: AlertTriangle,
    iconBg: 'bg-warning/20',
    iconColor: 'text-warning-dark',
    borderColor: 'border-warning/30',
    shadowColor: 'shadow-warning/25',
  },
  info: {
    gradient: 'from-info-light via-info to-info-dark',
    icon: Info,
    iconBg: 'bg-info/20',
    iconColor: 'text-info-dark',
    borderColor: 'border-info/30',
    shadowColor: 'shadow-info/25',
  },
  warning: {
    gradient: 'from-warning-light via-warning to-warning-dark',
    icon: AlertTriangle,
    iconBg: 'bg-warning/20',
    iconColor: 'text-warning-dark',
    borderColor: 'border-warning/30',
    shadowColor: 'shadow-warning/25',
  },
};

const sizeConfig = {
  sm: 'max-w-sm',
  md: 'max-w-md',
  lg: 'max-w-lg',
  xl: 'max-w-xl',
};

export interface DialogContextType {
  openDialog: (opts: DialogProps) => void;
  closeDialog: () => void;
}

export const DialogContext = createContext<DialogContextType | undefined>(
  undefined
) as React.Context<DialogContextType>;
export const DialogProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [options, setOptions] = useState<DialogProps>({
    dialogType: 'alert',
    title: 'Default Title',
  });

  const openDialog = (opts: DialogProps) => {
    const finalOptions: DialogProps = {
      animationKey: 'popIn',
      confirmButtonText: 'Confirm',
      cancelButtonText: 'Cancel',
      defaultButtons: false,
      showCloseButton: true,
      size: 'md',
      ...opts,
    };
    setOptions(finalOptions);
    setIsOpen(true);
  };

  const closeDialog = () => {
    setIsOpen(false);
  };

  const handleClose = (confirm = false) => {
    setIsOpen(false);
    if (options?.dialogType === 'confirm' && options?.confirmationCallBack) {
      options?.confirmationCallBack(confirm);
    }
  };

  const anim = animations[options?.animationKey || 'popIn'];
  const config = typeConfig[options?.dialogType || 'alert'];
  const IconComponent = config.icon;

  return (
    <DialogContext.Provider value={{ openDialog, closeDialog }}>
      {children}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="fixed inset-0 z-50 flex items-center justify-center p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
          >
            {/* Backdrop */}
            <motion.div
              className="absolute inset-0 dark:bg-black/60 bg-white/60 backdrop-blur-sm"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
              onClick={() => handleClose(false)}
            />

            {/* Subtle animated background pattern */}
            <div className="absolute inset-0 opacity-10">
              <div className="absolute inset-0 bg-gradient-to-br from-primary/20 via-secondary/20 to-accent/20 animate-pulse" />
            </div>

            <motion.div
              className={`
                relative bg-background/95 backdrop-blur-xl rounded-2xl shadow-2xl 
                ${sizeConfig[options?.size || 'md']} w-full max-h-[85vh] 
                flex flex-col border border-border/40 overflow-hidden
                ${config.shadowColor}
                before:absolute before:inset-0 before:bg-gradient-to-br before:from-white/10 before:via-white/5 before:to-transparent before:pointer-events-none
                after:absolute after:inset-0 after:bg-gradient-to-t after:from-background/20 after:via-transparent after:to-white/10 after:pointer-events-none
              `}
              style={{ transformStyle: 'preserve-3d' }}
              {...anim}
            >
              {/* Premium Header with enhanced gradients and effects */}
              <div
                className={`
                  relative flex items-center justify-between rounded-t-2xl p-6
                  bg-gradient-to-br ${config.gradient} text-white overflow-hidden
                  border-b ${config.borderColor}
                `}
                style={options?.headerStyles}
              >
                {/* Animated background pattern */}
                <motion.div
                  className="absolute inset-0 bg-gradient-to-r from-white/10 via-transparent to-white/10"
                  animate={{
                    x: ['-100%', '100%'],
                  }}
                  transition={{
                    duration: 3,
                    repeat: Infinity,
                    ease: 'linear',
                  }}
                />

                {/* Icon with enhanced styling */}
                <motion.div
                  className={`
                    flex items-center justify-center w-12 h-12 rounded-xl mr-4
                    ${config.iconBg} backdrop-blur-sm border border-white/20
                    shadow-lg
                  `}
                  initial={{ scale: 0, rotate: -180 }}
                  animate={{ scale: 1, rotate: 0 }}
                  transition={{
                    delay: 0.2,
                    type: 'spring',
                    stiffness: 300,
                    damping: 15,
                  }}
                  whileHover={{
                    scale: 1.1,
                    rotate: 5,
                    transition: { duration: 0.2 },
                  }}
                >
                  <IconComponent className="h-6 w-6 text-white" />
                </motion.div>

                {/* Enhanced Title */}
                <motion.h2
                  className="text-xl sm:text-2xl font-bold flex-1 relative z-10"
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.3, duration: 0.5 }}
                >
                  {options?.title}
                </motion.h2>

                {/* Premium Close Button */}
                {options?.showCloseButton && (
                  <motion.button
                    onClick={() => handleClose(false)}
                    className="
                      relative w-10 h-10 rounded-xl bg-white/20 backdrop-blur-sm
                      flex items-center justify-center transition-all duration-300
                      hover:bg-white/30 hover:scale-110 active:scale-95
                      border border-white/30 group z-10
                    "
                    initial={{ opacity: 0, scale: 0, rotate: 90 }}
                    animate={{ opacity: 1, scale: 1, rotate: 0 }}
                    transition={{ delay: 0.4, type: 'spring', stiffness: 300 }}
                    whileHover={{ rotate: 90 }}
                    whileTap={{ scale: 0.9 }}
                  >
                    <X className="h-5 w-5 text-white group-hover:text-white/90" />
                  </motion.button>
                )}
              </div>

              {/* Enhanced Content Area */}
              <motion.div
                className="p-6 flex-1 overflow-y-auto relative"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3, duration: 0.5 }}
              >
                <div className="prose prose-sm max-w-none dark:prose-invert">
                  {options.children ?? (
                    <p className="text-muted-foreground leading-relaxed">
                      {options.content}
                    </p>
                  )}
                </div>
              </motion.div>

              {/* Premium Button Area */}
              {!options?.defaultButtons && (
                <motion.div
                  className="flex items-center justify-center gap-3 p-6 pt-0"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.4, duration: 0.5 }}
                >
                  {options?.dialogType === 'confirm' && (
                    <motion.button
                      onClick={() => handleClose(true)}
                      className="
                        relative px-6 py-3 font-semibold text-white rounded-xl overflow-hidden
                        bg-gradient-to-br from-primary via-primary-dark to-primary-darker
                        hover:from-primary-dark hover:via-primary-darker hover:to-primary-darkest
                        shadow-lg shadow-primary/25 hover:shadow-xl hover:shadow-primary/40
                        border border-primary/20 backdrop-blur-sm
                        transition-all duration-300 group transform-gpu
                        hover:scale-105 active:scale-95
                        before:absolute before:inset-0 before:bg-gradient-to-t 
                        before:from-white/0 before:to-white/20 before:opacity-0 
                        before:group-hover:opacity-100 before:transition-opacity
                      "
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      transition={{ type: 'spring', stiffness: 400, damping: 25 }}
                    >
                      <span className="relative z-10 flex items-center gap-2">
                        <Check className="h-4 w-4" />
                        {options?.confirmButtonText || 'Confirm'}
                      </span>
                    </motion.button>
                  )}

                  <motion.button
                    onClick={() => handleClose(false)}
                    className="
                      relative px-6 py-3 font-semibold rounded-xl overflow-hidden
                      bg-gradient-to-br from-muted via-muted-dark to-muted-darker text-muted-foreground
                      hover:from-muted-dark hover:via-muted-darker hover:to-muted-darkest
                      shadow-lg shadow-muted/20 hover:shadow-xl hover:shadow-muted/30
                      border border-muted/30 backdrop-blur-sm
                      transition-all duration-300 group transform-gpu
                      hover:scale-105 active:scale-95
                    "
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    transition={{ type: 'spring', stiffness: 400, damping: 25 }}
                  >
                    <span className="relative z-10 flex items-center gap-2">
                      <X className="h-4 w-4" />
                      {options?.cancelButtonText || 'Cancel'}
                    </span>
                  </motion.button>
                </motion.div>
              )}

              {/* Subtle border glow effect */}
              <div
                className={`absolute inset-0 rounded-2xl border ${config.borderColor} opacity-50 pointer-events-none`}
              />
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </DialogContext.Provider>
  );
};



================================================
File: src/components/UI/dialog-box/use-dialog.ts
================================================
import { useContext } from 'react';
import { DialogContext } from './index'; //! might have to replace with the absolute path

export const useDialog = () => {
  const context = useContext(DialogContext);
  if (!context) throw new Error('useDialog must be used within a DialogProvider');
  return context;
};


================================================
File: src/components/UI/dropdown/index.tsx
================================================
import * as DropdownMenu from "@radix-ui/react-dropdown-menu";
import { motion, MotionProps } from "framer-motion";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "../../../utils/cn";
import { ReactNode } from "react";

// Styling variants using CVA
const dropdownVariants = cva("z-50 min-w-[10rem] border p-2 shadow-lg", {
  variants: {
    size: {
      sm: "text-sm",
      md: "text-base",
      lg: "text-lg",
    },
    rounded: {
      none: "rounded-none",
      sm: "rounded-md",
      md: "rounded-xl",
      full: "rounded-full",
    },
    bg: {
      default: "bg-background text-foreground",
      dark: "bg-card text-card-foreground",
      transparent: "bg-transparent text-transparent",
      glass: "bg-white/10 backdrop-blur-lg text-[var(--color-glass-text)]",
      gradient: "bg-gradient-to-r from-[var(--color-gradient-from-dropdown)] to-[var(--color-gradient-to-dropdown)] text-white",
      primary: "bg-primary text-primary-foreground",
    },
  },
  defaultVariants: {
    size: "md",
    rounded: "md",
    bg: "default",
  },
});

// Animation variants
const animations = {
  default: {
    initial: { opacity: 0, y: -10, scale: 0.95 },
    animate: { opacity: 1, y: 0, scale: 1, transition: { duration: 0.15 } },
    exit: { opacity: 0, y: -5, scale: 0.95, transition: { duration: 0.1 } },
  },
  fade: {
    initial: { opacity: 0 },
    animate: { opacity: 1, transition: { duration: 0.2 } },
    exit: { opacity: 0, transition: { duration: 0.1 } },
  },
  scale: {
    initial: { scale: 0.9, opacity: 0 },
    animate: { scale: 1, opacity: 1, transition: { duration: 0.15 } },
    exit: { scale: 0.9, opacity: 0, transition: { duration: 0.1 } },
  },
  slide: {
    initial: { y: -12, opacity: 0 },
    animate: { y: 0, opacity: 1, transition: { duration: 0.2 } },
    exit: { y: -8, opacity: 0, transition: { duration: 0.1 } },
  },
  flip: {
    initial: { rotateX: -90, opacity: 0 },
    animate: { rotateX: 0, opacity: 1, transition: { duration: 0.25 } },
    exit: { rotateX: -90, opacity: 0, transition: { duration: 0.15 } },
  },
};

type AnimationVariant = keyof typeof animations;

interface DropdownProps extends VariantProps<typeof dropdownVariants> {
  children: MotionProps['children'];
  trigger: ReactNode;
  animation?: AnimationVariant;
  className?: string;
}

export const Dropdown = ({
  children,
  trigger,
  animation = "default",
  size,
  rounded,
  bg,
  className,
}: DropdownProps) => {
  return (
    <DropdownMenu.Root>
      <DropdownMenu.Trigger asChild>{trigger}</DropdownMenu.Trigger>
      <DropdownMenu.Portal>
        <DropdownMenu.Content asChild sideOffset={8}>
          <motion.div
            variants={animations[animation]}
            initial="initial"
            animate="animate"
            exit="exit"
            className={cn(dropdownVariants({ size, rounded, bg }), className)}
          >
            {children}
          </motion.div>
        </DropdownMenu.Content>
      </DropdownMenu.Portal>
    </DropdownMenu.Root>
  );
};

export const DropdownItem = ({
  children,
  className,
  ...props
}: {
  children: ReactNode;
  className?: string;
} & React.ComponentProps<typeof DropdownMenu.Item>) => (
  <DropdownMenu.Item
    className={cn(
      "cursor-pointer select-none rounded-md px-3 py-2 text-sm outline-transparent",
      className
    )}
    {...props}
  >
    {children}
  </DropdownMenu.Item>
);



================================================
File: src/components/UI/input/InputDemo.tsx
================================================
import { useState, ReactElement } from 'react';
import { AnimatedInput } from '@site/src/components/UI/input';

type InputValues = {
  borderBeam: string;
  neon: string;
  particles: string;
  cosmic: string;
};

export function InputBasicDemo(): ReactElement {
  const [value, setValue] = useState<string>('');
  
  return (
    <AnimatedInput
      placeholder="Type something..."
      variant="clean"
      value={value}
      onChange={setValue}
    />
  );
}

export function InputAdvancedDemo(): ReactElement {
  const [values, setValues] = useState<InputValues>({
    borderBeam: '',
    neon: '',
    particles: '',
    cosmic: ''
  });

  const handleChange = (key: keyof InputValues) => (value: string): void => {
    setValues(prev => ({ ...prev, [key]: value }));
  };

  return (
    <>
      <AnimatedInput
        placeholder="Border Beam"
        variant="borderBeam"
        value={values.borderBeam}
        onChange={handleChange('borderBeam')}
      />
      <AnimatedInput
        placeholder="Neon Effect"
        variant="neon"
        value={values.neon}
        onChange={handleChange('neon')}
      />
      <AnimatedInput
        placeholder="Particles"
        variant="particles"
        value={values.particles}
        onChange={handleChange('particles')}
      />
      <AnimatedInput
        placeholder="Cosmic"
        variant="cosmic"
        value={values.cosmic}
        onChange={handleChange('cosmic')}
      />
    </>
  );
}



================================================
File: src/components/UI/input/index.tsx
================================================
"use client";

import type React from "react";
import { useState, useEffect, useRef } from "react";
import { motion, Variants, useMotionValue, useSpring, useTransform } from "framer-motion";
import { Eye, EyeOff, Check, AlertCircle } from "lucide-react";
import { cn } from "../../../utils/cn";

interface AnimatedInputProps {
  placeholder: string;
  variant: string;
  inputClassName?: string;
  labelClassName?: string;
  value: string;
  type?: string;
  onChange?: (value: string) => void;
  onFocus?: () => void;
  onBlur?: () => void;
  disabled?: boolean;
  error?: string;
  success?: boolean;
  icon?: React.ElementType;
  showPasswordToggle?: boolean;
  size?: "sm" | "md" | "lg";
}

interface InputVariant {
  label: Variants;
  input: Variants;
  extra?: Variants;
  container?: Variants;
}

// Enhanced border beam variants with better animations
const borderBeamVariants = {
  initial: {
    pathLength: 0,
    opacity: 0,
  },
  animate: {
    pathLength: 1,
    opacity: 1,
    transition: {
      pathLength: {
        duration: 1.5,
        repeat: Infinity,
        ease: "easeInOut",
      },
      opacity: {
        duration: 0.3,
      },
    },
  },
};

// Enhanced particle creation with better physics
const createEnhancedParticles = (container: HTMLElement, count = 8) => {
  const particles: HTMLElement[] = [];
  
  for (let i = 0; i < count; i++) {
    const particle = document.createElement("div");
    particle.className = cn(
      "absolute rounded-full pointer-events-none",
      "bg-primary",
      "shadow-lg shadow-primary/50"
    );
    
    const size = Math.random() * 4 + 2;
    particle.style.width = `${size}px`;
    particle.style.height = `${size}px`;
    particle.style.left = `${Math.random() * 100}%`;
    particle.style.top = `${Math.random() * 100}%`;
    particle.style.boxShadow = `0 0 ${size * 2}px rgba(var(--color-background), 0.6)`;
    
    // Enhanced animation
    particle.style.animation = `particleFloat ${Math.random() * 3 + 2}s ease-in-out infinite`;
    particle.style.animationDelay = `${Math.random() * 2}s`;
    
    container.appendChild(particle);
    particles.push(particle);
    
    setTimeout(() => {
      if (container.contains(particle)) {
        container.removeChild(particle);
      }
    }, 4000);
  }
  
  return particles;
};

export const AnimatedInput: React.FC<AnimatedInputProps> = ({
  placeholder,
  variant,
  inputClassName = "",
  labelClassName = "",
  value,
  onChange,
  type = "text",
  disabled = false,
  error,
  success,
  icon: Icon,
  showPasswordToggle = false,
  size = "md",
  onFocus,
  onBlur,
}) => {
  const [isFocused, setIsFocused] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [inputType, setInputType] = useState(type);
  
  const inputRef = useRef<HTMLInputElement>(null);
  const particleRef = useRef<HTMLDivElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  // Enhanced mouse tracking for premium effects
  const mouseX = useMotionValue(0);
  const mouseY = useMotionValue(0);
  const rotateX = useSpring(useTransform(mouseY, [-100, 100], [2, -2]));
  const rotateY = useSpring(useTransform(mouseX, [-100, 100], [-2, 2]));

  const handleFocus = () => {
    setIsFocused(true);
    onFocus?.();
  };

  const handleBlur = () => {
    setIsFocused(false);
    onBlur?.();
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onChange?.(e.target.value);
  };

  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!containerRef.current) return;
    const rect = containerRef.current.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    mouseX.set((e.clientX - centerX) * 0.3);
    mouseY.set((e.clientY - centerY) * 0.3);
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
    setInputType(showPassword ? "password" : "text");
  };

  const variants = inputVariants[variant as keyof typeof inputVariants];
  const hasValue = value.length > 0;
  const isActive = isFocused || hasValue;

  // Size configurations
  const sizeConfig = {
    sm: { input: "h-9 px-3 text-sm", label: "text-sm", icon: "h-4 w-4" },
    md: { input: "h-11 px-4 text-base", label: "text-base", icon: "h-5 w-5" },
    lg: { input: "h-13 px-5 text-lg", label: "text-lg", icon: "h-6 w-6" }
  };

  // Enhanced particle effects for particleField
  useEffect(() => {
    if (variant === "particleField" && particleRef.current && isActive) {
      const interval = setInterval(() => {
        if (particleRef.current) {
          createEnhancedParticles(particleRef.current, 6);
        }
      }, 300);
      
      return () => clearInterval(interval);
    }
  }, [variant, isActive]);

  return (
    <motion.div
      ref={containerRef}
      className={cn(
        "relative mb-6 group",
        disabled && "opacity-60 cursor-not-allowed"
      )}
      initial="initial"
      animate={isActive ? "animate" : "initial"}
      style={{ 
        perspective: 2000,
        rotateX: variant === "tilt3D" ? rotateX : undefined,
        rotateY: variant === "tilt3D" ? rotateY : undefined
      }}
      onMouseMove={handleMouseMove}
      onMouseLeave={() => {
        mouseX.set(0);
        mouseY.set(0);
      }}
      variants={variants.container}
    >
      {/* Enhanced Label */}
      <motion.label
        className={cn(
          "absolute left-4 pointer-events-none transition-colors duration-300 z-10 origin-left",
          "text-muted-foreground group-focus-within:text-primary",
          error && "text-red-500",
          success && "text-emerald-500",
          sizeConfig[size].label,
          labelClassName
        )}
        variants={variants.label}
      >
        {placeholder}
      </motion.label>

      {/* Input Container */}
      <div className="relative">
        {/* Leading Icon */}
        {Icon && (
          <motion.div
            className={cn(
              "absolute left-3 top-1/2 -translate-y-1/2 z-20",
              "text-muted-foreground group-focus-within:text-primary transition-colors duration-300",
              sizeConfig[size].icon
            )}
            initial={{ scale: 0.8, opacity: 0.6 }}
            animate={{ 
              scale: isActive ? 1 : 0.8, 
              opacity: isActive ? 1 : 0.6,
            }}
            transition={{ duration: 0.3 }}
          >
            <Icon className={sizeConfig[size].icon} />
          </motion.div>
        )}

        {/* Enhanced Input Field */}
        <motion.input
          ref={inputRef}
          type={inputType}
          className={cn(
            // Base enhanced styles
            "w-full bg-background/90 backdrop-blur-sm border border-border/60 rounded-xl",
            "text-foreground placeholder:text-transparent transition-all duration-300",
            "focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary/60",
            "disabled:cursor-not-allowed disabled:opacity-50",
            "shadow-sm hover:shadow-md focus:shadow-lg",
            "shadow-black/5 dark:shadow-white/5",
            
            // Size variants
            sizeConfig[size].input,
            
            // Icon padding
            Icon && "pl-10",
            (showPasswordToggle || error || success) && "pr-10",
            
            // Status variants
            error && "border-red-500/60 focus:border-red-500 focus:ring-red-500/20",
            success && "border-emerald-500/60 focus:border-emerald-500 focus:ring-emerald-500/20",
            
            inputClassName
          )}
          onFocus={handleFocus}
          onBlur={handleBlur}
          onChange={handleChange}
          value={value}
          disabled={disabled}
          variants={variants.input}
          style={{
            ...(variant === "borderBeam" && {
              border: "2px solid transparent",
            }),
          }}
        />

        {/* Enhanced Border Beam Effect */}
        {variant === "borderBeam" && isActive && (
          <svg
            className="absolute inset-0 pointer-events-none rounded-xl"
            style={{
              transform: "translate(-2px, -2px)",
              width: "calc(100% + 4px)",
              height: "calc(100% + 4px)",
              zIndex: 5,
            }}
          >
            <motion.rect
              x="0"
              y="0"
              width="100%"
              height="100%"
              fill="none"
              stroke="url(#enhancedBorderGradient)"
              strokeWidth="2"
              strokeLinecap="round"
              rx="12"
              initial="initial"
              animate="animate"
              variants={borderBeamVariants}
            />
            <defs>
              <linearGradient
                id="enhancedBorderGradient"
                gradientUnits="userSpaceOnUse"
                x1="0"
                y1="0"
                x2="100%"
                y2="100%"
              >
                <stop offset="0%" stopColor="var(--primary)" />
                <stop offset="25%" stopColor="var(--primary)" />
                <stop offset="50%" stopColor="var(--primary)" />
                <stop offset="75%" stopColor="var(--primary)" />
                <stop offset="100%" stopColor="var(--primary)" />
              </linearGradient>
            </defs>
          </svg>
        )}

        {/* Enhanced Particle Effects */}
        {variant === "particles" && isActive && (
          <div className="absolute inset-0 pointer-events-none rounded-xl overflow-hidden">
            {[...Array(8)].map((_, i) => (
              <motion.div
                key={i}
                className="absolute w-2 h-2 bg-primary rounded-full shadow-lg shadow-primary/50"
                style={{
                  left: `${15 + i * 10}%`,
                  top: "50%",
                }}
                variants={variants.extra}
                custom={i * 0.1}
                animate="animate"
                initial="initial"
              />
            ))}
          </div>
        )}

        {/* Enhanced Ripple Effect */}
        {variant === "ripple" && isActive && (
          <motion.div
            className="absolute inset-0 rounded-xl pointer-events-none"
            initial={{ scale: 0, opacity: 0.5 }}
            animate={{
              scale: [0, 2, 0],
              opacity: [0.5, 0.2, 0],
            }}
            transition={{
              duration: 1.5,
              repeat: Infinity,
              ease: "easeOut",
            }}
            style={{
              background: "radial-gradient(circle, var(--primary) 0%, transparent 70%)"
            }}
          />
        )}

        {/* Trailing Icons */}
        <div className="absolute right-3 top-1/2 -translate-y-1/2 flex items-center gap-2 z-20">
          {error && <AlertCircle className="h-4 w-4 text-red-500" />}
          {success && <Check className="h-4 w-4 text-emerald-500" />}
          
          {showPasswordToggle && type === "password" && (
            <motion.button
              type="button"
              onClick={togglePasswordVisibility}
              className="text-muted-foreground hover:text-foreground transition-colors duration-200"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
            >
              {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
            </motion.button>
          )}
        </div>
      </div>

      {/* Enhanced Particle Field */}
      {variant === "particleField" && (
        <motion.div
          ref={particleRef}
          className="absolute inset-0 pointer-events-none overflow-hidden rounded-xl"
          initial={{ opacity: 0 }}
          animate={{ opacity: isActive ? 1 : 0 }}
          transition={{ duration: 0.3 }}
        />
      )}

      {/* Error/Success Message */}
      {(error || success) && (
        <motion.div
          className={cn(
            "mt-2 text-sm flex items-center gap-2",
            error ? "text-red-500" : "text-emerald-500"
          )}
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
        >
          {error ? <AlertCircle className="h-4 w-4" /> : <Check className="h-4 w-4" />}
          {error || "Input validated successfully"}
        </motion.div>
      )}
    </motion.div>
  );
};

// Enhanced input variants (ALL original variants with premium improvements)
const inputVariants: Record<string, InputVariant> = {
  clean: {
    container: {
      initial: { scale: 1 },
      animate: { scale: 1.005 },
    },
    label: {
      initial: { y: 0, scale: 1, color: "var(--primary)" },
      animate: { 
        y: -32, 
        scale: 0.85, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    input: {
      initial: { 
        borderColor: "rgb(226, 232, 240)",
        boxShadow: "0 1px 3px rgba(0,0,0,0.1)"
      },
      animate: { 
        borderColor: "var(--primary)",
      },
    },
  },

  underline: {
    label: {
      initial: { y: 0, color: "var(--primary)" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    input: {
      initial: { 
        borderWidth: "0 0 2px 0", 
        borderRadius: "4px 4px 0 0",
        borderColor: "rgb(226, 232, 240)",
        background: "rgba(0, 0, 0, 0.02)"
      },
      animate: { 
        borderColor: "var(--primary)",
        background: "rgba(var(--primary), 0.02)",
        boxShadow: "0 2px 0 0 rgba(var(--primary), 0.4)"
      },
    },
  },

  floating: {
    label: {
      initial: { y: 0, scale: 1, color: "var(--primary)" },
      animate: {
        y: -32,
        scale: 0.85,
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 400, damping: 25 },
      },
    },
    input: {
      initial: { 
        boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
        transform: "translateY(0px)"
      },
      animate: { 
        boxShadow: "0 8px 25px rgba(59, 130, 246, 0.15), 0 4px 12px rgba(0,0,0,0.1)",
        transform: "translateY(-2px)"
      },
    },
  },

  borderGlow: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        textShadow: "0 0 12px var(--primary)"
      },
    },
    input: {
      initial: { 
        boxShadow: "0 0 0 0 rgba(var(--primary), 0)",
        borderColor: "rgb(226, 232, 240)"
      },
      animate: { 
        boxShadow: "0 0 0 3px rgba(246, 134, 59, 0.3), 0 0 20px rgba(246, 134, 59, 0.2)",
        borderColor: "var(--primary)"
      },
    },
  },

  shimmer: {
    label: {
      initial: { y: 0, opacity: 1, color: "#6b7280" },
      animate: { 
        y: -32, 
        opacity: 0.9, 
        color: "var(--primary)",
        textShadow: "0 0 12px var(--primary)"
      },
    },
    input: {
      initial: { 
        backgroundPosition: "200% 0",
        borderColor: "rgb(226, 232, 240)"
      },
      animate: {
        backgroundPosition: "-200% 0",
        backgroundImage: "linear-gradient(90deg, transparent 0%, var(--primary) 50%, transparent 100%)",
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px var(--primary)",
        transition: { 
          backgroundPosition: { repeat: Infinity, duration: 2, ease: "linear" },
          borderColor: { duration: 0.3 },
          boxShadow: { duration: 0.3 }
        },
      },
    },
  },

  particles: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        textShadow: "0 0 8px var(--primary)"
      },
    },
    input: {
      initial: { borderColor: "rgb(226, 232, 240)" },
      animate: { 
        borderColor: "var(--primary)",
        boxShadow: "0 0 20px var(--primary)"
      },
    },
    extra: {
      initial: {
        scale: 0,
        opacity: 0,
        y: 0,
      },
      animate: (i: number) => ({
        scale: [0, 1.5, 0],
        opacity: [0, 1, 0],
        y: [-20, -80, -120],
        x: [0, Math.sin(i) * 15, Math.cos(i) * 20],
        transition: {
          duration: 2.5,
          repeat: Infinity,
          delay: i,
          ease: "easeOut",
        },
      }),
    },
  },

  slide: {
    label: {
      initial: { x: 0, y: 0, color: "var(--primary)" },
      animate: { 
        x: 0, 
        y: -32, 
        scale: 0.85, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    input: {
      initial: { 
        borderColor: "var(--primary)",
        transform: "translateX(0px)"
      },
      animate: { 
        borderColor: "var(--primary)",
        transform: "translateX(3px)",
        boxShadow: "0 4px 15px var(--primary)"
      },
    },
  },

  scale: {
    label: {
      initial: { scale: 1, y: 0, color: "var(--primary)" },
      animate: { 
        scale: 0.85, 
        y: -32, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 400, damping: 25 }
      },
    },
    input: {
      initial: { scale: 1 },
      animate: { 
        scale: 1.02,
        boxShadow: "0 8px 25px var(--primary)",
        borderColor: "var(--primary)"
      },
    },
  },

  rotate: {
    label: {
      initial: { rotate: 0, y: 0, color: "var(--primary)" },
      animate: { 
        rotate: -8, 
        y: -32, 
        scale: 0.85, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    input: {
      initial: { rotate: 0 },
      animate: { 
        rotate: 1,
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)"
      },
    },
  },

  bounce: {
    label: {
      initial: { y: 0, color: "var(--primary)" },
      animate: {
        y: -32,
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 400, damping: 15 },
      },
    },
    input: {
      initial: { y: 0 },
      animate: {
        y: [0, -8, 0],
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: { 
          y: { repeat: Infinity, duration: 1.5, ease: "easeInOut" } 
        },
      },
    },
  },

  elastic: {
    label: {
      initial: { x: 0, y: 0, color: "var(--primary)" },
      animate: {
        x: [-15, 15, -8, 8, 0],
        y: -32,
        scale: 0.85,
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 500, damping: 15 },
      },
    },
    input: {
      initial: { scaleX: 1 },
      animate: {
        scaleX: [1, 1.08, 0.95, 1.03, 1],
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: { duration: 0.8 },
      },
    },
  },

  glow: {
    label: {
      initial: { y: 0, opacity: 1, color: "var(--primary)" },
      animate: { 
        y: -32, 
        opacity: 0.9, 
        color: "var(--primary)",
        textShadow: "0 0 15px var(--primary)"
      },
    },
    input: {
      initial: { boxShadow: "0 0 0 var(--primary)" },
      animate: { 
        boxShadow: "0 0 25px var(--primary), 0 0 50px var(--primary)",
        borderColor: "var(--primary)"
      },
    },
  },

  shake: {
    label: {
      initial: { x: 0, y: 0, color: "var(--primary)" },
      animate: {
        x: [-3, 3, -2, 2, 0],
        y: -32,
        scale: 0.85,
        color: "var(--primary)",
        transition: { 
          x: { duration: 0.5, ease: "easeInOut" },
          y: { type: "spring", stiffness: 300, damping: 15 },
          scale: { type: "spring", stiffness: 300, damping: 15 },
          color: { duration: 0.2 }
        },
      },
    },
    input: {
      initial: { x: 0 },
      animate: {
        x: [-2, 2, -1, 1, 0],
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: {
          x: { 
            repeat: Infinity, 
            duration: 0.6, 
            ease: "easeInOut",
            repeatDelay: 3 
          },
          borderColor: { duration: 0.3 },
          boxShadow: { duration: 0.3 }
        },
      },
    },
  },

  wave: {
    label: {
      initial: { y: 0, color: "var(--primary)" },
      animate: (i: number) => ({
        y: -32,
        color: "var(--primary)",
        transition: {
          delay: i * 0.03,
          type: "spring",
          stiffness: 300,
          damping: 15,
        },
      }),
    },
    input: {
      initial: { y: 0 },
      animate: {
        y: [0, -5, 0, 5, 0],
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: {
          y: { repeat: Infinity, duration: 2.5, ease: "easeInOut" },
        },
      },
    },
  },

  typewriter: {
    label: {
      initial: { width: "100%", x: 0, y: 0, color: "var(--primary)" },
      animate: { 
        width: 0, 
        x: -60, 
        y: -32, 
        scale: 0.85,
        color: "var(--primary)",
        transition: { duration: 0.6, ease: "easeInOut" } 
      },
    },
    input: {
      initial: { width: 0 },
      animate: { 
        width: "100%", 
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: { delay: 0.6, duration: 0.6, ease: "easeOut" } 
      },
    },
  },

  magnetic: {
    label: {
      initial: { y: 0, color: "var(--primary)" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        textShadow: "0 0 12px var(--primary)"
      },
    },
    input: {
      initial: { backgroundPosition: "0% 50%" },
      animate: {
        backgroundPosition: "100% 50%",
        backgroundImage: "linear-gradient(90deg, transparent 30%, rgba(59, 130, 246, 0.1) 50%, transparent 70%)",
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: {
          backgroundPosition: { repeat: Infinity, duration: 1.5, ease: "linear" },
        },
      },
    },
  },

  pulse: {
    label: {
      initial: { scale: 1, y: 0, color: "var(--primary)" },
      animate: { 
        scale: 0.85, 
        y: -32, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    input: {
      initial: { scale: 1 },
      animate: {
        scale: [1, 1.02, 1],
        borderColor: "var(--primary)",
        boxShadow: [
          "0 4px 15px var(--primary)",
          "0 4px 20px var(--primary)",
          "0 4px 15px var(--primary)"
        ],
        transition: { 
          scale: { repeat: Infinity, duration: 2, ease: "easeInOut" },
          boxShadow: { repeat: Infinity, duration: 2, ease: "easeInOut" }
        },
      },
    },
  },

  flip: {
    label: {
      initial: { rotateX: 0, y: 0, color: "var(--primary)" },
      animate: { 
        rotateX: 180, 
        y: -32, 
        scale: 0.85,
        color: "var(--primary)",
        transition: { duration: 0.6, ease: "easeInOut" }
      },
    },
    input: {
      initial: { rotateX: 0 },
      animate: { 
        rotateX: [0, 180, 360], 
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: { duration: 1.2, ease: "easeInOut" } 
      },
    },
  },

  morph: {
    label: {
      initial: { borderRadius: "0%", y: 0, color: "var(--primary)" },
      animate: { 
        borderRadius: "50%", 
        y: -32, 
        scale: 0.85, 
        color: "var(--primary)",
        transition: { duration: 0.6, ease: "easeInOut" }
      },
    },
    input: {
      initial: { borderRadius: "12px" },
      animate: {
        borderRadius: ["12px", "30px", "12px"],
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: { 
          borderRadius: { repeat: Infinity, duration: 2.5, ease: "easeInOut" } 
        },
      },
    },
  },

  spotlight: {
    label: {
      initial: { y: 0, filter: "brightness(1)", color: "var(--primary)" },
      animate: { 
        y: -32, 
        filter: "brightness(1.3) drop-shadow(0 0 8px rgba(59, 130, 246, 0.5))", 
        color: "var(--primary)"
      },
    },
    input: {
      initial: { backgroundPosition: "0% 50%" },
      animate: {
        backgroundPosition: "100% 50%",
        backgroundImage: "linear-gradient(90deg, transparent 0%, rgba(59, 130, 246, 0.1) 50%, transparent 100%)",
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: { 
          backgroundPosition: { repeat: Infinity, duration: 2, ease: "linear" }
        },
      },
    },
    extra: {
      initial: { opacity: 0 },
      animate: {
        opacity: 1,
        transition: {
          repeat: Infinity,
          duration: 2,
          repeatType: "reverse" as const,
        },
      },
    },
  },

  liquid: {
    label: {
      initial: { y: 0, color: "var(--primary)" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    input: {
      initial: { borderRadius: "12px" },
      animate: {
        borderRadius: ["12px", "25px", "12px"],
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: { 
          borderRadius: { repeat: Infinity, duration: 2.5, ease: "easeInOut" } 
        },
      },
    },
  },

  neon: {
    label: {
      initial: { textShadow: "0 0 0px #fff", color: "var(--primary)" },
      animate: {
        textShadow: "0 0 12px #fff, 0 0 24px var(--primary), 0 0 36px var(--primary)",
        y: -32,
        color: "var(--primary)",
      },
    },
    input: {
      initial: { boxShadow: "0 0 0px #fff" },
      animate: {
        boxShadow: "0 0 8px var(--primary), 0 0 16px var(--primary), 0 0 24px var(--primary), 0 0 32px var(--primary)",
        borderColor: "var(--primary)",
        transition: {
          boxShadow: { repeat: Infinity, duration: 2, repeatType: "reverse" as const },
        },
      },
    },
  },

  origami: {
    label: {
      initial: { rotateY: 0, y: 0, color: "var(--primary)" },
      animate: { 
        rotateY: 180, 
        y: -32, 
        scale: 0.85,
        color: "var(--primary)",
        transition: { duration: 0.8, ease: "easeInOut" }
      },
    },
    input: {
      initial: { rotateY: 0 },
      animate: {
        rotateY: [0, -90, 0],
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: {
          rotateY: { repeat: Infinity, duration: 3, repeatDelay: 1.5 },
        },
      },
    },
  },

  glitch: {
    label: {
      initial: { skew: 0, y: 0, color: "var(--primary)" },
      animate: {
        skew: [-8, 8, -4, 4, 0],
        y: -32,
        scale: 0.85,
        color: "var(--primary)",
        textShadow: "2px 0 #ff0000, -2px 0 #00ff00",
        transition: { 
          skew: { repeat: Infinity, duration: 0.6, repeatDelay: 2 },
          textShadow: { repeat: Infinity, duration: 0.1, repeatDelay: 2 }
        },
      },
    },
    input: {
      initial: { skew: 0 },
      animate: {
        skew: [0, -3, 3, -2, 2, 0],
        borderColor: "var(--primary)",
        boxShadow: "2px 0 8px var(--primary), -2px 0 8px var(--primary)",
        transition: { 
          skew: { repeat: Infinity, duration: 0.6, repeatDelay: 2 } 
        },
      },
    },
  },

  hologram: {
    label: {
      initial: { opacity: 1, y: 0, color: "var(--primary)" },
      animate: {
        opacity: [1, 0.6, 1],
        y: -32,
        scale: 0.85,
        color: "var(--primary)",
        textShadow: "0 0 15px var(--primary)",
        transition: { 
          opacity: { repeat: Infinity, duration: 2.5, ease: "easeInOut" } 
        },
      },
    },
    input: {
      initial: { opacity: 0.8 },
      animate: {
        opacity: [0.8, 1, 0.8],
        borderColor: "var(--primary)",
        boxShadow: "0 0 20px var(--primary), inset 0 0 20px var(--primary)",
        transition: { 
          opacity: { repeat: Infinity, duration: 2.5, ease: "easeInOut" } 
        },
      },
    },
    extra: {
      initial: { opacity: 0 },
      animate: {
        opacity: [0, 0.6, 0],
        transition: { repeat: Infinity, duration: 2.5, ease: "easeInOut" },
      },
    },
  },

  cosmic: {
    label: {
      initial: { scale: 1, y: 0, rotate: 0, color: "var(--primary)" },
      animate: {
        scale: 0.85,
        y: -32,
        rotate: 360,
        color: "var(--primary)",
        textShadow: "0 0 15px var(--primary)",
        transition: { 
          rotate: { duration: 3, repeat: Infinity, ease: "linear" } 
        },
      },
    },
    input: {
      initial: { backgroundPosition: "0% 50%" },
      animate: {
        backgroundPosition: "100% 50%",
        backgroundImage: "linear-gradient(45deg, rgba(139, 92, 246, 0.1), rgba(236, 72, 153, 0.1), rgba(139, 92, 246, 0.1))",
        borderColor: "var(--primary)",
        boxShadow: "0 0 25px var(--primary)",
        transition: { 
          backgroundPosition: { repeat: Infinity, duration: 4, ease: "linear" } 
        },
      },
    },
  },

  borderBeam: {
    label: {
      initial: { y: 0, color: "var(--primary)" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        textShadow: "0 0 12px var(--primary)"
      },
    },
    input: {
      initial: {
        borderColor: "transparent",
        background: "rgb(255, 255, 255)",
      },
      animate: {
        borderColor: "transparent",
        background: "rgb(255, 255, 255)",
        boxShadow: "0 4px 20px rgba(59, 130, 246, 0.15)",
      },
    },
  },

  gradientBorder: {
    label: {
      initial: { y: 0, color: "var(--primary)" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    input: {
      initial: {
        border: "2px solid transparent",
        backgroundImage: `
          linear-gradient(white, white),
          linear-gradient(90deg, var(--primary), var(--primary), var(--primary))
        `,
        backgroundClip: "padding-box, border-box",
        backgroundOrigin: "padding-box, border-box",
        backgroundSize: "100% 100%, 300% 100%",
        backgroundPosition: "0 0, 100% 0",
      },
      animate: {
        backgroundPosition: ["0 0, 100% 0", "0 0, -100% 0"],
        boxShadow: "0 4px 15px rgba(59, 130, 246, 0.15)",
        transition: {
          backgroundPosition: { duration: 2, repeat: Infinity, ease: "linear" },
        },
      },
    },
  },

  ripple: {
    label: {
      initial: { y: 0, color: "var(--primary)" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    input: {
      initial: { borderColor: "rgb(226, 232, 240)" },
      animate: { 
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)"
      },
    },
  },

  materialFloat: {
    label: {
      initial: { y: 0, scale: 1, color: "#6b7280" },
      animate: {
        y: -32,
        scale: 0.85,
        color: "#3b82f6",
        transition: { type: "spring", stiffness: 300, damping: 20 },
      },
    },
    input: {
      initial: {
        borderWidth: "0 0 2px 0",
        borderRadius: "4px 4px 0 0",
        borderColor: "rgb(226, 232, 240)",
        background: "rgba(0, 0, 0, 0.04)",
      },
      animate: {
        borderColor: "var(--primary)",
        background: "var(--primary)",
        boxShadow: "0 2px 0 0 rgba(var(--primary), 0.4)",
        transition: { type: "spring", stiffness: 300, damping: 20 },
      },
    },
  },

  neonPulse: {
    label: {
      initial: { y: 0, color: "var(--primary)" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        textShadow: "0 0 15px var(--primary)"
      },
    },
    input: {
      initial: {
        boxShadow: "0 0 0 var(--primary)",
        borderColor: "rgb(226, 232, 240)",
      },
      animate: {
        boxShadow: [
          "0 0 8px var(--primary)",
          "0 0 16px var(--primary)",
          "0 0 24px var(--primary)",
          "0 0 8px var(--primary)",
        ],
        borderColor: "var(--primary)",
        transition: {
          boxShadow: { duration: 2.5, repeat: Infinity, ease: "easeInOut" },
        },
      },
    },
  },

  typewriterReveal: {
    label: {
      initial: { y: 0, opacity: 0, color: "var(--primary)" },
      animate: {
        y: -32,
        opacity: 1,
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 400, damping: 25 },
      },
    },
    input: {
      initial: { width: "0%" },
      animate: {
        width: "100%",
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: { duration: 0.8, ease: "easeOut" },
      },
    },
  },

  morphing: {
    label: {
      initial: { y: 0, borderRadius: "4px", color: "var(--primary)" },
      animate: { 
        y: -32, 
        borderRadius: "16px", 
        color: "var(--primary)",
        transition: { duration: 0.6, ease: "easeInOut" }
      },
    },
    input: {
      initial: { borderRadius: "12px" },
      animate: {
        borderRadius: ["12px", "20px", "12px"],
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: { 
          borderRadius: { repeat: Infinity, duration: 2.5, ease: "easeInOut" } 
        },
      },
    },
  },

  liquidBorder: {
    label: {
      initial: { y: 0, color: "var(--primary)" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    input: {
      initial: { borderRadius: "12px" },
      animate: {
        borderRadius: ["12px", "20px 8px 20px 8px", "8px 20px 8px 20px", "12px"],
        borderColor: "var(--primary)",
        boxShadow: "0 4px 15px var(--primary)",
        transition: { 
          borderRadius: { repeat: Infinity, duration: 3.5, ease: "easeInOut" } 
        },
      },
    },
  },

  particleField: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        textShadow: "0 0 12px var(--primary)"
      },
    },
    input: {
      initial: {
        borderColor: "var(--border)",
        boxShadow: "0 0 0 var(--primary)",
      },
      animate: {
        borderColor: "var(--primary)",
        boxShadow: "0 0 20px var(--primary)",
      },
    },
    extra: {
      initial: { opacity: 0 },
      animate: {
        opacity: 1,
        transition: { duration: 0.2 },
      },
    },
  },

    glassmorphism: {
    container: {
      initial: { backdropFilter: "blur(0px)" },
      animate: { backdropFilter: "blur(20px)" },
    },
    label: {
      initial: { y: 0, scale: 1, color: "var(--primary)" },
      animate: {
        y: -28,
        scale: 0.85,
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300 },
      },
    },
    input: {
      initial: {
        background: "rgba(255, 255, 255, 0.1)",
        borderColor: "rgba(255, 255, 255, 0.2)",
        backdropFilter: "blur(10px)",
      },
      animate: {
        background: "rgba(255, 255, 255, 0.15)",
        borderColor: "var(--primary)",
        backdropFilter: "blur(20px)",
        boxShadow: "0 8px 32px rgba(0, 0, 0, 0.1), inset 0 1px 0 rgba(255, 255, 255, 0.2)",
      },
    },
  },

  holographic3D: {
    container: {
      initial: { rotateX: 0, rotateY: 0 },
      animate: { rotateX: 2, rotateY: 2 },
    },
    label: {
      initial: { 
        y: 0, 
        scale: 1, 
        color: "var(--primary)",
        textShadow: "none"
      },
      animate: {
        y: -28,
        scale: 0.85,
        color: "#3b82f6",
        textShadow: "0 0 10px rgba(59, 130, 246, 0.5), 0 0 20px rgba(59, 130, 246, 0.3)",
      },
    },
    input: {
      initial: {
        borderColor: "var(--border)",
        boxShadow: "0 4px 6px var(--primary)",
      },
      animate: {
        borderColor: "var(--primary)",
        boxShadow: "0 0 20px var(--primary), 0 8px 16px var(--primary), inset 0 1px 0 var(--primary)",
        transform: "translateZ(10px)",
      },
    },
  },

  quantumParticles: {
    label: {
      initial: { y: 0, color: "var(--primary)" },
      animate: {
        y: -28,
        color: "var(--primary)",
        textShadow: "0 0 8px var(--primary)",
      },
    },
    input: {
      initial: { 
        borderColor: "rgb(226, 232, 240)",
        background: "linear-gradient(45deg, transparent 0%, rgba(139, 92, 246, 0.05) 50%, transparent 100%)"
      },
      animate: {
        borderColor: "var(--primary)",
        boxShadow: "0 0 20px var(--primary)",
        background: "linear-gradient(45deg, rgba(var(--primary), 0.05) 0%, rgba(236, 72, 153, 0.05) 50%, rgba(var(--primary), 0.05) 100%)",
      },
    },
    extra: {
      initial: {
        scale: 0,
        opacity: 0,
        rotate: 0,
      },
      animate: (i: number) => ({
        scale: [0, 1.5, 0],
        opacity: [0, 1, 0],
        rotate: [0, 180, 360],
        y: [-20, -80],
        x: [0, Math.sin(i) * 20],
        transition: {
          duration: 3,
          repeat: Infinity,
          delay: i,
          ease: "easeInOut",
        },
      }),
    },
  },

  premiumGlass: {
    container: {
      initial: { scale: 1 },
      animate: { 
        scale: 1.01,
        transition: { type: "spring", stiffness: 300 }
      },
    },
    label: {
      initial: { 
        y: 0, 
        scale: 1, 
        color: "#6b7280",
        filter: "blur(0px)"
      },
      animate: {
        y: -28,
        scale: 0.85,
        color: "#3b82f6",
        filter: "blur(0px) drop-shadow(0 0 8px rgba(59, 130, 246, 0.5))",
      },
    },
    input: {
      initial: {
        background: "rgba(255, 255, 255, 0.05)",
        borderColor: "rgba(255, 255, 255, 0.1)",
        backdropFilter: "blur(5px)",
      },
      animate: {
        background: "rgba(255, 255, 255, 0.1)",
        borderColor: "rgba(59, 130, 246, 0.4)",
        backdropFilter: "blur(20px)",
        boxShadow: `
          0 8px 32px rgba(0, 0, 0, 0.12),
          inset 0 1px 0 rgba(255, 255, 255, 0.3),
          inset 0 -1px 0 rgba(0, 0, 0, 0.1),
          0 0 0 1px rgba(59, 130, 246, 0.2)
        `,
      },
    },
  },

  luxuryShimmer: {
    label: {
      initial: { 
        y: 0, 
        scale: 1, 
        color: "#6b7280",
        backgroundImage: "none"
      },
      animate: {
        y: -28,
        scale: 0.85,
        backgroundImage: "linear-gradient(90deg, #3b82f6, #8b5cf6, #3b82f6)",
        backgroundSize: "200% 100%",
        backgroundClip: "text",
        color: "transparent",
        animation: "shimmer 2s linear infinite",
      },
    },
    input: {
      initial: {
        borderColor: "rgb(226, 232, 240)",
        background: "linear-gradient(90deg, #ffffff, #ffffff)",
      },
      animate: {
        borderColor: "rgb(59, 130, 246)",
        background: "linear-gradient(90deg, #ffffff, #f8fafc, #ffffff)",
        boxShadow: `
          0 4px 12px rgba(59, 130, 246, 0.15),
          0 0 0 1px rgba(59, 130, 246, 0.1),
          inset 0 1px 0 rgba(255, 255, 255, 0.8)
        `,
      },
    },
  },

  materialRipple: {
    label: {
      initial: { y: 0, scale: 1, color: "#6b7280" },
      animate: {
        y: -28,
        scale: 0.85,
        color: "#3b82f6",
        transition: { type: "spring", stiffness: 400, damping: 25 },
      },
    },
    input: {
      initial: {
        borderWidth: "0 0 2px 0",
        borderRadius: "4px 4px 0 0",
        borderColor: "rgb(226, 232, 240)",
        background: "rgba(0, 0, 0, 0.04)",
      },
      animate: {
        borderColor: "rgb(59, 130, 246)",
        background: "rgba(59, 130, 246, 0.04)",
        boxShadow: "0 2px 0 0 rgba(59, 130, 246, 0.3)",
      },
    },
  },

  cosmicField: {
    container: {
      initial: { 
        background: "transparent",
      },
      animate: {
        background: "radial-gradient(ellipse at center, rgba(139, 92, 246, 0.1) 0%, transparent 50%)",
      },
    },
    label: {
      initial: { 
        y: 0, 
        scale: 1, 
        color: "#6b7280",
        filter: "hue-rotate(0deg)"
      },
      animate: {
        y: -28,
        scale: 0.85,
        color: "#8b5cf6",
        filter: "hue-rotate(360deg)",
        transition: { 
          filter: { duration: 3, repeat: Infinity, ease: "linear" }
        },
      },
    },
    input: {
      initial: {
        borderColor: "rgba(139, 92, 246, 0.2)",
        background: "radial-gradient(ellipse at center, rgba(139, 92, 246, 0.05) 0%, transparent 50%)",
      },
      animate: {
        borderColor: "rgba(139, 92, 246, 0.6)",
        background: "radial-gradient(ellipse at center, rgba(139, 92, 246, 0.1) 0%, rgba(236, 72, 153, 0.05) 50%, transparent 100%)",
        boxShadow: "0 0 30px rgba(139, 92, 246, 0.3), inset 0 0 20px rgba(139, 92, 246, 0.1)",
      },
    },
  },
  
  premiumGradient: {
    label: {
      initial: { 
        y: 0, 
        scale: 1,
        backgroundImage: "linear-gradient(90deg, #6b7280, #6b7280)",
        backgroundClip: "text",
        color: "transparent"
      },
      animate: {
        y: -28,
        scale: 0.85,
        backgroundImage: "linear-gradient(90deg, #3b82f6, #8b5cf6, #ec4899, #3b82f6)",
        backgroundSize: "300% 100%",
        backgroundPosition: "0% 50%",
        animation: "gradientShift 3s ease infinite",
      },
    },
    input: {
      initial: {
        background: "linear-gradient(90deg, #ffffff, #ffffff)",
        borderColor: "rgb(226, 232, 240)",
      },
      animate: {
        background: "linear-gradient(135deg, #ffffff 0%, #f8fafc 50%, #ffffff 100%)",
        borderColor: "rgb(59, 130, 246)",
        boxShadow: `
          0 8px 25px rgba(59, 130, 246, 0.15),
          0 0 0 1px rgba(59, 130, 246, 0.1),
          inset 0 1px 0 rgba(255, 255, 255, 0.9)
        `,
      },
    },
  },

};

export default AnimatedInput;



================================================
File: src/components/UI/magic-bento/index.tsx
================================================
import React, { useRef, useEffect, useState, useCallback } from "react";
import { gsap } from "gsap"
import { showcaseComponents } from "./showcase-components";


export interface BentoCardProps {
  color?: string;
  title?: string;
  description?: string;
  label?: string;
  textAutoHide?: boolean;
  disableAnimations?: boolean;
}

export interface BentoProps {
  // Interactive component props
  sliderValue?: number;
  onSliderChange?: (value: number) => void;
  isSwitchOn?: boolean;
  onSwitchToggle?: (checked: boolean) => void;
  buttonText?: string;
  onButtonClick?: () => void;
  badgeCount?: number;
  onBadgeIncrement?: () => void;
  currentStep?: number;
  onStepClick?: (step: number) => void;
  
  // Existing props
  textAutoHide?: boolean;
  enableStars?: boolean;
  enableSpotlight?: boolean;
  enableBorderGlow?: boolean;
  disableAnimations?: boolean;
  spotlightRadius?: number;
  particleCount?: number;
  enableTilt?: boolean;
  glowColor?: string;
  clickEffect?: boolean;
  enableMagnetism?: boolean;
}

const DEFAULT_PARTICLE_COUNT = 12;
const DEFAULT_SPOTLIGHT_RADIUS = 300;
const DEFAULT_GLOW_COLOR = "255, 0, 0";
const MOBILE_BREAKPOINT = 768;

const createParticleElement = (
  x: number,
  y: number,
  color: string = DEFAULT_GLOW_COLOR
): HTMLDivElement => {
  const el = document.createElement("div");
  el.className = "particle";
  el.style.cssText = `
    position: absolute;
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background: rgba(${color}, 1);
    box-shadow: 0 0 6px rgba(${color}, 0.6);
    pointer-events: none;
    z-index: 100;
    left: ${x}px;
    top: ${y}px;
  `;
  return el;
};

const calculateSpotlightValues = (radius: number) => ({
  proximity: radius * 0.5,
  fadeDistance: radius * 0.75,
});

const updateCardGlowProperties = (
  card: HTMLElement,
  mouseX: number,
  mouseY: number,
  glow: number,
  radius: number
) => {
  const rect = card.getBoundingClientRect();
  const relativeX = ((mouseX - rect.left) / rect.width) * 100;
  const relativeY = ((mouseY - rect.top) / rect.height) * 100;

  card.style.setProperty("--glow-x", `${relativeX}%`);
  card.style.setProperty("--glow-y", `${relativeY}%`);
  card.style.setProperty("--glow-intensity", glow.toString());
  card.style.setProperty("--glow-radius", `${radius}px`);
};

const ParticleCard: React.FC<{
  children: React.ReactNode;
  className?: string;
  disableAnimations?: boolean;
  style?: React.CSSProperties;
  particleCount?: number;
  glowColor?: string;
  enableTilt?: boolean;
  clickEffect?: boolean;
  enableMagnetism?: boolean;
}> = ({
  children,
  className = "",
  disableAnimations = false,
  style,
  particleCount = DEFAULT_PARTICLE_COUNT,
  glowColor = DEFAULT_GLOW_COLOR,
  enableTilt = true,
  clickEffect = false,
  enableMagnetism = false,
}) => {
  const cardRef = useRef<HTMLDivElement>(null);
  const particlesRef = useRef<HTMLDivElement[]>([]);
  const timeoutsRef = useRef<NodeJS.Timeout[]>([]);
  const isHoveredRef = useRef(false);
  const memoizedParticles = useRef<HTMLDivElement[]>([]);
  const particlesInitialized = useRef(false);
  const magnetismAnimationRef = useRef<gsap.core.Tween | null>(null);

  const initializeParticles = useCallback(() => {
    if (particlesInitialized.current || !cardRef.current) return;

    const { width, height } = cardRef.current.getBoundingClientRect();
    memoizedParticles.current = Array.from({ length: particleCount }, () =>
      createParticleElement(
        Math.random() * width,
        Math.random() * height,
        glowColor
      )
    );
    particlesInitialized.current = true;
  }, [particleCount, glowColor]);

  const clearAllParticles = useCallback(() => {
    timeoutsRef.current.forEach(clearTimeout);
    timeoutsRef.current = [];
    magnetismAnimationRef.current?.kill();

    particlesRef.current.forEach((particle) => {
      gsap.to(particle, {
        scale: 0,
        opacity: 0,
        duration: 0.3,
        ease: "back.in(1.7)",
        onComplete: () => {
          particle.parentNode?.removeChild(particle);
        },
      });
    });
    particlesRef.current = [];
  }, []);

  const animateParticles = useCallback(() => {
    if (!cardRef.current || !isHoveredRef.current) return;

    if (!particlesInitialized.current) {
      initializeParticles();
    }

    memoizedParticles.current.forEach((particle, index) => {
      const timeoutId = setTimeout(() => {
        if (!isHoveredRef.current || !cardRef.current) return;

        const clone = particle.cloneNode(true) as HTMLDivElement;
        cardRef.current.appendChild(clone);
        particlesRef.current.push(clone);

        gsap.fromTo(
          clone,
          { scale: 0, opacity: 0 },
          { scale: 1, opacity: 1, duration: 0.3, ease: "back.out(1.7)" }
        );

        gsap.to(clone, {
          x: (Math.random() - 0.5) * 100,
          y: (Math.random() - 0.5) * 100,
          rotation: Math.random() * 360,
          duration: 2 + Math.random() * 2,
          ease: "none",
          repeat: -1,
          yoyo: true,
        });

        gsap.to(clone, {
          opacity: 0.3,
          duration: 1.5,
          ease: "power2.inOut",
          repeat: -1,
          yoyo: true,
        });
      }, index * 100);

      timeoutsRef.current.push(timeoutId);
    });
  }, [initializeParticles]);

  useEffect(() => {
    if (disableAnimations || !cardRef.current) return;

    const element = cardRef.current;

    const handleMouseEnter = () => {
      isHoveredRef.current = true;
      animateParticles();

      if (enableTilt) {
        gsap.to(element, {
          rotateX: 5,
          rotateY: 5,
          duration: 0.3,
          ease: "power2.out",
          transformPerspective: 1000,
        });
      }
    };

    const handleMouseLeave = () => {
      isHoveredRef.current = false;
      clearAllParticles();

      if (enableTilt) {
        gsap.to(element, {
          rotateX: 0,
          rotateY: 0,
          duration: 0.3,
          ease: "power2.out",
        });
      }

      if (enableMagnetism) {
        gsap.to(element, {
          x: 0,
          y: 0,
          duration: 0.3,
          ease: "power2.out",
        });
      }
    };

    const handleMouseMove = (e: MouseEvent) => {
      if (!enableTilt && !enableMagnetism) return;

      const rect = element.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const centerX = rect.width / 2;
      const centerY = rect.height / 2;

      if (enableTilt) {
        const rotateX = ((y - centerY) / centerY) * -10;
        const rotateY = ((x - centerX) / centerX) * 10;

        gsap.to(element, {
          rotateX,
          rotateY,
          duration: 0.1,
          ease: "power2.out",
          transformPerspective: 1000,
        });
      }

      if (enableMagnetism) {
        const magnetX = (x - centerX) * 0.05;
        const magnetY = (y - centerY) * 0.05;

        magnetismAnimationRef.current = gsap.to(element, {
          x: magnetX,
          y: magnetY,
          duration: 0.3,
          ease: "power2.out",
        });
      }
    };

    const handleClick = (e: MouseEvent) => {
      if (!clickEffect) return;

      const rect = element.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;

      const maxDistance = Math.max(
        Math.hypot(x, y),
        Math.hypot(x - rect.width, y),
        Math.hypot(x, y - rect.height),
        Math.hypot(x - rect.width, y - rect.height)
      );

      const ripple = document.createElement("div");
      ripple.style.cssText = `
        position: absolute;
        width: ${maxDistance * 2}px;
        height: ${maxDistance * 2}px;
        border-radius: 50%;
        background: radial-gradient(circle, rgba(${glowColor}, 0.4) 0%, rgba(${glowColor}, 0.2) 30%, transparent 70%);
        left: ${x - maxDistance}px;
        top: ${y - maxDistance}px;
        pointer-events: none;
        z-index: 1000;
      `;

      element.appendChild(ripple);

      gsap.fromTo(
        ripple,
        {
          scale: 0,
          opacity: 1,
        },
        {
          scale: 1,
          opacity: 0,
          duration: 0.8,
          ease: "power2.out",
          onComplete: () => ripple.remove(),
        }
      );
    };

    element.addEventListener("mouseenter", handleMouseEnter);
    element.addEventListener("mouseleave", handleMouseLeave);
    element.addEventListener("mousemove", handleMouseMove);
    element.addEventListener("click", handleClick);

    return () => {
      isHoveredRef.current = false;
      element.removeEventListener("mouseenter", handleMouseEnter);
      element.removeEventListener("mouseleave", handleMouseLeave);
      element.removeEventListener("mousemove", handleMouseMove);
      element.removeEventListener("click", handleClick);
      clearAllParticles();
    };
  }, [
    animateParticles,
    clearAllParticles,
    disableAnimations,
    enableTilt,
    enableMagnetism,
    clickEffect,
    glowColor,
  ]);

  return (
    <div
      ref={cardRef}
      className={`${className} relative overflow-hidden`}
      style={{ ...style, position: "relative", overflow: "hidden" }}
    >
      {children}
    </div>
  );
};

const GlobalSpotlight: React.FC<{
  gridRef: React.RefObject<HTMLDivElement | null>;
  disableAnimations?: boolean;
  enabled?: boolean;
  spotlightRadius?: number;
  glowColor?: string;
}> = ({
  gridRef,
  disableAnimations = false,
  enabled = true,
  spotlightRadius = DEFAULT_SPOTLIGHT_RADIUS,
  glowColor = DEFAULT_GLOW_COLOR,
}) => {
  const spotlightRef = useRef<HTMLDivElement | null>(null);
  const isInsideSection = useRef(false);

  useEffect(() => {
    if (disableAnimations || !gridRef?.current || !enabled) return;

    const spotlight = document.createElement("div");
    spotlight.className = "global-spotlight";
    spotlight.style.cssText = `
      position: fixed;
      width: 800px;
      height: 800px;
      border-radius: 50%;
      pointer-events: none;
      background: radial-gradient(circle,
        rgba(${glowColor}, 0.15) 0%,
        rgba(${glowColor}, 0.08) 15%,
        rgba(${glowColor}, 0.04) 25%,
        rgba(${glowColor}, 0.02) 40%,
        rgba(${glowColor}, 0.01) 65%,
        transparent 70%
      );
      z-index: 200;
      opacity: 0;
      transform: translate(-50%, -50%);
      mix-blend-mode: screen;
    `;
    document.body.appendChild(spotlight);
    spotlightRef.current = spotlight;

    const handleMouseMove = (e: MouseEvent) => {
      if (!spotlightRef.current || !gridRef.current) return;

      const section = gridRef.current.closest(".bento-section");
      const rect = section?.getBoundingClientRect();
      const mouseInside =
        rect &&
        e.clientX >= rect.left &&
        e.clientX <= rect.right &&
        e.clientY >= rect.top &&
        e.clientY <= rect.bottom;

      isInsideSection.current = mouseInside || false;
      const cards = gridRef.current.querySelectorAll(".card");

      if (!mouseInside) {
        gsap.to(spotlightRef.current, {
          opacity: 0,
          duration: 0.3,
          ease: "power2.out",
        });
        cards.forEach((card) => {
          (card as HTMLElement).style.setProperty("--glow-intensity", "0");
        });
        return;
      }

      const { proximity, fadeDistance } =
        calculateSpotlightValues(spotlightRadius);
      let minDistance = Infinity;

      cards.forEach((card) => {
        const cardElement = card as HTMLElement;
        const cardRect = cardElement.getBoundingClientRect();
        const centerX = cardRect.left + cardRect.width / 2;
        const centerY = cardRect.top + cardRect.height / 2;
        const distance =
          Math.hypot(e.clientX - centerX, e.clientY - centerY) -
          Math.max(cardRect.width, cardRect.height) / 2;
        const effectiveDistance = Math.max(0, distance);

        minDistance = Math.min(minDistance, effectiveDistance);

        let glowIntensity = 0;
        if (effectiveDistance <= proximity) {
          glowIntensity = 1;
        } else if (effectiveDistance <= fadeDistance) {
          glowIntensity =
            (fadeDistance - effectiveDistance) / (fadeDistance - proximity);
        }

        updateCardGlowProperties(
          cardElement,
          e.clientX,
          e.clientY,
          glowIntensity,
          spotlightRadius
        );
      });

      gsap.to(spotlightRef.current, {
        left: e.clientX,
        top: e.clientY,
        duration: 0.1,
        ease: "power2.out",
      });

      const targetOpacity =
        minDistance <= proximity
          ? 0.8
          : minDistance <= fadeDistance
            ? ((fadeDistance - minDistance) / (fadeDistance - proximity)) * 0.8
            : 0;

      gsap.to(spotlightRef.current, {
        opacity: targetOpacity,
        duration: targetOpacity > 0 ? 0.2 : 0.5,
        ease: "power2.out",
      });
    };

    const handleMouseLeave = () => {
      isInsideSection.current = false;
      gridRef.current?.querySelectorAll(".card").forEach((card) => {
        (card as HTMLElement).style.setProperty("--glow-intensity", "0");
      });
      if (spotlightRef.current) {
        gsap.to(spotlightRef.current, {
          opacity: 0,
          duration: 0.3,
          ease: "power2.out",
        });
      }
    };

    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseleave", handleMouseLeave);

    return () => {
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("mouseleave", handleMouseLeave);
      spotlightRef.current?.parentNode?.removeChild(spotlightRef.current);
    };
  }, [gridRef, disableAnimations, enabled, spotlightRadius, glowColor]);

  return null;
};

const BentoCardGrid: React.FC<{
    children: React.ReactNode;
    gridRef?: React.RefObject<HTMLDivElement | null>;
  }> = ({ children, gridRef }) => (
    <div
      className="bento-section w-full max-w-none select-none relative"
      style={{ fontSize: "clamp(1rem, 0.9rem + 0.5vw, 1.5rem)" }}
      ref={gridRef}
    >
      {children}
    </div>
  );
  

const useMobileDetection = () => {
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkMobile = () =>
      setIsMobile(window.innerWidth <= MOBILE_BREAKPOINT);

    checkMobile();
    window.addEventListener("resize", checkMobile);

    return () => window.removeEventListener("resize", checkMobile);
  }, []);

  return isMobile;
};

const MagicBento: React.FC<BentoProps> = ({
    // Interactive props
    sliderValue,
    onSliderChange,
    isSwitchOn,
    onSwitchToggle,
    buttonText,
    onButtonClick,
    badgeCount,
    onBadgeIncrement,
    currentStep,
    onStepClick,
    
    // Existing props
    enableSpotlight = true,
    enableBorderGlow = true,
    disableAnimations = false,
    spotlightRadius = DEFAULT_SPOTLIGHT_RADIUS,
    particleCount = DEFAULT_PARTICLE_COUNT,
    enableTilt = false,
    glowColor = DEFAULT_GLOW_COLOR,
    clickEffect = true,
    enableMagnetism = true,
  }) => {
    const gridRef = useRef<HTMLDivElement>(null);
    const isMobile = useMobileDetection();
    const shouldDisableAnimations = disableAnimations || isMobile;
  
    return (
      <>
        <style>
          {`
            .bento-section {
              --glow-x: 50%;
              --glow-y: 50%;
              --glow-intensity: 0;
              --glow-radius: 200px;
              --glow-color: ${glowColor};
              --border-color: transparent;
              --purple-primary: rgba(${glowColor}, 1);
              --purple-glow: rgba(${glowColor}, 0.2);
              --purple-border: rgba(${glowColor}, 0.8);
              width: 100%;
              padding: 0;
            }
            
            .card-responsive {
              display: grid;
              grid-template-columns: repeat(6, 1fr);
              grid-auto-rows: 120px;
              gap: 0.75rem;
              width: 100%;
              grid-auto-flow: dense;
              grid-column: span 2;
              grid-row: span 2;
            }
            
            
            /* Brick layout patterns - different sizes */
            .card:nth-child(even) {
              grid-column: span 2;
              grid-row: span 2;
            }
            
            .card:nth-child(odd) {
              grid-column: span 2;
              grid-row: span 2;
            }
            
            /* Mobile responsive - smaller cards */
            @media (max-width: 767px) {
              .card-responsive {
                grid-template-columns: repeat(6, 1fr);
              }
              
              .card:nth-child(odd) {
                grid-column: span 2;
                grid-row: span 2;
              }
              
              .card:nth-child(even) {
                grid-column: span 2;
                grid-row: span 2;
              }
            }
            
            .card {
              width: 100%;
              height: 100%;
              background: rgba(255, 255, 255, 0.05);
              backdrop-filter: blur(12px);
              -webkit-backdrop-filter: blur(12px);
              border: 2px solid rgba(255, 255, 255, 0.1);
              box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
              transition: all 0.3s ease;
            }
            
            .card:hover {
              background: rgba(255, 255, 255, 0.08);
              transform: translateY(-2px);
              box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
            }
            
            .card--border-glow::after {
              content: '';
              position: absolute;
              inset: 0;
              padding: 6px;
              background: radial-gradient(var(--glow-radius) circle at var(--glow-x) var(--glow-y),
                  rgba(${glowColor}, calc(var(--glow-intensity) * 0.8)) 0%,
                  rgba(${glowColor}, calc(var(--glow-intensity) * 0.4)) 30%,
                  transparent 60%);
              border-radius: inherit;
              mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
              mask-composite: subtract;
              -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
              -webkit-mask-composite: xor;
              pointer-events: none;
              transition: opacity 0.3s ease;
              z-index: 1;
            }
            
            .card--border-glow:hover::after {
              opacity: 1;
            }
            
            .card--border-glow:hover {
              box-shadow: 0 4px 20px rgba(46, 24, 78, 0.4), 0 0 30px rgba(${glowColor}, 0.2);
            }
            
            .particle::before {
              content: '';
              position: absolute;
              top: -2px;
              left: -2px;
              right: -2px;
              bottom: -2px;
              background: rgba(${glowColor}, 0.2);
              border-radius: 50%;
              z-index: -1;
            }
            
            .particle-container:hover {
              box-shadow: 0 4px 20px rgba(46, 24, 78, 0.2), 0 0 30px rgba(${glowColor}, 0.2);
            }
          `}
        </style>
  
        {enableSpotlight && (
          <GlobalSpotlight
            gridRef={gridRef}
            disableAnimations={shouldDisableAnimations}
            enabled={enableSpotlight}
            spotlightRadius={spotlightRadius}
            glowColor={glowColor}
          />
        )}
  
        <BentoCardGrid gridRef={gridRef}>
          <div className="card-responsive">
            {showcaseComponents.map((demo, index) => {
              const baseClassName =
                `card flex items-center justify-center relative w-full h-full
                  rounded-[12px] overflow-hidden font-light 
                  transition-all duration-300 ease-in-out` +
                (enableBorderGlow ? " card--border-glow" : "");
  
              const cardStyle = {
                borderColor: "rgba(61, 19, 19, 0.14)",
                color: "var(--white)",
                "--glow-x": "50%",
                "--glow-y": "50%",
                "--glow-intensity": "0",
                "--glow-radius": "200px",
              } as React.CSSProperties;
  
              return (
                <ParticleCard
                  key={index}
                  className={baseClassName}
                  style={cardStyle}
                  disableAnimations={shouldDisableAnimations}
                  particleCount={particleCount}
                  glowColor={glowColor}
                  enableTilt={enableTilt}
                  clickEffect={clickEffect}
                  enableMagnetism={enableMagnetism}
                >
                  <div className="w-full h-full flex items-center justify-center p-4">
                    {typeof demo.demo === 'function' ? (
                      // For components that accept props
                      demo.demo({
                        sliderValue,
                        onSliderChange,
                        isSwitchOn,
                        onSwitchToggle,
                        buttonText,
                        onButtonClick,
                        count: badgeCount,
                        onIncrement: onBadgeIncrement,
                        currentStep,
                        onStepClick,
                      })
                    ) : (
                      // For static components
                      demo.demo
                    )}
                  </div>
                </ParticleCard>
              );
            })}
          </div>
        </BentoCardGrid>
      </>
    );
  };
  

export default MagicBento;



================================================
File: src/components/UI/magic-bento/showcase-components.tsx
================================================
import { Slider } from '../slider';
import { Switch } from '../switch';
import { Button } from '../button';
import { Spinner } from '../spinner';
import {ChevronRight } from 'lucide-react';
import { Breadcrumbs } from '../breadcrumbs';


export const showcaseComponents = [
  {
    id: 'themed-slider',
    title: 'Interactive Slider',
    description: 'Smooth value transitions',
    size: 'medium',
    demo: ({
      sliderValue = 75,
    }: {
      sliderValue?: number;
    } = {}) => (
      <div className="w-3/4 flex flex-col gap-4">
        <Slider 
          value={[sliderValue]} 
          max={100} 
          variant="default" 
          animationType="breathe" 
          showValue 
        />
      </div>
    ),
  },
  {
    id: 'square-switch',
    title: 'Animated Switches',
    description: 'Satisfying toggle animations',
    size: 'medium',
    demo: ({
      isChecked = true,
    }: {
      isChecked?: boolean;
    } = {}) => (
      <div className="flex items-center justify-center w-[200%] gap-4">
        <Switch 
          variant="square" 
          animation="bounce" 
          checked={isChecked} 
          onCheckedChange={() => {console.log('Switch toggled')}} 
        />
        {/* <Switch 
          variant="ios" 
          animation="jelly" 
          checked={isChecked} 
          onCheckedChange={onToggle}
        /> */}
      </div>
    ),
  },
  {
    id: 'interactive-buttons',
    title: 'Interactive Buttons',
    description: 'Try hovering and clicking',
    size: 'medium',
    demo: ({
      buttonText = 'Click Me!',
    }: {
      buttonText?: string;
    } = {}) => (
      <div className="flex flex-col gap-4 items-center justify-center h-full w-full">
        <div className="flex gap-3">
          <Button 
            variant="default" 
            animationVariant="wobble"
          >
            {buttonText}
          </Button>
        </div>
      </div>
    ),
  },
  // {
  //   id: 'badge',
  //   title: 'Animated Badge',
  //   description: 'Notification that catches attention',
  //   size: 'small',
  //   demo: ({
  //     count = 3,
  //     onIncrement = () => {}
  //   }: {
  //     count?: number;
  //     onIncrement?: () => void;
  //   } = {}) => (
  //     <div className="flex items-center justify-center h-full">
  //       <Tooltip content="You have new notifications!" animation="slideUp">
  //         <div className="relative inline-flex items-center cursor-pointer" onClick={onIncrement}>
  //           <Mail className="h-8 w-8 text-gray-400 hover:text-primary transition-colors" />
  //           <Badge 
  //             text={String(count)} 
  //             type="primary" 
  //             variant="bounce" 
  //             className="absolute -top-2 -right-2 w-6 h-6 flex items-center justify-center"
  //           />
  //         </div>
  //       </Tooltip>
  //     </div>
  //   ),
  // },
  {
    id: 'breadcrumbs',
    title: 'Interactive Steps',
    description: 'Track your progress',
    size: 'medium',
    demo: ({
      currentStep = 0,
    }: {
      currentStep?: number;
    } = {}) => (
      <div className="w-full px-4">
        <Breadcrumbs
          steps={['Start', 'In Progress', 'Review', 'Complete']}
          currentStep={currentStep}
          separatorIcon={ChevronRight}
          variant="step"
          className="cursor-pointer"
        />
      </div>
    ),
  },
  {
    id: 'spinner',
    title: 'Variant-rich Spinners',
    description: 'Buttons for every occasion',
    size: 'medium',
    demo: (
      <div className="flex flex-col gap-4 items-center justify-center h-full">
        <Spinner size={40} color="border-primary" />
      </div>
    ),
  },
  {
    id: 'ios-switch',
    title: 'IOS Switches',
    description: 'Satisfying toggle animations',
    size: 'medium',
    demo: (
      <div className="flex items-center justify-center gap-6 h-full m-14">
        <Switch variant="ios" animation="bounce" checked />
      </div>
    ),
  },
  {
    id: 'retro-slider',
    title: 'Retro Sliders',
    description: 'From minimal to cyberpunk',
    size: 'medium',
    demo: (
      <div className="w-3/4 flex flex-col gap-4">
        <Slider defaultValue={[50]} max={100} variant="retro" showValue />
      </div>
    ),
  },
  {
    id: 'variant-buttons',
    title: 'Variant-rich Buttons',
    description: 'Buttons for every occasion',
    size: 'medium',
    demo: (
      <div className="flex flex-col gap-4 items-center justify-center h-full">
        <Button variant="default" animationVariant="bounceJelly">
          Bouncy
        </Button>
      </div>
    ),
  },
  // {
  //   id: 'material-switch',
  //   title: 'Material Switches',
  //   description: 'Satisfying toggle animations',
  //   size: 'medium',
  //   demo: (
  //     <div className="flex items-center justify-center gap-6 h-full m-14">
  //       <Switch variant="large" animation="jelly" checked />
  //     </div>
  //   ),
  // },
];



================================================
File: src/components/UI/navbar/index.tsx
================================================
"use client";

import { motion, HTMLMotionProps, AnimatePresence } from "framer-motion";
import * as React from "react";
import { cva, VariantProps } from "class-variance-authority";
import { cn } from "../../../utils/cn";
import { ChevronDown, ChevronUp } from "lucide-react";

export interface NavbarProps
  extends Omit<HTMLMotionProps<"nav">, "ref">,
    VariantProps<typeof navbarVariants> {
  animationType?:
    | "slide"
    | "glow"
    | "basic"
    | "spotlight"
    | "hoverSubmenu"
    | "clickSubmenu";
  direction?: "horizontal" | "vertical";
  children?: React.ReactNode;
  submenuContent?: React.ReactNode;
  header?: string;
}

const navbarVariants = cva(
  "flex items-center justify-between px-4 py-3 shadow-md transition-all",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        dark: "bg-card text-card-foreground",
        transparent: "bg-transparent text-transparent",
        glass: "bg-white/10 backdrop-blur-lg text-[var(--color-navbar-glass-text)]",
        gradient:
          "bg-gradient-to-r from-[var(--color-navbar-gradient-from)] to-[var(--color-navbar-gradient-to)] text-white",
        primary: "bg-primary text-primary-foreground",
      },
      size: {
        sm: "h-12",
        md: "h-16",
        lg: "h-20",
        xl: "h-24",
      },
      weight: {
        light: "font-light",
        normal: "font-normal",
        medium: "font-medium",
        semibold: "font-semibold",
        bold: "font-bold",
      },
      align: {
        left: "text-left",
        center: "text-center",
        right: "text-right",
      },
      textColor: {
        default: "text-foreground",
        muted: "text-muted-foreground",
        primary: "text-primary",
        secondary: "text-secondary",
        accent: "text-accent",
        white: "text-white",
      },
      direction: {
        horizontal: "flex-row",
        vertical: "flex-col items-start space-y-4 p-4",
      },
    },
    defaultVariants: {
      weight: "semibold",
      align: "left",
      direction: "horizontal",
    },
  }
);

// Improved submenu animation with subtle y translation and opacity fades
const submenuVariants = {
  hidden: { opacity: 0, y: -8 },
  visible: { opacity: 1, y: 0 },
  exit: { opacity: 0, y: -8 },
};

// Refined animation variants, no infinite loops, smoother springs & easing
const animationVariants: Record<string, Partial<HTMLMotionProps<"nav">>> = {
  slide: {
    initial: { y: -40, opacity: 0 },
    animate: { y: 0, opacity: 1 },
    exit: { y: -40, opacity: 0 },
    transition: { duration: 0.5, ease: [0.4, 0, 0.2, 1] },
  },
  glow: {
    whileHover: {
      boxShadow: "0 0 12px 4px var(--primary)",
      transition: { duration: 0.4, ease: "easeInOut" },
    },
  },
  basic: {
    initial: { opacity: 1 },
    animate: { opacity: 1 },
    transition: { duration: 0.3 },
  },
  spotlight: {
    whileHover: {
      scale: 1.1,
      transition: { duration: 0.3, ease: "easeOut" },
    },
  },
  hoverSubmenu: {
    initial: { y: 0, opacity: 1 },
    animate: { y: 0, opacity: 1 },
    transition: { duration: 0.3 },
  },
  clickSubmenu: {
    initial: { y: 0, opacity: 1 },
    animate: { y: 0, opacity: 1 },
    transition: { duration: 0.3 },
  },
};

const Navbar: React.FC<NavbarProps> = ({
  className,
  variant,
  size,
  direction = "horizontal",
  children,
  animationType = "slide",
  submenuContent,
  header,
  ...props
}) => {
  const animation = animationVariants[animationType] || {};
  const [, setIsHovered] = React.useState(false); // unused but kept for API compatibility
  const [hovered, setHovered] = React.useState(false);
  direction =
    animationType === "hoverSubmenu" || animationType === "clickSubmenu"
      ? "vertical"
      : direction;
  const [clicked, setClicked] = React.useState(false);

  const handleToggle = (e: React.MouseEvent) => {
    // Only toggle if clicking on the header area or chevron
    const target = e.target as HTMLElement;
    if (
      animationType === "clickSubmenu" &&
      (target.closest('.navbar-header') || target.closest('.navbar-chevron'))
    ) {
      e.stopPropagation();
      setClicked((prev) => !prev);
    }
  };

  const showSubmenu =
    (animationType === "hoverSubmenu" && hovered) ||
    (animationType === "clickSubmenu" && clicked);

  return (
    <motion.nav
      className={cn(
        navbarVariants({ variant, size, direction }),
        "[&_input]:text-black [&_input]:border [&_input]:border-gray-300 [&_input]:rounded [&_input]:px-2 [&_input]:py-1 relative",
        className,
        {
          'overflow-visible': showSubmenu,
          'z-50': showSubmenu
        }
      )}
      {...animation}
      {...props}
      onMouseEnter={() => {
        setIsHovered(true);
        if (animationType === "hoverSubmenu") setHovered(true);
      }}
      onMouseLeave={() => {
        setIsHovered(false);
        if (animationType === "hoverSubmenu") setHovered(false);
      }}
      onClick={handleToggle}
    >
      {(animationType === "spotlight" || animationType === "basic") &&
        React.Children.map(children, (child) => {
          if (React.isValidElement(child)) {
            return (
              <motion.div
                whileHover={
                  animationType === "spotlight"
                    ? {
                        scale: 1.1,
                        background:
                          "radial-gradient(circle, rgba(255,255,255,0.2) 0%, rgba(0,0,0,0) 80%)",
                        transition: { duration: 0.3 },
                      }
                    : { scale: 1.05, transition: { duration: 0.3 } }
                }
                className={
                  animationType === "spotlight"
                    ? "rounded-full p-3"
                    : "flex items-center space-x-2 p-3"
                }
              >
                {child}
              </motion.div>
            );
          }
          return null;
        })}
      {(animationType === "hoverSubmenu" ||
        animationType === "clickSubmenu") && (
        <>
          <div className="flex justify-between w-full space-x-2">
            <span className="text-lg font-bold float-left navbar-header cursor-pointer">{header}</span>
            {showSubmenu ? (
              <span className="float-right navbar-chevron cursor-pointer">
                <ChevronUp size={20} />
              </span>
            ) : (
              <span className="float-right navbar-chevron cursor-pointer">
                <ChevronDown size={20} />
              </span>
            )}
          </div>
          <AnimatePresence>
            {showSubmenu && (
              <motion.div
                key="hoverMenu"
                initial="hidden"
                animate="visible"
                exit="exit"
                variants={submenuVariants}
                transition={{ duration: 0.3, ease: "easeInOut" }}
                className={cn(
                  "absolute left-0 right-0 bg-background w-full px-6 py-4 border-t shadow-lg z-50",
                  direction === "horizontal" ? "top-full" : "top-0 mt-12",
                  variant === "dark" ? "bg-card text-card-foreground" : "",
                  variant === "primary"
                    ? "bg-primary text-primary-foreground"
                    : ""
                )}
              >
                {submenuContent}
              </motion.div>
            )}
          </AnimatePresence>
        </>
      )}
      {!["hoverSubmenu", "clickSubmenu", "spotlight", "basic"].includes(
        animationType
      ) && children}
    </motion.nav>
  );
};

Navbar.displayName = "Navbar";

export { Navbar, navbarVariants };



================================================
File: src/components/UI/navbar/installation.tsx
================================================
import { useState } from "react";
import { Tabs } from "../tab";
import { Copy } from "lucide-react";

export default function InstallationBlock() {
const cliCommands = {
    pnpm: 
    `pnpm add @mindfiredigital/ignix-ui

npx animation-ui init 

npx ignix-ui add <component-name>`,
    npm: 
    `npm i @mindfiredigital/ignix-ui 

npx animation-ui init 

npx ignix-ui add <component-name> `,
    yarn: 
    `yarn add @mindfiredigital/ignix-ui

npx animation-ui init 

npx ignix-ui add <component-name>`,
    bun: `bun add @mindfiredigital/ignix-ui

npx animation-ui init

npx ignix-ui add <component-name>`,};

const manualCode = 
`"use client";

import { motion, HTMLMotionProps, AnimatePresence } from "framer-motion";
import * as React from "react";
import { cva, VariantProps } from "class-variance-authority";
import { cn } from "../../../utils/cn";
import { ChevronDown, ChevronUp } from "lucide-react";

export interface NavbarProps
  extends Omit<HTMLMotionProps<"nav">, "ref">,
    VariantProps<typeof navbarVariants> {
  animationType?:
    | "slide"
    | "glow"
    | "basic"
    | "spotlight"
    | "hoverSubmenu"
    | "clickSubmenu";
  direction?: "horizontal" | "vertical";
  children?: React.ReactNode;
  submenuContent?: React.ReactNode;
  header?: string;
}
    variants: {
      variant: {
        default: "bg-white text-gray-900",
        dark: "bg-gray-900 text-white",
        transparent: "bg-transparent text-transparent",
        glass: "bg-white/10 backdrop-blur-lg text-blue-200",
        gradient: "bg-gradient-to-r from-blue-500 to-purple-500 text-white",
        primary: "bg-blue-400 text-white",
      },
      size: {
        sm: "h-12",
        md: "h-16",
        lg: "h-20",
        xl: "h-24",
      },
      weight: {
        light: "font-light",
        normal: "font-normal",
        medium: "font-medium",
        semibold: "font-semibold",
        bold: "font-bold",
      },
      align: {
        left: "text-left",
        center: "text-center",
        right: "text-right",
      },
      textColor: {
        default: "text-foreground",
        muted: "text-muted-foreground",
        primary: "text-primary",
        secondary: "text-secondary",
        accent: "text-accent",
        white: "text-white",
      },
      direction: {
        horizontal: "flex-row",
        vertical: "flex-col items-start space-y-4 p-4",
      },
    },
    defaultVariants: {
      weight: "semibold",
      align: "left",
      direction: "horizontal",
    },
  }
);
const submenuVariants = {
  hidden: { opacity: 0, y: -10 },
  visible: { opacity: 1, y: 0 },
  exit: { opacity: 0, y: -10 },
};

const animationVariants: Record<string, Partial<HTMLMotionProps<"nav">>> = {
  slide: {
    initial: { y: -50, opacity: 0 },
    animate: { y: 0, opacity: 1 },
    exit: { y: -50, opacity: 0 },
    transition: { repeat: Infinity, duration: 6 },
  },
  glow: {
    whileHover: {
      boxShadow: "0 0 25px 8px rgba(0, 123, 255, 0.7)",
      transition: { duration: 0.5 },
    },
  },
  theme: {
    initial: { backgroundColor: "#fff" },
    animate: { backgroundColor: "#000", color: "#fff" },
    transition: { repeat: Infinity, duration: 4 },
  },
  shake: {
    whileHover: {
      x: [0, -10, 10, -10, 10, -6, 6, -4, 4, 0],
      transition: {
        duration: 0.6,
        ease: "easeInOut",
        repeat: Infinity,
      },
    },
  },
  spotlight: {
    initial: { opacity: 1 },
    animate: { opacity: 1 },
    transition: { duration: 0.3 },
  },
  Basic: {
    initial: { opacity: 1 },
    animate: { opacity: 1 },
    transition: { duration: 0.3 },
  },
};

const Navbar: React.FC<NavbarProps> = ({
  className,
  variant,
  size,
  direction = "horizontal",
  children,
  animationType = "slide",
  ...props
}) => {
  const animation = animationVariants[animationType] || {};
  const [, setIsHovered] = React.useState(false);
  const [hovered, setHovered] = React.useState(false);
  direction =
    animationType === "hoverSubmenu" || animationType === "clickSubmenu"
      ? "vertical"
      : direction;
  const [clicked, setClicked] = React.useState(false);
  const handleToggle = () => {
    if (animationType === "clickSubmenu") {
      setClicked((prev) => !prev);
    }
  };

  const showSubmenu =
    (animationType === "hoverSubmenu" && hovered) ||
    (animationType === "clickSubmenu" && clicked);

  return (
    <motion.nav
      className={cn(
        navbarVariants({ variant, size, direction }),
        "[&_input]:text-black [&_input]:border [&_input]:border-gray-300 [&_input]:rounded [&_input]:px-2 [&_input]:py-1",
        className
      )}
      {...animation}
      {...props}
      onMouseEnter={() => [
        setIsHovered(true),
        animationType === "hoverSubmenu" && setHovered(true),
      ]}
      onMouseLeave={() => [
        setIsHovered(false),
        animationType === "hoverSubmenu" && setHovered(false),
      ]}
      onClick={handleToggle}
    >
      {animationType === "spotlight" &&
        React.Children.map(children, (child) => {
          if (React.isValidElement(child)) {
            return (
              <motion.div
                whileHover={{
                  scale: 1.1,
                  background:
                    "radial-gradient(circle, rgba(255,255,255,0.2) 0%, rgba(0,0,0,0) 80%)",
                  transition: { duration: 0.3 },
                }}
                className="rounded-full p-3"
              >
                {child}
              </motion.div>
            );
          }
          return null;
        })}
      {animationType === "basic" &&
        React.Children.map(children, (child) => {
          if (React.isValidElement(child)) {
            return (
              <motion.div
                whileHover={{
                  scale: 1.1,
                  transition: { duration: 0.3 },
                }}
                className="flex items-center space-x-2 p-3"
              >
                {child}
              </motion.div>
            );
          }
          return null;
        })}
      {animationType === "hoverSubmenu" || animationType === "clickSubmenu" ? (
        <>
          <div className="flex justify-between w-full space-x-2">
            <span className="text-lg font-bold float-left">{props.header}</span>
            {showSubmenu ? (
              <span className="float-right">
                <ChevronUp size={20} />{" "}
              </span>
            ) : (
              <span className="float-right">
                {" "}
                <ChevronDown size={20} />
              </span>
            )}
          </div>
        </>
      ) : animationType !== "spotlight" && animationType !== "basic" ? (
        children
      ) : null}
      {(animationType === "hoverSubmenu" ||
        animationType === "clickSubmenu") && (
        <AnimatePresence>
          {showSubmenu && (
            <motion.div
              key="hoverMenu"
              initial="hidden"
              animate="visible"
              exit="exit"
              variants={submenuVariants}
              transition={{ duration: 0.3 }}
              className={cn(
                "top-full left-0 right-0 bg-white  w-full px-6 py-4 border-t z-50",
                variant === "dark" ? "bg-gray-900 text-white" : "",
                variant === "primary" ? "bg-blue-400 text-white" : ""
              )}
            >
              {props.submenuContent}
            </motion.div>
          )}
        </AnimatePresence>
      )}
    </motion.nav>
  );
};

Navbar.displayName = "Navbar";

export { Navbar, navbarVariants };
`;

  const cliOptions = ["pnpm", "npm", "yarn", "bun"];
  const mainTabs = ["CLI", "Manual"];

  const [activeMainTab, setActiveMainTab] = useState(0); // CLI or Manual
  const [selectedCliTab, setSelectedCliTab] = useState(0);
  const [copied, setCopied] = useState(false);

  const handleCopy = async (text: string) => {
    await navigator.clipboard.writeText(text);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const selectedCliCommand = cliCommands[cliOptions[selectedCliTab]];

  return (
    <div className="mb-10 w-full max-w-4xl mx-auto rounded-xl border border-gray-200 shadow-sm">

      {/* Main CLI/Manual Tab */}
      <div className="flex border-b border-gray-200 dark:border-zinc-800 mb-2">
        {mainTabs.map((tab, index) => (
          <button
            key={tab}
            onClick={() => setActiveMainTab(index)}
            className={`text-sm px-4 py-2 font-medium ${
              activeMainTab === index
                ? "border-b-2 border-black dark:border-white"
                : "text-gray-500"
            }`}
          >
            {tab}
          </button>
        ))}
      </div>

      {activeMainTab === 0 ? (
        <>
          {/* CLI Tool Tabs */}
          <Tabs
            options={cliOptions}
            selected={selectedCliTab}
            variant="underline"
            value={setSelectedCliTab}
            theme="dark"
          />

          {/* CLI Code Block */}
          <div className="relative bg-zinc-900 text-white rounded-lg p-4 text-sm font-mono overflow-x-auto whitespace-pre-wrap ">
            <>{selectedCliCommand}</>
            <button
              onClick={() => handleCopy(selectedCliCommand)}
              className="absolute top-2 right-2  text-white bg-zinc-700 hover:bg-zinc-600"
            >
              {copied ? "Copied!" : <Copy size={16} />}
            </button>
          </div>
        </>
      ) : (
        <>
        {/* Step 1: Install Peer Dependencies */}
        <h2 className="text-lg font-semibold mb-2">1. Install peer dependencies</h2>
        <div className="relative bg-zinc-900 rounded-lg p-4 text-sm font-mono overflow-x-auto mb-6">
          <code>npm install tailwind-variants class-variance-authority framer-motion lucide-react</code>
          <button
            onClick={() => handleCopy('npm install tailwind-variants class-variance-authority framer-motion lucide-react')}
            className="absolute top-2 right-2 text-white bg-zinc-700 hover:bg-zinc-600 px-2 py-1 rounded"
            >
            {copied ? "Copied!" : <Copy size={16} />}
            </button>
        </div>
        <h1 className="text-lg font-semibold mt-6">2. Set up Tailwind CSS</h1>
        <p className="text-sm text-grey-700 mt-2 mb-4 dark:bg-gray-900 dark:text-white">
           Make sure Tailwind CSS is installed and configured in your <code className="bg-gray-200 px-1 rounded text-black dark:bg-gray-900 dark:text-white">tailwind.config.js</code>.
        </p>
      
        {/* Step 2: Paste Code */}
        <h2 className="text-lg font-semibold mb-2">
          3. Copy and paste the following code into your project
        </h2>
        <div className="relative bg-zinc-900 text-white rounded-lg p-4 text-sm font-mono overflow-x-auto whitespace-pre-wrap mb-6">
          <>{manualCode}</>
          <button
            onClick={() => handleCopy(manualCode)}
            className="absolute top-2 right-2 text-white bg-zinc-700 hover:bg-zinc-600 px-2 py-1 rounded"
          >
            {copied ? "Copied!" : <Copy size={16} />}
          </button>
        </div>
      
        {/* Step 3 & 4: Final Notes */}
        <h2 className="text-lg font-semibold mb-2">
          4. Update the import paths to match your project setup.
        </h2>
        <h2 className="text-lg font-semibold mb-2">
          5. Import the <code className="bg-gray-200 px-1 rounded text-black dark:bg-gray-900 dark:text-white">Navbar</code> component in your file.
        </h2>
      </>
      
      )}
    </div>
  );
}



================================================
File: src/components/UI/navbar/navbarDemo.tsx
================================================
import React, { useState } from 'react';
import { LiveProvider, LiveEditor, LiveError, LivePreview } from 'react-live';
import { Navbar } from '.';
import { Heart, Home, Plus, Settings, User } from "lucide-react";



const demo1 = `
  <Navbar
    variant="dark"
    direction="horizontal"
    animationType="spotlight"
  >
    <a href="#"><Home /></a>
    <a href="#"><Heart /></a>
    <a href="#"><Plus /></a>
    <a href="#"><User /></a>
    <a href="#"><Settings /></a>
  </Navbar>
`;

const demo2 = `
    <Navbar variant="primary" animationType="glow">
        <div className="flex items-center justify-between w-full px-4 py-2">
            <div><a href="">Home</a></div>
            <div>
                <a href="">About</a>
            </div>
            <div>
                <input type="text" placeholder=" Search Here..." />
            </div>
            <div>
                <a href="">Contact</a>
            </div>
        </div>
    </Navbar> `;
const demo3 = ` 
<Navbar
    animationType="clickSubmenu"
    variant="dark"
    header="Click Submenu"
    submenuContent={
    <div className="grid grid-cols-3 gap-8 text-sm text-gray-700">
        <div className="flex flex-col space-y-2">
        <span className="font-semibold text-lg">Benefits</span>
        <span className="font-semibold text-lg">Marketplace</span>
        <span className="font-semibold text-lg">Partners</span>
        <span className="font-semibold text-lg">Community</span>
        </div>
        <div className="flex flex-col space-y-1">
        <span className="text-gray-400 text-sm">Company</span>
        <span className="hover:text-black cursor-pointer">Mission</span>
        <span className="hover:text-black cursor-pointer">Pricing</span>
        <span className="hover:text-black cursor-pointer">
            Business
        </span>
        <span className="hover:text-black cursor-pointer">
            Partnership
        </span>
        </div>
        <div className="flex flex-col space-y-1">
        <span className="text-gray-400 text-sm">Follow us</span>
        <span className="hover:text-black cursor-pointer">
            Instagram
        </span>
        <span className="hover:text-black cursor-pointer">
            Facebook
        </span>
        <span className="hover:text-black cursor-pointer">
            LinkedIn
        </span>
        <span className="hover:text-black cursor-pointer">TikTok</span>
        </div>
    </div>
    }
/>`

const demo4 = ` <Navbar
          animationType="hoverSubmenu"
          variant="primary"
          header="Hover Submenu"
          submenuContent={
            <div className="flex items-center justify-between w-full px-4 py-2">
              <div className="text-lg font-semibold">NavBar Demo</div>
              <div className="flex gap-6">
                <div><a href="">Home</a></div>
            <div>
                <a href="">About</a>
            </div>
            <div>
                <input type="text" placeholder=" Search Here..." />
            </div>
            <div>
                <a href="">Contact</a>
            </div>
              </div>
            </div>
          }
        />`

        
export default function NavbarDemo() {
    const [tab, setTab] = useState<'preview' | 'code'>('preview');
    const [tab2, setTab2] = useState<'preview2' | 'code2'>('preview2');
    const [tab3, setTab3] = useState<'preview3' | 'code3'>('preview3');
    const [tab4, setTab4] = useState<'preview4' | 'code4'>('preview4');

    return (
    <div className="w-full max-w-4xl mx-auto rounded-xl border border-gray-200 shadow-sm text-black dark:bg-gray-900 dark:text-white ">

        {/* === Section 1: Spotlight === */}
        <div className="flex items-center border-t border-b bg-gray-50 px-4">
        <button
            onClick={() => setTab2('preview2')}
            className={`px-4 py-2 text-sm font-medium ${
            tab2 === 'preview2' ? '' : ''
            }`}
        >
            Preview
        </button>
        <button
            onClick={() => setTab2('code2')}
            className={`px-4 py-2 text-sm font-medium ${
            tab2 === 'code2' ? '' : ''
            }`}
        >
            Code
        </button>
        <p className="ml-auto px-4 py-2 text-sm font-medium text-gray-600">
            Animation Type: Spotlight
        </p>
        </div>

        <LiveProvider code={demo1} scope={{ Navbar, Home, Heart, Plus, User, Settings, React }}>
        <div className="p-4">
            {tab2 === 'preview2' ? (
            <div className="p-4 bg-white rounded-lg shadow-inner">
                <LivePreview />
            </div>
            ) : (
            <div className="mt-4">
                <LiveEditor className="rounded-md border border-gray-300 bg-gray-50 p-4 text-sm font-mono" />
            </div>
            )}
            <LiveError className="mt-2 text-sm text-red-600" />
        </div>
        </LiveProvider>

        {/* === Section 2: Glow === */}
        <div className="flex items-center border-t border-b bg-gray-50 px-4">
        <button
            onClick={() => setTab('preview')}
            className={`px-4 py-2 text-sm font-medium ${
            tab === 'preview' ? 'border-b-2 border-black' : 'text-gray-500'
            }`}
        >
            Preview
        </button>
        <button
            onClick={() => setTab('code')}
            className={`px-4 py-2 text-sm font-medium ${
            tab === 'code' ? 'border-b-2 border-black' : 'text-gray-500'
            }`}
        >
            Code
        </button>
        <p className="ml-auto px-4 py-2 text-sm font-medium text-gray-600">
            Animation Type: Glow
        </p>
        </div>

        <LiveProvider code={demo2} scope={{ Navbar, React }}>
        <div className="p-4">
            {tab === 'preview' ? (
            <div className="p-4 bg-white rounded-lg shadow-inner">
                <LivePreview />
            </div>
            ) : (
            <div className="mt-4">
                <LiveEditor className="rounded-md border border-gray-300 bg-gray-50 p-4 text-sm font-mono" />
            </div>
            )}
            <LiveError className="mt-2 text-sm text-red-600" />
        </div>
        </LiveProvider>

        {/* === Section 3: clickSubmenu === */}
        <div className="flex items-center border-t border-b bg-gray-50 px-4">
        <button
            onClick={() => setTab3('preview3')}
            className={`px-4 py-2 text-sm font-medium ${
            tab3 === 'preview3' ? 'border-b-2 border-black' : 'text-gray-500'
            }`}
        >
            Preview
        </button>
        <button
            onClick={() => setTab3('code3')}
            className={`px-4 py-2 text-sm font-medium ${
            tab3 === 'code3' ? 'border-b-2 border-black' : 'text-gray-500'
            }`}
        >
            Code
        </button>
        <p className="ml-auto px-4 py-2 text-sm font-medium text-gray-600">
            Animation Type: clickSubmenu
        </p>
        </div>

        <LiveProvider code={demo3} scope={{ Navbar, React }}>
        <div className="p-4">
            {tab3 === 'preview3' ? (
            <div className="p-4 bg-white rounded-lg shadow-inner">
                <LivePreview />
            </div>
            ) : (
            <div className="mt-4">
                <LiveEditor className="rounded-md border border-gray-300 bg-gray-50 p-4 text-sm font-mono" />
            </div>
            )}
            <LiveError className="mt-2 text-sm text-red-600" />
        </div>
        </LiveProvider>

        {/* === Section 4: hoverSubmenu === */}
        <div className="flex items-center border-t border-b bg-gray-50 px-4">
        <button
            onClick={() => setTab4('preview4')}
            className={`px-4 py-2 text-sm font-medium ${
            tab4 === 'preview4' ? 'border-b-2 border-black' : 'text-gray-500'
            }`}
        >
            Preview
        </button>
        <button
            onClick={() => setTab4('code4')}
            className={`px-4 py-2 text-sm font-medium ${
            tab4 === 'code4' ? 'border-b-2 border-black' : 'text-gray-500'
            }`}
        >
            Code
        </button>
        <p className="ml-auto px-4 py-2 text-sm font-medium text-gray-600">
            Animation Type: hoverSubmenu
        </p>
        </div>

        <LiveProvider code={demo4} scope={{ Navbar, React }}>
        <div className="p-4">
            {tab4 === 'preview4' ? (
            <div className="p-4 bg-white rounded-lg shadow-inner">
                <LivePreview />
            </div>
            ) : (
            <div className="mt-4">
                <LiveEditor className="rounded-md border border-gray-300 bg-gray-50 p-4 text-sm font-mono" />
            </div>
            )}
            <LiveError className="mt-2 text-sm text-red-600" />
        </div>
        </LiveProvider>
    </div>
    );
}
        



================================================
File: src/components/UI/shimmercard/index.tsx
================================================
"use client";

import { cn } from "@site/src/utils/cn";
import * as React from "react";

interface ShineBorderProps extends React.HTMLAttributes<HTMLDivElement> {
  /**
   * Width of the border in pixels
   * @default 1
   */
  borderWidth?: number;
  /**
   * Duration of the animation in seconds
   * @default 14
   */
  duration?: number;
  /**
   * Color of the border, can be a single color or an array of colors
   * @default "#000000"
   */
  shineColor?: string | string[];
}

/**
 * Shine Border
 *
 * An animated background border effect component with configurable properties.
 */
export function ShineBorder({
  borderWidth = 1,
  duration = 14,
  shineColor = "#000000",
  className,
  style,
  ...props
}: ShineBorderProps) {
  return (
    <div
      style={
        {
          "--border-width": `${borderWidth}px`,
          "--duration": `${duration}s`,
          backgroundImage: `radial-gradient(transparent,transparent, ${
            Array.isArray(shineColor) ? shineColor.join(",") : shineColor
          },transparent,transparent)`,
          backgroundSize: "300% 300%",
          mask: `linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)`,
          WebkitMask: `linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)`,
          WebkitMaskComposite: "xor",
          maskComposite: "exclude",
          padding: "var(--border-width)",
          ...style,
        } as React.CSSProperties
      }
      className={cn(
        "pointer-events-none absolute inset-0 size-full rounded-[inherit] will-change-[background-position] motion-safe:animate-shine",
        className,
      )}
      {...props}
    />
  );
}



================================================
File: src/components/UI/sidebar/index.tsx
================================================
import React, { useState } from "react";
import { motion } from "framer-motion";
import {
  Menu,
  X,
} from "lucide-react";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "../../../utils/cn";

interface LinkItem {
  label: string;
  href: string;
  icon: React.ElementType;
}

interface SidebarProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof sidebarVariants> {
  links: LinkItem[];
  brandName?: string;
  position?: "left" | "right" | "bottomLeft" | "bottomRight";
  onClose?: () => void;
}

const sidebarVariants = cva("absolute h-full overflow-hidden transition-all", {
  variants: {
    position: {
      left: "top-0 left-0",
      right: "top-0 right-0",
      bottomLeft: "bottom-0 left-0",
      bottomRight: "bottom-0 right-0",
    },
    isOpen: {
      true: "w-64 h-full",
      false: "w-20 h-full",
    },
    variant: {
      default: "bg-background text-foreground",
      dark: "bg-black text-white",
      light: "bg-white text-gray-900 border-r",
      glass: "bg-white/10 backdrop-blur-lg text-white",
    },

    direction: {
      horizontal: "flex-row",
      vertical: "flex-col items-start",
    },
  },
  defaultVariants: {
    position: "left",
    isOpen: true,
    variant: "default",
    direction: "vertical",
  },
});

const Sidebar: React.FC<SidebarProps> = ({
  links,
  brandName = "Brand",
  position = "left",
  onClose,
  isOpen = true,
  variant,
  className,
  direction,
}) => {
  const [open, setOpen] = useState(isOpen);

  const toggleSidebar = () => setOpen((prev) => !prev);

  const handleClose = () => {
    onClose?.();
  };

  return (
    <motion.div
      initial={{ x: 0 }}
      animate={{ x: 0 }}
      transition={{ duration: 0.4 }}
      className={cn(
        sidebarVariants({ position, isOpen: open, variant, direction }),
        className
      )}
    >
      {/* Sidebar Header */}
      <div className="p-4 flex items-center justify-between gap-4">
        {open && <h1 className="text-xl font-bold">{brandName}</h1>}
        <button onClick={() => [toggleSidebar(), handleClose()]}>
          {open ? (
            <span title="Close">
              <X size={24} />
            </span>
          ) : (
            <span title="Open">
              <Menu size={24} />
            </span>
          )}
        </button>
      </div>

      {/* Sidebar Links */}
      <motion.nav
        className={cn(
          direction === "horizontal" ? "flex-row" : "flex-col",
          "flex"
        )}
      >
        {links.map((link, index) => (
          <a
            key={index}
            href={link.href}
            className="flex items-center p-4 gap-4 "
          >
            <link.icon size={24} />
            {open && <span>{link.label}</span>}
          </a>
        ))}
      </motion.nav>
    </motion.div>
  );
};

export default Sidebar;



================================================
File: src/components/UI/slider/index.tsx
================================================
'use client';

import * as React from 'react';
import * as SliderPrimitive from '@radix-ui/react-slider';
import { motion, type MotionProps } from 'framer-motion';
import { cn } from '../../../utils/cn';

// Define variant types (keeping all existing)
export type SliderVariant =
  | 'default'
  | 'minimal'
  | 'rounded'
  | 'gradient'
  | 'glass'
  | 'outline'
  | 'shadow'
  | 'neon'
  | 'material'
  | 'neumorphic'
  | 'retro'
  | 'cyberpunk'
  | 'brutalist'
  | 'skeuomorphic';

// Define animation types (keeping all existing)
export type SliderAnimationType =
  | 'none'
  | 'slide'
  | 'fade'
  | 'zoom'
  | 'spring'
  | 'elastic'
  | 'parallax'
  | 'flip'
  | 'morph'
  | 'hover'
  | 'pulse'
  | 'breathe'
  | 'wave'
  | 'rainbow'
  | 'bounce';

// Enhanced props interface
export interface SliderProps extends React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> {
  variant?: SliderVariant;
  animationType?: SliderAnimationType;
  animationDuration?: number;
  showValue?: boolean;
  valuePrefix?: string;
  valueSuffix?: string;
  trackClassName?: string;
  rangeClassName?: string;
  thumbClassName?: string;
  valueClassName?: string;
  size?: 'sm' | 'md' | 'lg';
  showTooltip?: boolean;
  glowEffect?: boolean;
}

// Enhanced variants styling with premium effects
const variantStyles: Record<
  SliderVariant,
  {
    root: string;
    track: string;
    range: string;
    thumb: string;
    value?: string;
  }
> = {
  default: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-2 w-full grow overflow-hidden rounded-full',
      'bg-gradient-to-r from-muted/80 to-muted backdrop-blur-sm',
      'border border-border/40 shadow-inner shadow-black/5',
      'dark:shadow-white/5 transition-all duration-300',
      'group-hover:shadow-md group-hover:border-border/60'
    ),
    range: cn(
      'absolute h-full rounded-full',
      'bg-gradient-to-r from-primary to-primary/90',
      'shadow-lg shadow-primary/25 dark:shadow-primary/20',
      'transition-all duration-300',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-white/20 before:to-transparent',
      'before:pointer-events-none'
    ),
    thumb: cn(
      'block h-5 w-5 rounded-full border-2 border-primary bg-background',
      'shadow-lg shadow-primary/20 dark:shadow-primary/30',
      'ring-offset-background transition-all duration-300',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-110 hover:shadow-xl hover:shadow-primary/30',
      'active:scale-95',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-white/30 before:to-transparent',
      'before:pointer-events-none'
    ),
  },

  minimal: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-1 w-full grow overflow-hidden rounded-full',
      'bg-muted/60 backdrop-blur-sm transition-all duration-300',
      'group-hover:bg-muted/80'
    ),
    range: cn(
      'absolute h-full rounded-full',
      'bg-gradient-to-r from-primary/80 to-primary/70',
      'shadow-sm shadow-primary/20 transition-all duration-300'
    ),
    thumb: cn(
      'block h-3 w-3 rounded-full bg-gradient-to-br from-primary to-primary/80',
      'shadow-md shadow-primary/25 transition-all duration-300',
      'ring-offset-background focus-visible:outline-none focus-visible:ring-2',
      'focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-125 hover:shadow-lg active:scale-90'
    ),
  },

  rounded: {
    root: 'relative flex w-full touch-none select-none items-center py-1 group',
    track: cn(
      'relative h-3 w-full grow overflow-hidden rounded-full',
      'bg-gradient-to-r from-muted/50 to-muted/70 backdrop-blur-sm',
      'border border-border/30 shadow-inner shadow-black/5',
      'transition-all duration-300 group-hover:shadow-md'
    ),
    range: cn(
      'absolute h-full rounded-full',
      'bg-gradient-to-r from-primary via-primary/95 to-primary/90',
      'shadow-lg shadow-primary/30 transition-all duration-300',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-transparent before:via-white/10 before:to-white/20',
      'before:pointer-events-none'
    ),
    thumb: cn(
      'block h-6 w-6 rounded-full border-2 border-primary/80 bg-background',
      'shadow-xl shadow-primary/25 backdrop-blur-sm',
      'ring-offset-background transition-all duration-300',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-110 hover:shadow-2xl hover:shadow-primary/35',
      'active:scale-95 hover:border-primary',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-br before:from-white/40 before:via-white/10 before:to-transparent',
      'before:pointer-events-none'
    ),
  },

  gradient: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-2 w-full grow overflow-hidden rounded-full',
      'bg-gradient-to-r from-muted/40 via-muted/60 to-muted/40',
      'backdrop-blur-sm border border-border/30',
      'shadow-inner shadow-black/10 dark:shadow-white/5',
      'transition-all duration-300'
    ),
    range: cn(
      'absolute h-full rounded-full',
      'bg-gradient-to-r from-purple-500 via-blue-500 to-cyan-500',
      'shadow-lg shadow-purple-500/30 transition-all duration-300',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-black/10 before:to-white/30',
      'before:pointer-events-none',
      'after:absolute after:inset-0 after:rounded-full',
      'after:bg-gradient-to-r after:from-transparent after:via-white/20 after:to-transparent',
      'after:pointer-events-none'
    ),
    thumb: cn(
      'block h-5 w-5 rounded-full',
      'bg-gradient-to-br from-purple-500 via-blue-500 to-cyan-500',
      'border-2 border-white/80 shadow-xl shadow-purple-500/30',
      'ring-offset-background transition-all duration-300',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-110 hover:shadow-2xl hover:shadow-blue-500/40',
      'active:scale-95',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-transparent before:to-white/40',
      'before:pointer-events-none'
    ),
  },

  glass: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-2 w-full grow overflow-hidden rounded-full',
      'bg-white/10 dark:bg-black/10 backdrop-blur-xl',
      'border border-white/20 dark:border-white/10',
      'shadow-lg shadow-black/10 dark:shadow-white/5',
      'transition-all duration-300',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-br before:from-white/20 before:via-white/5 before:to-transparent',
      'before:pointer-events-none'
    ),
    range: cn(
      'absolute h-full rounded-full',
      'bg-white/30 dark:bg-white/20 backdrop-blur-md',
      'shadow-lg shadow-white/20 dark:shadow-white/10',
      'transition-all duration-300',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-transparent before:to-white/30',
      'before:pointer-events-none'
    ),
    thumb: cn(
      'block h-5 w-5 rounded-full',
      'bg-white/80 dark:bg-white/70 backdrop-blur-md',
      'shadow-xl shadow-white/30 dark:shadow-white/20',
      'border border-white/40 dark:border-white/30',
      'ring-offset-background transition-all duration-300',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-110 hover:shadow-2xl hover:bg-white/90',
      'active:scale-95',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-br before:from-white/50 before:to-transparent',
      'before:pointer-events-none'
    ),
  },

  outline: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-2 w-full grow overflow-hidden rounded-full',
      'bg-transparent border-2 border-muted',
      'backdrop-blur-sm transition-all duration-300',
      'group-hover:border-muted/80 group-hover:shadow-sm'
    ),
    range: cn(
      'absolute h-full rounded-full',
      'bg-transparent border-2 border-primary',
      'shadow-lg shadow-primary/20 transition-all duration-300',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-r before:from-primary/10 before:to-primary/5',
      'before:pointer-events-none'
    ),
    thumb: cn(
      'block h-6 w-6 rounded-full bg-background',
      'border-2 border-primary shadow-lg shadow-primary/20',
      'ring-offset-background transition-all duration-300',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-110 hover:shadow-xl hover:shadow-primary/30',
      'active:scale-95 hover:border-primary/80',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-br before:from-primary/10 before:to-transparent',
      'before:pointer-events-none'
    ),
  },

  shadow: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-2 w-full grow overflow-hidden rounded-full',
      'bg-gradient-to-b from-muted/40 to-muted/60',
      'shadow-inner shadow-black/20 dark:shadow-white/10',
      'border border-border/30 backdrop-blur-sm',
      'transition-all duration-300'
    ),
    range: cn(
      'absolute h-full rounded-full',
      'bg-gradient-to-b from-primary/90 to-primary',
      'shadow-lg shadow-primary/30 transition-all duration-300',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-transparent before:to-white/20',
      'before:pointer-events-none'
    ),
    thumb: cn(
      'block h-6 w-6 rounded-full',
      'bg-gradient-to-b from-background to-muted/20',
      'shadow-xl shadow-black/15 dark:shadow-white/10',
      'border border-primary/20 backdrop-blur-sm',
      'ring-offset-background transition-all duration-300',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-110 hover:shadow-2xl hover:shadow-black/20',
      'active:scale-95',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-br before:from-white/30 before:to-transparent',
      'before:pointer-events-none'
    ),
  },

  neon: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-3 w-full grow overflow-hidden rounded-full',
      'bg-black/90 backdrop-blur-sm',
      'border border-cyan-500/30 transition-all duration-300',
      'shadow-lg shadow-cyan-500/20'
    ),
    range: cn(
      'absolute h-full rounded-full',
      'bg-gradient-to-r from-cyan-500 to-cyan-400',
      'shadow-[0_0_15px_3px_rgba(6,182,212,0.7),0_0_30px_5px_rgba(6,182,212,0.5)]',
      'transition-all duration-300',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-transparent before:to-white/20',
      'before:pointer-events-none'
    ),
    thumb: cn(
      'block h-7 w-7 rounded-full',
      'bg-gradient-to-br from-cyan-400 to-cyan-500',
      'shadow-[0_0_20px_3px_rgba(6,182,212,0.8),0_0_40px_5px_rgba(6,182,212,0.6)]',
      'border border-cyan-300/50 backdrop-blur-sm',
      'ring-offset-background transition-all duration-300',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-cyan-500 focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-110 hover:shadow-[0_0_25px_5px_rgba(6,182,212,0.9)]',
      'active:scale-95',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-transparent before:to-white/30',
      'before:pointer-events-none'
    ),
    value: 'text-cyan-500 text-sm font-bold drop-shadow-[0_0_8px_rgba(6,182,212,0.8)]',
  },

  material: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-1 w-full grow overflow-hidden rounded-full',
      'bg-gradient-to-r from-muted/50 to-muted/70',
      'transition-all duration-300 group-hover:from-muted/60 group-hover:to-muted/80'
    ),
    range: cn(
      'absolute h-full rounded-full',
      'bg-gradient-to-r from-primary to-primary/90',
      'shadow-md shadow-primary/25 transition-all duration-300',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-transparent before:to-white/15',
      'before:pointer-events-none'
    ),
    thumb: cn(
      'block h-6 w-6 rounded-full',
      'bg-gradient-to-br from-primary to-primary/90',
      'shadow-lg shadow-primary/30 transition-all duration-300',
      'ring-offset-background focus-visible:outline-none focus-visible:ring-2',
      'focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-110 hover:shadow-xl hover:shadow-primary/40',
      'active:scale-95',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-transparent before:to-white/25',
      'before:pointer-events-none'
    ),
  },

  neumorphic: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-2 w-full grow overflow-hidden rounded-full',
      'bg-gradient-to-b from-gray-200 to-gray-300',
      'dark:from-gray-700 dark:to-gray-800',
      'shadow-[inset_3px_3px_6px_rgba(0,0,0,0.15),inset_-3px_-3px_6px_rgba(255,255,255,0.9)]',
      'dark:shadow-[inset_3px_3px_6px_rgba(0,0,0,0.3),inset_-3px_-3px_6px_rgba(255,255,255,0.1)]',
      'transition-all duration-300'
    ),
    range: cn(
      'absolute h-full rounded-full',
      'bg-gradient-to-r from-blue-400 to-blue-500',
      'shadow-[inset_-2px_-2px_4px_rgba(0,0,0,0.1),inset_2px_2px_4px_rgba(255,255,255,0.2)]',
      'transition-all duration-300'
    ),
    thumb: cn(
      'block h-6 w-6 rounded-full',
      'bg-gradient-to-br from-gray-100 to-gray-200',
      'dark:from-gray-600 dark:to-gray-700',
      'shadow-[3px_3px_6px_rgba(0,0,0,0.15),-3px_-3px_6px_rgba(255,255,255,0.9)]',
      'dark:shadow-[3px_3px_6px_rgba(0,0,0,0.3),-3px_-3px_6px_rgba(255,255,255,0.1)]',
      'ring-offset-background transition-all duration-300',
      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-110 active:scale-95',
      'hover:shadow-[4px_4px_8px_rgba(0,0,0,0.2),-4px_-4px_8px_rgba(255,255,255,0.95)]'
    ),
  },

  retro: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-3 w-full grow overflow-hidden',
      'bg-gradient-to-b from-amber-100 to-amber-200',
      'border-2 border-amber-800 transition-all duration-300',
      'shadow-[inset_0_2px_4px_rgba(146,64,14,0.3)]'
    ),
    range: cn(
      'absolute h-full',
      'bg-gradient-to-b from-amber-500 to-amber-600',
      'shadow-[inset_0_1px_2px_rgba(146,64,14,0.4)]',
      'transition-all duration-300',
      'before:absolute before:inset-0',
      'before:bg-gradient-to-t before:from-transparent before:to-amber-400/30',
      'before:pointer-events-none'
    ),
    thumb: cn(
      'block h-7 w-7 rounded-sm',
      'bg-gradient-to-b from-amber-100 to-amber-200',
      'border-2 border-amber-800 transition-all duration-300',
      'shadow-[3px_3px_0px_rgba(146,64,14,1),inset_1px_1px_2px_rgba(255,255,255,0.5)]',
      'ring-offset-background focus-visible:outline-none focus-visible:ring-2',
      'focus-visible:ring-amber-600 focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-105 active:scale-95',
      'hover:shadow-[4px_4px_0px_rgba(146,64,14,1)]'
    ),
    value: 'text-amber-800 font-mono text-sm font-bold drop-shadow-[1px_1px_0px_rgba(255,255,255,0.8)]',
  },

  cyberpunk: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-3 w-full grow overflow-hidden',
      'bg-gradient-to-r from-black via-gray-900 to-black',
      'border-2 border-yellow-400 transition-all duration-300',
      'shadow-[0_0_10px_rgba(234,179,8,0.5),inset_0_0_10px_rgba(0,0,0,0.8)]'
    ),
    range: cn(
      'absolute h-full',
      'bg-gradient-to-r from-fuchsia-600 via-purple-600 to-cyan-600',
      'shadow-[0_0_15px_rgba(192,38,211,0.7)]',
      'transition-all duration-300',
      'before:absolute before:inset-0',
      'before:bg-gradient-to-t before:from-transparent before:to-white/20',
      'before:pointer-events-none'
    ),
    thumb: cn(
      'block h-7 w-7 bg-gradient-to-br from-yellow-300 to-yellow-500',
      'clip-path-polygon-[50%_0%,_100%_50%,_50%_100%,_0%_50%]',
      'shadow-[0_0_15px_rgba(234,179,8,0.8)]',
      'border border-yellow-300 transition-all duration-300',
      'ring-offset-background focus-visible:outline-none focus-visible:ring-2',
      'focus-visible:ring-yellow-400 focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-110 active:scale-95',
      'hover:shadow-[0_0_20px_rgba(234,179,8,1)]'
    ),
    value: 'text-yellow-400 font-mono text-sm font-bold drop-shadow-[0_0_8px_rgba(234,179,8,0.8)]',
  },

  brutalist: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-4 w-full grow overflow-hidden',
      'bg-gradient-to-b from-gray-200 to-gray-400',
      'border-2 border-black transition-all duration-200',
      'shadow-[inset_0_2px_4px_rgba(0,0,0,0.3)]'
    ),
    range: cn(
      'absolute h-full',
      'bg-gradient-to-b from-gray-800 to-black',
      'shadow-[inset_0_1px_2px_rgba(0,0,0,0.5)]',
      'transition-all duration-200'
    ),
    thumb: cn(
      'block h-8 w-8 rounded-none',
      'bg-gradient-to-b from-white to-gray-100',
      'border-2 border-black transition-all duration-200',
      'shadow-[5px_5px_0px_rgba(0,0,0,1),inset_1px_1px_2px_rgba(255,255,255,0.8)]',
      'ring-offset-background focus-visible:outline-none focus-visible:ring-2',
      'focus-visible:ring-black focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-105 active:scale-95',
      'hover:shadow-[6px_6px_0px_rgba(0,0,0,1)]'
    ),
    value: 'text-black font-mono text-sm font-black drop-shadow-[2px_2px_0px_rgba(255,255,255,1)]',
  },

  skeuomorphic: {
    root: 'relative flex w-full touch-none select-none items-center group',
    track: cn(
      'relative h-4 w-full grow overflow-hidden rounded-full',
      'bg-gradient-to-b from-gray-300 via-gray-400 to-gray-500',
      'border border-gray-500 transition-all duration-300',
      'shadow-[inset_0_2px_6px_rgba(0,0,0,0.3),0_1px_2px_rgba(255,255,255,0.8)]'
    ),
    range: cn(
      'absolute h-full rounded-full',
      'bg-gradient-to-b from-blue-400 via-blue-500 to-blue-600',
      'border-r border-gray-500 transition-all duration-300',
      'shadow-[inset_0_1px_3px_rgba(255,255,255,0.4),inset_0_-1px_2px_rgba(0,0,0,0.2)]',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-transparent before:to-white/25',
      'before:pointer-events-none'
    ),
    thumb: cn(
      'block h-8 w-8 rounded-full',
      'bg-gradient-to-b from-gray-100 via-gray-200 to-gray-300',
      'border border-gray-400 transition-all duration-300',
      'shadow-[0_3px_8px_rgba(0,0,0,0.3),inset_0_1px_2px_rgba(255,255,255,0.8)]',
      'ring-offset-background focus-visible:outline-none focus-visible:ring-2',
      'focus-visible:ring-gray-500 focus-visible:ring-offset-2',
      'disabled:pointer-events-none disabled:opacity-50',
      'hover:scale-105 active:scale-95',
      'hover:shadow-[0_4px_12px_rgba(0,0,0,0.4)]',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-br before:from-white/50 before:via-white/20 before:to-transparent',
      'before:pointer-events-none'
    ),
    value: 'text-gray-800 text-sm font-medium drop-shadow-[1px_1px_1px_rgba(255,255,255,0.8)]',
  },
};

// Enhanced animation props with better physics and easing
const getAnimationProps = (type: SliderAnimationType, duration = 0.3): MotionProps => {
  switch (type) {
    case 'slide':
      return {
        animate: { y: [0, -4, 4, 0] },
        transition: { 
          repeat: Infinity, 
          duration: duration * 3, 
          ease: [0.4, 0, 0.6, 1],
          repeatType: "loop"
        },
      };
    case 'fade':
      return {
        animate: { opacity: [1, 0.6, 1] },
        transition: { 
          repeat: Infinity, 
          duration: duration * 4,
          ease: "easeInOut",
          repeatType: "loop"
        },
      };
    case 'zoom':
      return {
        initial: { scale: 0.8, opacity: 0 },
        animate: { 
          scale: [0.8, 1.1, 1], 
          opacity: [0, 1, 1] 
        },
        transition: { 
          repeat: Infinity, 
          duration: duration * 3,
          ease: [0.68, -0.55, 0.265, 1.55],
          repeatType: "loop",
          repeatDelay: 1
        },
      };
    case 'spring':
      return {
        initial: { x: -8 },
        animate: { x: 0 },
        transition: {
          type: 'spring',
          stiffness: 400,
          damping: 15,
          repeat: Infinity,
          repeatType: "reverse",
          repeatDelay: 0.5
        },
      };
    case 'elastic':
      return {
        initial: { x: -15 },
        animate: { x: 0 },
        transition: {
          type: 'spring',
          stiffness: 600,
          damping: 8,
          repeat: Infinity,
          repeatType: "reverse",
          repeatDelay: 0.8
        },
      };
    case 'parallax':
      return {
        initial: { x: -12, opacity: 0.7 },
        animate: { x: 0, opacity: 1 },
        transition: { 
          duration: duration * 2, 
          delay: duration * 0.1, 
          repeat: Infinity,
          repeatType: "reverse",
          ease: [0.4, 0, 0.2, 1]
        },
      };
    case 'flip':
      return {
        initial: { rotateY: 90, opacity: 0 },
        animate: { rotateY: 0, opacity: 1 },
        transition: { 
          duration: duration * 2, 
          repeat: Infinity,
          repeatType: "reverse",
          repeatDelay: 1,
          ease: "easeInOut"
        },
      };
    case 'morph':
      return {
        initial: { borderRadius: '20%', opacity: 0.8 },
        animate: { borderRadius: '50%', opacity: 1 },
        transition: { 
          duration: duration * 2, 
          repeat: Infinity,
          repeatType: "reverse",
          ease: "easeInOut"
        },
      };
    case 'hover':
      return {
        whileHover: { 
          scale: 1.15,
          transition: { type: "spring", stiffness: 400, damping: 15 }
        },
        whileTap: { 
          scale: 0.9,
          transition: { type: "spring", stiffness: 600, damping: 20 }
        },
      };
    case 'pulse':
      return {
        animate: {
          scale: [1, 1.15, 1],
          opacity: [1, 0.8, 1],
        },
        transition: {
          repeat: Infinity,
          duration: duration * 4,
          ease: "easeInOut",
          repeatType: "loop"
        },
      };
    case 'breathe':
      return {
        animate: {
          boxShadow: [
            '0 0 0 0 rgba(59, 130, 246, 0.4)',
            '0 0 0 8px rgba(59, 130, 246, 0.1)',
            '0 0 0 0 rgba(59, 130, 246, 0.4)',
          ],
          scale: [1, 1.05, 1]
        },
        transition: {
          repeat: Infinity,
          duration: duration * 8,
          ease: "easeInOut",
          repeatType: "loop"
        },
      };
    case 'wave':
      return {
        animate: {
          x: [0, 6, -6, 6, 0],
          rotate: [0, 2, -2, 1, 0]
        },
        transition: {
          repeat: Infinity,
          duration: duration * 4,
          ease: "easeInOut",
          repeatType: "loop"
        },
      };
    case 'rainbow':
      return {
        animate: {
          background: [
            'linear-gradient(0deg, #ff0000, #ff0000)',
            'linear-gradient(60deg, #ff8c00, #ff8c00)', 
            'linear-gradient(120deg, #ffff00, #ffff00)',
            'linear-gradient(180deg, #00ff00, #00ff00)',
            'linear-gradient(240deg, #0000ff, #0000ff)',
            'linear-gradient(300deg, #8b00ff, #8b00ff)',
            'linear-gradient(360deg, #ff1493, #ff1493)',
            'linear-gradient(0deg, #ff0000, #ff0000)',
          ],
        },
        transition: {
          repeat: Infinity,
          duration: duration * 8,
          ease: "linear",
        },
      };
    case 'bounce':
      return {
        animate: {
          y: [0, -6, 6, 0],
          scale: [1, 1.05, 0.98, 1]
        },
        transition: {
          repeat: Infinity,
          duration: duration * 3,
          ease: [0.68, -0.55, 0.265, 1.55],
          repeatType: "loop"
        },
      };
    default:
      return {};
  }
};

// Enhanced motion components
const MotionThumb = motion.create(SliderPrimitive.Thumb);
const MotionRange = motion.create(SliderPrimitive.Range);
const MotionTrack = motion.create(SliderPrimitive.Track);

const Slider = React.forwardRef<React.ComponentRef<typeof SliderPrimitive.Root>, SliderProps>(
  (
    {
      className,
      variant = 'default',
      animationType = 'none',
      animationDuration = 0.3,
      showValue = false,
      valuePrefix = '',
      valueSuffix = '',
      trackClassName,
      rangeClassName,
      thumbClassName,
      valueClassName,
      size = 'md',
      showTooltip = false,
      glowEffect = false,
      ...props
    },
    ref
  ) => {
    const [value, setValue] = React.useState<number[]>(props.defaultValue || props.value || [0]);
    const [isHovered, setIsHovered] = React.useState(false);
    const styles = variantStyles[variant];
    const animationProps = getAnimationProps(animationType, animationDuration);

    // Size configurations
    const sizeConfig = {
      sm: { root: 'py-2', multiplier: 0.8 },
      md: { root: 'py-3', multiplier: 1 },
      lg: { root: 'py-4', multiplier: 1.2 }
    };

    React.useEffect(() => {
      if (props.value) {
        setValue(props.value);
      }
    }, [props.value]);

    const handleValueChange = (newValue: number[]) => {
      setValue(newValue);
      props.onValueChange?.(newValue);
    };

    return (
      <div 
        className={cn("w-full space-y-3", sizeConfig[size].root)}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        <SliderPrimitive.Root
          ref={ref}
          className={cn(styles.root, className)}
          onValueChange={handleValueChange}
          {...props}
        >
          <MotionTrack
            className={cn(styles.track, trackClassName)}
            style={{ 
              transform: `scale(${sizeConfig[size].multiplier})`,
              transformOrigin: 'center'
            }}
            animate={
              animationType === 'breathe'
                ? {
                    boxShadow: [
                      'inset 0 0 0 rgba(0,0,0,0.2)',
                      'inset 0 0 12px rgba(0,0,0,0.4)',
                      'inset 0 0 0 rgba(0,0,0,0.2)',
                    ],
                  }
                : undefined
            }
            transition={
              animationType === 'breathe'
                ? {
                    repeat: Infinity,
                    duration: 4,
                    ease: "easeInOut",
                    repeatType: "loop",
                  }
                : undefined
            }
            whileHover={{
              scale: sizeConfig[size].multiplier * 1.02,
              transition: { duration: 0.2 }
            }}
          >
            <MotionRange
              className={cn(styles.range, rangeClassName)}
              {...(animationType !== 'none' ? animationProps : {})}
              style={{
                ...(glowEffect && {
                  boxShadow: `0 0 20px rgba(59, 130, 246, ${isHovered ? '0.4' : '0.2'})`
                })
              }}
            />
          </MotionTrack>

          {value.map((val, index) => (
            <MotionThumb
              key={index}
              className={cn(styles.thumb, thumbClassName)}
              style={{ 
                transform: `scale(${sizeConfig[size].multiplier})`,
                transformOrigin: 'center'
              }}
              {...(animationType !== 'none' ? animationProps : {})}
              whileHover={{
                scale: sizeConfig[size].multiplier * 1.15,
                transition: { type: "spring", stiffness: 400, damping: 15 }
              }}
              whileTap={{
                scale: sizeConfig[size].multiplier * 0.9,
                transition: { type: "spring", stiffness: 600, damping: 20 }
              }}
            >
              {/* Tooltip */}
              {showTooltip && isHovered && (
                <motion.div
                  className="absolute -top-12 left-1/2 transform -translate-x-1/2 px-2 py-1 bg-popover text-popover-foreground text-xs rounded-md shadow-lg border border-border/40 backdrop-blur-sm"
                  initial={{ opacity: 0, y: 10, scale: 0.8 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: 10, scale: 0.8 }}
                  transition={{ duration: 0.2 }}
                >
                  {valuePrefix}{val}{valueSuffix}
                  <div className="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-2 border-r-2 border-t-2 border-transparent border-t-border/40" />
                </motion.div>
              )}
            </MotionThumb>
          ))}
        </SliderPrimitive.Root>

        {showValue && (
          <motion.div 
            className={cn('text-center text-sm font-medium', styles.value, valueClassName)}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            {valuePrefix}
            {value.join(', ')}
            {valueSuffix}
          </motion.div>
        )}
      </div>
    );
  }
);

Slider.displayName = 'Slider';

export { Slider };



================================================
File: src/components/UI/sparkle-text/index.tsx
================================================
"use client";

import { CSSProperties, ReactElement, useEffect, useState } from "react";

import { motion } from 'framer-motion';
import { cn } from "@site/src/utils/cn";

interface Sparkle {
  id: string;
  x: string;
  y: string;
  color: string;
  delay: number;
  scale: number;
  lifespan: number;
}

const Sparkle: React.FC<Sparkle> = ({ id, x, y, color, delay, scale }) => {
  return (
    <motion.svg
      key={id}
      className="pointer-events-none absolute z-20"
      initial={{ opacity: 0, left: x, top: y }}
      animate={{
        opacity: [0, 1, 0],
        scale: [0, scale, 0],
        rotate: [75, 120, 150],
      }}
      transition={{ duration: 0.8, repeat: Infinity, delay }}
      width="21"
      height="21"
      viewBox="0 0 21 21"
    >
      <path
        d="M9.82531 0.843845C10.0553 0.215178 10.9446 0.215178 11.1746 0.843845L11.8618 2.72026C12.4006 4.19229 12.3916 6.39157 13.5 7.5C14.6084 8.60843 16.8077 8.59935 18.2797 9.13822L20.1561 9.82534C20.7858 10.0553 20.7858 10.9447 20.1561 11.1747L18.2797 11.8618C16.8077 12.4007 14.6084 12.3916 13.5 13.5C12.3916 14.6084 12.4006 16.8077 11.8618 18.2798L11.1746 20.1562C10.9446 20.7858 10.0553 20.7858 9.82531 20.1562L9.13819 18.2798C8.59932 16.8077 8.60843 14.6084 7.5 13.5C6.39157 12.3916 4.19225 12.4007 2.72023 11.8618L0.843814 11.1747C0.215148 10.9447 0.215148 10.0553 0.843814 9.82534L2.72023 9.13822C4.19225 8.59935 6.39157 8.60843 7.5 7.5C8.60843 6.39157 8.59932 4.19229 9.13819 2.72026L9.82531 0.843845Z"
        fill={color}
      />
    </motion.svg>
  );
};

interface SparklesTextProps {
  /**
   * @default <div />
   * @type ReactElement
   * @description
   * The component to be rendered as the text
   * */
  as?: ReactElement;

  /**
   * @default ""
   * @type string
   * @description
   * The className of the text
   */
  className?: string;

  /**
   * @required
   * @type ReactNode
   * @description
   * The content to be displayed
   * */
  children: React.ReactNode;

  /**
   * @default 10
   * @type number
   * @description
   * The count of sparkles
   * */
  sparklesCount?: number;

  /**
   * @default "{first: '#9E7AFF', second: '#FE8BBB'}"
   * @type string
   * @description
   * The colors of the sparkles
   * */
  colors?: {
    first: string;
    second: string;
  };
}

export const SparklesText: React.FC<SparklesTextProps> = ({
  children,
  colors = { first: "#fb6a4a", second: "#ef4444" },
  className,
  sparklesCount = 10,
  ...props
}) => {
  const [sparkles, setSparkles] = useState<Sparkle[]>([]);

  useEffect(() => {
    const generateStar = (): Sparkle => {
      const starX = `${Math.random() * 100}%`;
      const starY = `${Math.random() * 100}%`;
      const color = Math.random() > 0.5 ? colors.first : colors.second;
      const delay = Math.random() * 2;
      const scale = Math.random() * 1 + 0.3;
      const lifespan = Math.random() * 10 + 5;
      const id = `${starX}-${starY}-${Date.now()}`;
      return { id, x: starX, y: starY, color, delay, scale, lifespan };
    };

    const initializeStars = () => {
      const newSparkles = Array.from({ length: sparklesCount }, generateStar);
      setSparkles(newSparkles);
    };

    const updateStars = () => {
      setSparkles((currentSparkles) =>
        currentSparkles.map((star) => {
          if (star.lifespan <= 0) {
            return generateStar();
          } else {
            return { ...star, lifespan: star.lifespan - 0.1 };
          }
        }),
      );
    };

    initializeStars();
    const interval = setInterval(updateStars, 100);

    return () => clearInterval(interval);
  }, [colors.first, colors.second, sparklesCount]);

  return (
    <div
      className={cn("text-6xl font-bold", className)}
      {...props}
      style={
        {
          "--sparkles-first-color": `${colors.first}`,
          "--sparkles-second-color": `${colors.second}`,
        } as CSSProperties
      }
    >
      <span className="relative inline-block">
        {sparkles.map((sparkle) => (
          <Sparkle key={sparkle.id} {...sparkle} />
        ))}
        <strong>{children}</strong>
      </span>
    </div>
  );
};



================================================
File: src/components/UI/spinner/index.tsx
================================================
import { motion } from "framer-motion";
import { cn } from "../../../utils/cn";

type SpinnerProps = {
  size?: number;
  color?: string;
  thickness?: number;
  variant?: "default" | "bars" | "dots-bounce";
  className?: string;
};

export const Spinner = ({
  size = 40,
  color = "primary",
  thickness = 4,
  variant = "default",
  className = "",
}: SpinnerProps) => {
  if (variant === "bars") {
    const bars = Array.from({ length: 8 });

    return (
      <div
        className={cn("relative", className)}
        style={{ width: size, height: size }}
      >
        {bars.map((_, i) => {
          const angle = (360 / bars.length) * i;
          const delay = i * 0.1;

          return (
            <motion.div
              key={i}
              className={cn(
                "absolute top-1/2 left-1/2 w-[10%] h-[30%] rounded-md",
                color
              )}
              style={{
                transform: `rotate(${angle}deg) translateY(-140%)`, // increased from -50% to -140%
                transformOrigin: "center",
              }}
              animate={{
                opacity: [1, 0.3, 1],
              }}
              transition={{
                repeat: Infinity,
                duration: 1,
                ease: "linear",
                delay,
              }}
            />
          );
        })}
      </div>
    );
  }
  
  if (variant === "dots-bounce") {
    const dotSize = thickness;
    const gap = dotSize * 1.8;
    const dots = Array.from({ length: 5 }); // increased from 4 to 5

    return (
      <div
        className={cn("flex items-center justify-center relative", className)}
        style={{ gap: `${gap}px` }}
      >
        {/* Premium background glow */}
          <motion.div
            className="absolute inset-0 rounded-full opacity-20"
            style={{
              background: `radial-gradient(ellipse, ${color} 0%, transparent 60%)`,
              filter: "blur(12px)",
              width: `${(dotSize * dots.length) + (gap * (dots.length - 1)) + 20}px`,
              height: `${dotSize + 20}px`,
              left: "50%",
              top: "50%",
              transform: "translate(-50%, -50%)"
            }}
            animate={{
              scale: [1, 1.1, 1],
              opacity: [0.2, 0.3, 0.2]
            }}
            transition={{
              duration: 0.8 * 2,
              repeat: Infinity,
              ease: "easeInOut"
            }}
          />

        {dots.map((_, i) => (
          <motion.div
            key={i}
            className={cn(
              "rounded-full shadow-lg backdrop-blur-sm",
              color.startsWith('bg-') 
                ? color 
                : `bg-primary text-primary`
            )}
            style={{
              width: dotSize,
              height: dotSize,
              boxShadow: "0 4px 8px rgba(0,0,0,0.1)"
            }}
            animate={{
              scale: [0.6, 1.4, 0.6],
              opacity: [0.4, 1, 0.4],
              y: [0, -dotSize * 1.5, 0],
              filter: [
                "brightness(0.8)",
                "brightness(1.3)",
                "brightness(0.8)"
              ]
            }}
            transition={{
              duration: 0.8,
              repeat: Infinity,
              delay: i * 0.15,
              ease: [0.68, -0.55, 0.265, 1.55], // Custom bounce easing
            }}
          />
        ))}
      </div>
    );
  }

  return (
    <div
      className={cn(
        "animate-spin rounded-full",
        color,
        "border-t-transparent border-solid",
        className
      )}
      style={{
        width: size,
        height: size,
        borderWidth: thickness,
      }}
    />
  );
};



================================================
File: src/components/UI/stepper/demo.tsx
================================================

import { useState } from "react";
import { Stepper } from "./index";

const StepperDemo = () => {
    const [step, setStep] = useState(0);
    return (
      <>
        <Stepper
          steps={[
            { label: 'Cart', description: 'Review items' },
            { label: 'Shipping', description: 'Delivery info' },
            { label: 'Payment', description: 'Card details' },
          ]}
          activeStep={step}
        />
        <div className="flex justify-between mt-4">
          <button
            onClick={() => setStep(Math.max(0, step - 1))}
            disabled={step === 0}
            className="px-4 py-2 bg-primary text-white rounded disabled:opacity-50"
          >
            Previous
          </button>
          <button
            onClick={() => setStep(Math.min(2, step + 1))}
            disabled={step === 2}
            className="px-4 py-2 bg-primary text-white rounded disabled:opacity-50"
          >
            Next
          </button>
        </div>
      </>
    );
}

export default StepperDemo;



================================================
File: src/components/UI/stepper/index.tsx
================================================
import { cn } from "../../../utils/cn";

interface Step {
  label: string;
  description?: string;
}

interface StepperProps {
  steps: Step[];
  activeStep: number; // 0-based index
  className?: string;
}

export const Stepper = ({ steps, activeStep, className }: StepperProps) => {
  return (
    <div className={cn("flex items-center justify-between w-full", className)}>
      {steps.map((step, index) => {
        const isActive = index === activeStep;
        const isCompleted = index < activeStep;

        return (
          <div
            key={index}
            className="flex-1 flex flex-col items-center relative"
          >
            {/* Line connector */}
            {index !== steps.length - 1 && (
              <div className="absolute top-4 left-1/2 w-full h-0.5 bg-zinc-300 dark:bg-zinc-700 z-0 transform translate-x-1/2" />
            )}

            {/* Step circle */}
            <div
              className={cn(
                "z-10 w-8 h-8 flex items-center justify-center rounded-full border-2 text-sm font-medium",
                isCompleted
                  ? "bg-green-500 border-green-500 text-white"
                  : isActive
                  ? "bg-white dark:bg-zinc-900 border-primary text-primary"
                  : "bg-white dark:bg-zinc-900 border-zinc-300 text-zinc-400"
              )}
            >
              {isCompleted ? "âœ“" : index + 1}
            </div>

            {/* Step label */}
            <div className="text-center mt-2">
              <div
                className={cn(
                  "text-xs font-medium",
                  isActive || isCompleted
                    ? "text-zinc-900 dark:text-white"
                    : "text-zinc-400"
                )}
              >
                {step.label}
              </div>
              {step.description && (
                <div className="text-[11px] text-zinc-500 dark:text-zinc-400">
                  {step.description}
                </div>
              )}
            </div>
          </div>
        );
      })}
    </div>
  );
};



================================================
File: src/components/UI/switch/index.tsx
================================================
'use client';

import { useState } from 'react';
import * as React from 'react';
import * as SwitchPrimitives from '@radix-ui/react-switch';
import { motion } from 'framer-motion';
import { cn } from '../../../utils/cn';

// Enhanced animations with premium effects
const animations = {
  default: {
    checked: { 
      x: 16,
      transition: { type: 'spring', stiffness: 300, damping: 20 }
    },
    unchecked: { 
      x: 0,
      transition: { type: 'spring', stiffness: 300, damping: 20 }
    },
  },
  bounce: {
    checked: {
      x: 16,
      scale: [1, 1.1, 1],
      transition: { 
        type: 'spring', 
        stiffness: 500, 
        damping: 15,
        scale: { duration: 0.3 }
      },
    },
    unchecked: {
      x: 0,
      scale: [1, 1.1, 1],
      transition: { 
        type: 'spring', 
        stiffness: 500, 
        damping: 15,
        scale: { duration: 0.3 }
      },
    },
  },
  scale: {
    checked: {
      x: 16,
      scale: 1.1,
      filter: "brightness(1.1)",
      transition: { 
        type: 'spring', 
        stiffness: 400, 
        damping: 12,
        duration: 0.5
      },
    },
    unchecked: {
      x: 0,
      scale: 1,
      filter: "brightness(1)",
      transition: { 
        type: 'spring', 
        stiffness: 400, 
        damping: 12,
        duration: 0.5
      },
    },
  },
  rotate: {
    checked: {
      x: 16,
      rotate: 180,
      scale: 1.1,
      filter: "brightness(1.2)",
      transition: { 
        type: 'spring', 
        stiffness: 300, 
        damping: 15,
        duration: 0.6
      },
    },
    unchecked: {
      x: 0,
      rotate: 0,
      scale: 1,
      filter: "brightness(1)",
      transition: { 
        type: 'spring', 
        stiffness: 300, 
        damping: 15,
        duration: 0.6
      },
    },
  },
  fade: {
    checked: {
      x: 16,
      opacity: 1,
      scale: 1,
      filter: "blur(0px)",
      transition: { 
        duration: 0.4, 
        ease: [0.4, 0, 0.2, 1],
        type: 'tween' // Using tween for opacity/filter animations
      },
    },
    unchecked: {
      x: 0,
      opacity: 0.7,
      scale: 0.95,
      filter: "blur(1px)",
      transition: { 
        duration: 0.4, 
        ease: [0.4, 0, 0.2, 1],
        type: 'tween' // Using tween for opacity/filter animations
      },
    },
  },
  elastic: {
    checked: {
      x: 16,
      scale: 1.1,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 10,
        restDelta: 0.001,
        duration: 0.8
      },
    },
    unchecked: {
      x: 0,
      scale: 1,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 10,
        restDelta: 0.001,
        duration: 0.8
      },
    },
  },
  pulse: {
    checked: {
      x: 16,
      scale: [1, 1.3, 1],
      boxShadow: [
        '0 0 0 0 rgba(59, 130, 246, 0.4)',
        '0 0 0 8px rgba(59, 130, 246, 0.1)',
        '0 0 0 0 rgba(59, 130, 246, 0.4)'
      ],
      transition: { duration: 0.5, ease: "easeInOut" },
    },
    unchecked: {
      x: 0,
      scale: [1, 1.3, 1],
      boxShadow: [
        '0 0 0 0 rgba(100, 116, 139, 0.4)',
        '0 0 0 8px rgba(100, 116, 139, 0.1)',
        '0 0 0 0 rgba(100, 116, 139, 0.4)'
      ],
      transition: { duration: 0.5, ease: "easeInOut" },
    },
  },
  shake: {
    checked: {
      x: [0, 2, 6, 10, 14, 16],
      y: [0, -3, 0, 3, 0, 0],
      rotate: [0, -5, 5, -3, 3, 0],
      transition: { duration: 0.6, ease: "easeInOut" },
    },
    unchecked: {
      x: [16, 14, 10, 6, 2, 0],
      y: [0, 3, 0, -3, 0, 0],
      rotate: [0, 3, -3, 5, -5, 0],
      transition: { duration: 0.6, ease: "easeInOut" },
    },
  },
  flip: {
    checked: {
      x: 16,
      rotateY: [0, 180, 360],
      scale: [1, 0.8, 1],
      filter: ["brightness(1)", "brightness(1.5)", "brightness(1)"],
      transition: { duration: 0.6, ease: "easeInOut" },
    },
    unchecked: {
      x: 0,
      rotateY: [360, 180, 0],
      scale: [1, 0.8, 1],
      filter: ["brightness(1)", "brightness(1.5)", "brightness(1)"],
      transition: { duration: 0.6, ease: "easeInOut" },
    },
  },
  jelly: {
    checked: {
      x: 16,
      scale: [1, 1.4, 0.6, 1.3, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 1],
      rotate: [0, 10, -8, 6, -4, 2, -1, 0],
      transition: { duration: 1, ease: [0.68, -0.55, 0.265, 1.55] },
    },
    unchecked: {
      x: 0,
      scale: [1, 1.4, 0.6, 1.3, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 1],
      rotate: [0, -10, 8, -6, 4, -2, 1, 0],
      transition: { duration: 1, ease: [0.68, -0.55, 0.265, 1.55] },
    },
  },
  glow: {
    checked: {
      x: 16,
      boxShadow: [
        '0 0 0 0 rgba(59, 130, 246, 0)',
        '0 0 0 4px rgba(59, 130, 246, 0.3)',
        '0 0 0 12px rgba(59, 130, 246, 0.1)',
        '0 0 0 0 rgba(59, 130, 246, 0)',
      ],
      filter: ["brightness(1)", "brightness(1.3)", "brightness(1)"],
      scale: [1, 1.1, 1],
      transition: { duration: 0.8, ease: "easeInOut" },
    },
    unchecked: {
      x: 0,
      boxShadow: [
        '0 0 0 0 rgba(100, 116, 139, 0)',
        '0 0 0 4px rgba(100, 116, 139, 0.3)',
        '0 0 0 12px rgba(100, 116, 139, 0.1)',
        '0 0 0 0 rgba(100, 116, 139, 0)',
      ],
      filter: ["brightness(1)", "brightness(1.3)", "brightness(1)"],
      scale: [1, 1.1, 1],
      transition: { duration: 0.8, ease: "easeInOut" },
    },
  },
};

// Enhanced variants with premium styling
const variants = {
  default: {
    root: cn(
      'h-6 w-11 rounded-full',
      'bg-gradient-to-r from-muted/80 to-muted/60 backdrop-blur-sm',
      'border border-border/60 shadow-lg shadow-black/5',
      'data-[state=checked]:from-primary data-[state=checked]:to-primary/80',
      'data-[state=checked]:shadow-primary/30 data-[state=checked]:border-primary/60',
      'dark:shadow-white/5 dark:data-[state=checked]:shadow-primary/30',
      'transition-all duration-300 ease-in-out',
      'hover:data-[state=unchecked]:from-muted/90 hover:data-[state=unchecked]:to-muted/70',
      'hover:data-[state=checked]:from-primary/90 hover:data-[state=checked]:to-primary/70'
    ),
    thumb: cn(
      'h-5 w-5 rounded-full',
      'bg-gradient-to-br from-background via-background to-muted/20',
      'shadow-lg shadow-black/15 dark:shadow-white/10',
      'border border-border/40',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-white/20 before:to-white/40',
      'before:pointer-events-none'
    ),
    thumbOffset: 20,
  },
  large: {
    root: cn(
      'h-8 w-14 rounded-full',
      'bg-gradient-to-r from-muted/80 to-muted backdrop-blur-sm',
      'border border-border/60 shadow-xl shadow-black/10',
      'data-[state=checked]:from-primary/90 data-[state=checked]:to-primary',
      'data-[state=checked]:shadow-primary/30 data-[state=checked]:border-primary/40',
      'dark:shadow-white/5 dark:data-[state=checked]:shadow-primary/25',
      'transition-all duration-300'
    ),
    thumb: cn(
      'h-7 w-7 rounded-full',
      'bg-gradient-to-br from-background via-background to-muted/20',
      'shadow-xl shadow-black/20 dark:shadow-white/15',
      'border border-border/40',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-white/20 before:to-white/40',
      'before:pointer-events-none'
    ),
    thumbOffset: 24,
  },
  small: {
    root: cn(
      'h-4 w-8 rounded-full',
      'bg-gradient-to-r from-muted/80 to-muted backdrop-blur-sm',
      'border border-border/60 shadow-md shadow-black/5',
      'data-[state=checked]:from-primary/90 data-[state=checked]:to-primary',
      'data-[state=checked]:shadow-primary/20 data-[state=checked]:border-primary/40',
      'dark:shadow-white/5 dark:data-[state=checked]:shadow-primary/15',
      'transition-all duration-300'
    ),
    thumb: cn(
      'h-3 w-3 rounded-full',
      'bg-gradient-to-br from-background via-background to-muted/20',
      'shadow-md shadow-black/10 dark:shadow-white/5',
      'border border-border/40',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-white/20 before:to-white/40',
      'before:pointer-events-none'
    ),
    thumbOffset: 16,
  },
  pill: {
    root: cn(
      'h-6 w-11 rounded-full',
      'bg-gradient-to-r from-muted/60 via-muted/80 to-muted/60 backdrop-blur-sm',
      'border border-border/60 shadow-lg shadow-black/5',
      'data-[state=checked]:from-primary/80 data-[state=checked]:via-primary data-[state=checked]:to-primary/80',
      'data-[state=checked]:shadow-primary/25 data-[state=checked]:border-primary/40',
      'dark:shadow-white/5 dark:data-[state=checked]:shadow-primary/20',
      'transition-all duration-300',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-black/5 before:to-white/10',
      'before:pointer-events-none'
    ),
    thumb: cn(
      'h-5 w-5 rounded-full',
      'bg-gradient-to-br from-background via-background to-muted/20',
      'shadow-lg shadow-black/15 dark:shadow-white/10',
      'border border-border/40',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-br before:from-white/30 before:to-transparent',
      'before:pointer-events-none'
    ),
    thumbOffset: 20,
  },
  square: {
    root: cn(
      'h-6 w-11 rounded-lg',
      'bg-gradient-to-br from-muted/80 to-muted backdrop-blur-sm',
      'border border-border/60 shadow-lg shadow-black/5',
      'data-[state=checked]:from-primary/90 data-[state=checked]:to-primary',
      'data-[state=checked]:shadow-primary/25 data-[state=checked]:border-primary/40',
      'dark:shadow-white/5 dark:data-[state=checked]:shadow-primary/20',
      'transition-all duration-300'
    ),
    thumb: cn(
      'h-5 w-5 rounded-md',
      'bg-gradient-to-br from-background via-background to-muted/20',
      'shadow-lg shadow-black/15 dark:shadow-white/10',
      'border border-border/40',
      'before:absolute before:inset-0 before:rounded-md',
      'before:bg-gradient-to-t before:from-white/20 before:to-white/40',
      'before:pointer-events-none'
    ),
    thumbOffset: 20,
  },
  slim: {
    root: cn(
      'h-4 w-12 rounded-full',
      'bg-gradient-to-r from-muted/70 to-muted/90 backdrop-blur-sm',
      'border border-border/60 shadow-md shadow-black/5',
      'data-[state=checked]:from-primary/85 data-[state=checked]:to-primary/95',
      'data-[state=checked]:shadow-primary/20 data-[state=checked]:border-primary/40',
      'dark:shadow-white/5 dark:data-[state=checked]:shadow-primary/15',
      'transition-all duration-300'
    ),
    thumb: cn(
      'h-3 w-3 rounded-full',
      'bg-gradient-to-br from-background via-background to-muted/20',
      'shadow-md shadow-black/10 dark:shadow-white/5',
      'border border-border/40',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-white/20 before:to-white/40',
      'before:pointer-events-none'
    ),
    thumbOffset: 32,
  },
  ios: {
    root: cn(
      'h-7 w-12 rounded-full',
      'bg-gradient-to-r from-gray-200 via-gray-300 to-gray-200',
      'dark:from-gray-600 dark:via-gray-700 dark:to-gray-600',
      'shadow-inner shadow-black/10 dark:shadow-white/5',
      'border border-gray-300/60 dark:border-gray-600/60',
      'data-[state=checked]:from-emerald-400 data-[state=checked]:via-emerald-500 data-[state=checked]:to-emerald-400',
      'data-[state=checked]:shadow-emerald-500/25 data-[state=checked]:border-emerald-400/40',
      'transition-all duration-300 backdrop-blur-sm',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-black/5 before:to-white/15',
      'before:pointer-events-none'
    ),
    thumb: cn(
      'h-6 w-6 rounded-full',
      'bg-gradient-to-br from-white via-white to-gray-50',
      'dark:from-gray-100 dark:via-gray-200 dark:to-gray-100',
      'shadow-xl shadow-black/20 dark:shadow-black/40',
      'border border-white/60 dark:border-gray-200/60',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-br before:from-white/40 before:to-transparent',
      'before:pointer-events-none'
    ),
    thumbOffset: 20,
  },
  material: {
    root: cn(
      'h-6 w-12 rounded-full',
      'bg-gradient-to-r from-gray-300 via-gray-400 to-gray-300',
      'dark:from-gray-600 dark:via-gray-700 dark:to-gray-600',
      'shadow-inner shadow-black/15 dark:shadow-white/5',
      'border border-gray-400/40 dark:border-gray-600/40',
      'data-[state=checked]:from-blue-400 data-[state=checked]:via-blue-500 data-[state=checked]:to-blue-400',
      'data-[state=checked]:shadow-blue-500/25 data-[state=checked]:border-blue-400/40',
      'transition-all duration-300 backdrop-blur-sm'
    ),
    thumb: cn(
      'h-5 w-5 rounded-full',
      'bg-gradient-to-br from-background via-background to-muted/10',
      'shadow-lg shadow-black/15 dark:shadow-white/10',
      'border border-border/40',
      'before:absolute before:inset-0 before:rounded-full',
      'before:bg-gradient-to-t before:from-white/20 before:to-white/40',
      'before:pointer-events-none'
    ),
    thumbOffset: 24,
  },
};

export interface SwitchProps extends React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> {
  variant?: keyof typeof variants;
  animation?: keyof typeof animations;
  thumbClassName?: string;
  glowEffect?: boolean;
}

const Switch = React.forwardRef<React.ComponentRef<typeof SwitchPrimitives.Root>, SwitchProps>(
  ({ 
    className, 
    variant = 'default', 
    animation = 'default', 
    thumbClassName, 
    glowEffect = false,
    ...props 
  }, ref) => {
    const selectedVariant = variants[variant] || variants.default;
    const [isChecked, setIsChecked] = useState(props.checked || false);
    const [isHovered, setIsHovered] = useState(false);

    const thumbOffset = selectedVariant.thumbOffset || 20;
    const dynamicAnimation = {
      ...animations[animation],
      checked: {
        ...animations[animation].checked,
        x: thumbOffset,
      },
    };

    React.useEffect(() => {
      if (props.checked !== undefined) {
        setIsChecked(props.checked);
      }
    }, [props.checked]);

    const handleCheckedChange = (checked: boolean) => {
      setIsChecked(checked);
      props.onCheckedChange?.(checked);
    };

    return (
      <div className="relative inline-block">
        {/* Enhanced glow effect */}
        {glowEffect && isChecked && (
          <motion.div
            className="absolute inset-0 rounded-full opacity-30"
            style={{
              background: `radial-gradient(circle, rgba(59, 130, 246, 0.4) 0%, transparent 70%)`,
              filter: "blur(8px)",
              transform: "scale(1.5)"
            }}
            animate={{
              scale: [1.5, 1.7, 1.5],
              opacity: [0.3, 0.5, 0.3]
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              ease: "easeInOut"
            }}
          />
        )}

        <SwitchPrimitives.Root
          className={cn(
            'peer inline-flex shrink-0 cursor-pointer items-center',
            'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background',
            'disabled:cursor-not-allowed disabled:opacity-50',
            'transform-gpu will-change-transform',
            'hover:scale-105 active:scale-95 transition-transform duration-200',
            selectedVariant.root,
            className
          )}
          {...props}
          checked={isChecked}
          onCheckedChange={handleCheckedChange}
          onMouseEnter={() => setIsHovered(true)}
          onMouseLeave={() => setIsHovered(false)}
          ref={ref}
        >
          {/* Track shimmer effect */}
          <motion.div
            className="absolute inset-0 rounded-[inherit] bg-gradient-to-r from-transparent via-white/10 to-transparent -skew-x-12 pointer-events-none"
            transition={{
              x: {
                duration: 1,
                repeat: isHovered ? Infinity : 0,
                repeatDelay: 0.5,
                ease: "easeInOut"
              }
            }}
          />

          <SwitchPrimitives.Thumb asChild>
            <motion.span
              className={cn(
                'pointer-events-none block ring-0 relative overflow-hidden',
                'transform-gpu will-change-transform',
                selectedVariant.thumb,
                thumbClassName
              )}
              initial={false}
              animate={isChecked ? 'checked' : 'unchecked'}
              variants={dynamicAnimation}
              whileHover={{
                scale: 1.05,
                transition: { duration: 0.2 }
              }}
              whileTap={{
                scale: 0.95,
                transition: { duration: 0.1 }
              }}
            >
              {/* Thumb shimmer effect */}
              <motion.div
                className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -skew-x-12 pointer-events-none rounded-[inherit]"
                animate={{
                  x: isChecked ? ["-100%", "100%"] : "-100%"
                }}
                transition={{
                  x: {
                    duration: 0.8,
                    delay: 0.2,
                    ease: "easeInOut"
                  }
                }}
              />
            </motion.span>
          </SwitchPrimitives.Thumb>
        </SwitchPrimitives.Root>
      </div>
    );
  }
);
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };



================================================
File: src/components/UI/tab/index.tsx
================================================
"use client";

import React, { useState } from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "../../../utils/cn";
import { motion } from "framer-motion";

export interface TabsProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof tabsVariants> {
  options: string[];
  selected?: number;
  value?: (index: number) => void;
}

const tabsVariants = cva("relative flex items-center", {
  variants: {
    variant: {
      underline: "border-b-2 border-transparent border-primary",
      filled: "bg-primary text-primary-foreground",
      pill: "bg-primary text-primary-foreground rounded-full px-4 py-2",
      outline: "border border-primary text-primary rounded-md px-4 py-2",
      ghost:
        "bg-transparent text-primary hover:bg-primary hover:text-primary-foreground rounded-md px-4 py-2",
      shadow: "shadow-lg bg-background text-foreground rounded-md px-4 py-2",
      gradient:
        "bg-gradient-to-r from-primary to-accent text-primary-foreground rounded-md px-4 py-2",
      glow: "bg-background text-foreground rounded-md px-4 py-2 shadow-lg shadow-primary/50",
      block: "border border-border rounded-md",
    },
    theme: {
      light: "bg-background text-foreground",
      dark: "bg-card text-card-foreground",
      glass: "bg-background/10 backdrop-blur-lg text-foreground",
      glassDark: "bg-card/10 backdrop-blur-lg text-card-foreground",
      glassLight: "bg-background/10 backdrop-blur-lg text-foreground",
      glassGradient:
        "bg-gradient-to-r from-primary to-accent/10 backdrop-blur-lg text-primary-foreground",
      glassGradientDark:
        "bg-gradient-to-r from-primary to-accent/10 backdrop-blur-lg text-foreground",
    },

    size: {
      sm: "text-sm",
      md: "text-md",
      lg: "text-lg",
    },
  },
  defaultVariants: {
    variant: "underline",
    size: "md",
  },
});

export const Tabs: React.FC<TabsProps> = ({
  options,
  selected = 0,
  value,
  variant = "underline",
  size = "md",
  className,
  theme,
  ...props
}) => {
  const [activeIndex, setActiveIndex] = useState(selected);

  return (
    <div
      className={cn(
        "relative flex space-x-4",
        variant !== "ghost" ? tabsVariants({ variant, size, theme }) : "",
        className
      )}
      {...props}
    >
      {options.map((option, index) => {
        const isActive = index === activeIndex;

        return (
          <motion.button
            key={option}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => {
              setActiveIndex(index);
              value && value(index);
            }}
            className={cn(
              "relative px-4 py-2 transition-all",
              isActive
                ? tabsVariants({ variant, size })
                : "text-gray-500 hover:text-primary"
            )}
          >
            {option}
            {[
              "filled",
              "pill",
              "outline",
              "ghost",
              "shadow",
              "gradient",
              "glow",
              "block",
            ].includes(variant || "") &&
              isActive && (
                <motion.div
                  layoutId={`active-tab-bg-${variant}`}
                  className="absolute inset-0 z-[-1] rounded-md bg-[rgba(0,115,230,0.1)]"
                  transition={{ duration: 0.3 }}
                />
              )}
          </motion.button>
        );
      })}
    </div>
  );
};



================================================
File: src/components/UI/table/Table.module.css
================================================
@import "@radix-ui/themes/styles.css";

.tableRowHover {
	position: relative;
	overflow: hidden;
	transition: background-color 0.2s;
}

.tableRowHover::after {
	content: "";
	position: absolute;
	top: 0;
	left: 50%;
	transform: translateX(-50%);
	width: 0%;
	height: 100%;
	background-color: var(--gray-a4);
	transition: width 0.2s;
}

.tableRowHover.dark::after {
	background-color: var(--gray-a6);
}

.tableRowHover td {
	position: relative;
	z-index: 1;
}

.tableRowHover:hover::after {
	width: 100%;
}


================================================
File: src/components/UI/table/index.tsx
================================================
"use client";

import React, { useCallback, useState } from "react";
import { AnimatePresence, motion, useAnimation } from "framer-motion";
import { TriangleDownIcon, TriangleUpIcon } from "@radix-ui/react-icons";
import { Flex, Table as RadixTable, Theme } from "@radix-ui/themes";
import { cn } from "../../../utils/cn";
import { Pagination, type PaginationProps } from "./pagination";

export type TableSortBy = "asc" | "desc";

export interface TableProps {
  headings: Array<{
    label: React.ReactNode;
    key: string;
    sort: TableSortBy;
  }>;
  data: Array<Record<string, React.ReactNode>>;
  applySort: (key: string, value: TableSortBy) => void;
  variant?: "surface" | "ghost";
  headingVariant?: "row" | "column";
  size?: "sm" | "md" | "lg";
  animationVariant?: "fade" | "slide" | "scale" | "flip" | "elastic";
  showHoverEffects?: boolean;
  showStripes?: boolean;
  showBorders?: boolean;
  glow?: boolean;
  rowKeyExtractor?: (row: Record<string, React.ReactNode>, index: number) => string;
}

const contentAnimations = {
  fade: {
    initial: { opacity: 0 },
    animate: { opacity: 1 },
    exit: { opacity: 0 },
    transition: { duration: 0.4, ease: "easeInOut" },
  },
  slide: {
    initial: { opacity: 0, y: 20, scale: 0.95 },
    animate: { opacity: 1, y: 0, scale: 1 },
    exit: { opacity: 0, y: -20, scale: 0.95 },
    transition: { duration: 0.5, ease: "easeInOut" },
  },
  scale: {
    initial: { opacity: 0, scale: 0.8 },
    animate: { opacity: 1, scale: 1 },
    exit: { opacity: 0, scale: 0.8 },
    transition: { duration: 0.45, ease: "easeInOut" },
  },
  flip: {
    initial: { opacity: 0, rotateX: -90 },
    animate: { opacity: 1, rotateX: 0 },
    exit: { opacity: 0, rotateX: 90 },
    transition: { duration: 0.6, ease: "easeInOut" },
  },
  elastic: {
    initial: { opacity: 0, scale: 0.3, rotate: -10 },
    animate: { opacity: 1, scale: 1, rotate: 0 },
    exit: { opacity: 0, scale: 0.3, rotate: 10 },
    transition: { type: "spring", stiffness: 300, damping: 20, duration: 0.8 },
  },
};

const sizeConfigs = {
  sm: { fontSize: "text-sm", padding: "py-1 px-2", headingFontSize: "text-sm" },
  md: { fontSize: "text-base", padding: "py-2 px-3", headingFontSize: "text-base" },
  lg: { fontSize: "text-lg", padding: "py-3 px-4", headingFontSize: "text-lg" },
};

function getRowKey(
  row: Record<string, React.ReactNode>,
  index: number,
  headings: Array<{ key: string }>,
  extractor?: (row: Record<string, React.ReactNode>, index: number) => string
) {
  if (extractor) return extractor(row, index);
  // Default stable key: combine cell values
  return headings.map((h) => String(row[h.key] ?? "")).join("|") + `__${index}`;
}

type AnimatedContentProps = {
  content: React.ReactNode;
  changeKey: string;
  animationVariant: keyof typeof contentAnimations;
};

function AnimatedContent({ content, changeKey, animationVariant }: AnimatedContentProps) {
  const controls = useAnimation();

  React.useEffect(() => {
    controls.set(contentAnimations[animationVariant].initial);
    controls.start({
      ...contentAnimations[animationVariant].animate,
      transition: contentAnimations[animationVariant].transition,
    });
  }, [changeKey, animationVariant, controls]);

  return (
    <motion.div animate={controls} initial="initial" exit="exit" role="cell" className="min-w-0">
      {content}
    </motion.div>
  );
}

function ColumnTable(props: TableProps) {
  const {
    headings,
    data,
    applySort,
    variant = "surface",
    size = "md",
    animationVariant = "fade",
    showHoverEffects = true,
    showStripes = true,
    showBorders = true,
    glow = false,
    rowKeyExtractor,
  } = props;

  const [hoveredRow, setHoveredRow] = useState<number | null>(null);
  const [hoveredColumn, setHoveredColumn] = useState<string | null>(null);
  const config = sizeConfigs[size];

  const handleSort = useCallback(
    (ev: React.MouseEvent<HTMLTableCellElement, MouseEvent>) => {
      const target = ev.currentTarget;
      const key = target.getAttribute("data-key");
      const currentSort = target.getAttribute("data-sort");
      if (key && currentSort) {
        applySort(key, currentSort === "asc" ? "desc" : "asc");
      }
    },
    [applySort]
  );

  return (
    <div className="relative w-full rounded-lg overflow-hidden shadow-md">
      {glow && (
        <div className="absolute inset-0 rounded-lg bg-gradient-to-r from-primary to-primary opacity-30 blur-lg pointer-events-none animate-pulse" />
      )}
      <RadixTable.Root
        className={cn(
          "w-full border-collapse",
          variant === "ghost" ? "border border-transparent" : "border border-primary dark:border-gray-700"
        )}
      >
        <RadixTable.Header className="bg-gray-50 dark:bg-gray-800">
          <RadixTable.Row>
            {headings.map(({ label, key, sort }) => (
              <RadixTable.ColumnHeaderCell
                key={key}
                data-key={key}
                data-sort={sort}
                onClick={handleSort}
                onMouseEnter={() => setHoveredColumn(key)}
                onMouseLeave={() => setHoveredColumn(null)}
                className={cn(
                  "relative select-none cursor-pointer px-3 first:rounded-l-lg last:rounded-r-lg text-left font-semibold",
                  config.padding,
                  config.headingFontSize,
                  "border-r last:border-r-0 text-gray-700 dark:text-gray-300",
                  showHoverEffects && hoveredColumn === key ? "bg-gray-100 dark:bg-gray-700" : "",
                  glow ? "text-primary" : "",
                  showBorders && "border-gray-300 dark:border-gray-600"
                )}
              >
                <Flex justify="between" align="center">
                  <div className="truncate">{label}</div>
                  <div className="flex items-center gap-1 shrink-0">
                    {sort === "asc" ? (
                      <TriangleUpIcon className="w-4 h-4 text-primary" />
                    ) : (
                      <TriangleDownIcon className="w-4 h-4 text-primary" />
                    )}
                  </div>
                </Flex>
              </RadixTable.ColumnHeaderCell>
            ))}
          </RadixTable.Row>
        </RadixTable.Header>
        <RadixTable.Body>
          <AnimatePresence mode="wait">
            {data.map((row, index) => {
              const rowKey = getRowKey(row, index, headings, rowKeyExtractor);
              return (
                <motion.tr
                  key={rowKey}
                  layout
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.3, ease: "easeInOut" }}
                  className={cn(
                    "cursor-default",
                    showStripes && index % 2 === 1 ? "bg-gray-50 dark:bg-gray-800" : "",
                    showHoverEffects ? "hover:bg-primary dark:hover:bg-primary" : "",
                    showBorders ? "border-b border-gray-200 dark:border-gray-700" : ""
                  )}
                  onMouseEnter={() => setHoveredRow(index)}
                  onMouseLeave={() => setHoveredRow(null)}
                  style={{ zIndex: hoveredRow === index ? 10 : "auto" }}
                >
                  {headings.map(({ key }) => {
                    return (
                      <RadixTable.Cell
                        key={`${rowKey}-${key}`}
                        className={cn(
                          "select-text truncate max-w-[200px] whitespace-nowrap px-3",
                          config.padding,
                          config.fontSize,
                          showBorders ? "border-r border-gray-200 dark:border-gray-700" : "",
                          showHoverEffects && hoveredRow === index ? "font-semibold" : ""
                        )}
                      >
                        <AnimatedContent
                          animationVariant={animationVariant}
                          changeKey={`${rowKey}-${key}-${String(row[key] ?? "")}`}
                          content={row[key] ?? ""}
                        />
                      </RadixTable.Cell>
                    );
                  })}
                </motion.tr>
              );
            })}
          </AnimatePresence>
        </RadixTable.Body>
      </RadixTable.Root>
    </div>
  );
}

function RowTable(props: TableProps) {
  // Similar to ColumnTable, but transposed heading/data cells for Row Headings style.
  // Implement if needed or fallback to ColumnTable
  // For brevity, not implemented here.
  return <ColumnTable {...props} />;
}

export function Table(props: TableProps & Partial<PaginationProps> & { currentPage: number; totalPages: number; onPageChange: (page: number) => void }) {
  const {
    headingVariant = "column",
    currentPage,
    totalPages,
    onPageChange,
    ...rest
  } = props;

  const TableContent = headingVariant === "row" ? RowTable : ColumnTable;

  return (
    <Theme radius="large" appearance="inherit" {...rest}>
      <Flex direction="column" align="center" gap="6" className="w-full">
        <TableContent {...rest} />
        <Pagination currentPage={currentPage} totalPages={totalPages} onPageChange={onPageChange} />
      </Flex>
    </Theme>
  );
}



================================================
File: src/components/UI/table/pagination/index.tsx
================================================
import { Text } from "@radix-ui/themes";
import { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from "lucide-react";
import React, { useCallback, useMemo } from "react";
import { Button } from "../../button";

export interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
  siblingCount?: number;
}

const DOTS = "...";

const range = (start: number, end: number) => {
  const length = end - start + 1;
  return Array.from({ length }, (_, idx) => idx + start);
};

const usePagination = ({
  currentPage,
  totalPages,
  siblingCount = 1,
}: Omit<PaginationProps, "onPageChange">) => {
  const paginationRange = useMemo(() => {
    const totalPageNumbers = siblingCount + 5;

    if (totalPageNumbers >= totalPages) {
      return range(1, totalPages);
    }

    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);
    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPages);

    const shouldShowLeftDots = leftSiblingIndex > 2;
    const shouldShowRightDots = rightSiblingIndex < totalPages - 2;

    const firstPageIndex = 1;
    const lastPageIndex = totalPages;

    if (!shouldShowLeftDots && shouldShowRightDots) {
      const leftItemCount = 3 + 2 * siblingCount;
      const leftRange = range(1, leftItemCount);
      return [...leftRange, DOTS, totalPages];
    }

    if (shouldShowLeftDots && !shouldShowRightDots) {
      const rightItemCount = 3 + 2 * siblingCount;
      const rightRange = range(totalPages - rightItemCount + 1, totalPages);
      return [firstPageIndex, DOTS, ...rightRange];
    }

    if (shouldShowLeftDots && shouldShowRightDots) {
      const middleRange = range(leftSiblingIndex, rightSiblingIndex);
      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];
    }

    return range(1, totalPages);
  }, [totalPages, siblingCount, currentPage]);

  return paginationRange;
};

export const Pagination = React.memo(function Pagination({
  currentPage,
  totalPages,
  onPageChange,
  siblingCount = 1,
}: PaginationProps) {
  const paginationRange = usePagination({ currentPage, totalPages, siblingCount });

  const handleFirstPage = useCallback(() => onPageChange(1), [onPageChange]);
  const handlePreviousPage = useCallback(() => onPageChange(currentPage - 1), [currentPage, onPageChange]);
  const handleNextPage = useCallback(() => onPageChange(currentPage + 1), [currentPage, onPageChange]);
  const handleLastPage = useCallback(() => onPageChange(totalPages), [totalPages, onPageChange]);

  if (totalPages <= 1) return null;

  const isFirstPage = currentPage === 1;
  const isLastPage = currentPage === totalPages;

  return (
    <div className="flex justify-center gap-2 py-4">
      <Button variant="outline" size="md" onClick={handleFirstPage} disabled={isFirstPage} aria-label="First page">
        <ChevronsLeft size={16} />
      </Button>
      <Button variant="outline" size="md" onClick={handlePreviousPage} disabled={isFirstPage} aria-label="Previous page">
        <ChevronLeft size={16} />
      </Button>

      {paginationRange?.map((pageNumber, index) => {
        if (pageNumber === DOTS) {
          return (
            <Text key={`${DOTS}-${index}`} size="2" className="px-2">
              &#8230;
            </Text>
          );
        }

        return (
          <Button
            key={pageNumber}
            variant={pageNumber === currentPage ? "default" : "ghost"}
            size="md"
            onClick={() => onPageChange(pageNumber as number)}
            disabled={pageNumber === currentPage}
            aria-current={pageNumber === currentPage ? "page" : undefined}
          >
            {pageNumber}
          </Button>
        );
      })}

      <Button variant="outline" size="md" onClick={handleNextPage} disabled={isLastPage} aria-label="Next page">
        <ChevronRight size={16} />
      </Button>
      <Button variant="outline" size="md" onClick={handleLastPage} disabled={isLastPage} aria-label="Last page">
        <ChevronsRight size={16} />
      </Button>
    </div>
  );
});

Pagination.displayName = "Pagination";


================================================
File: src/components/UI/textarea/index.tsx
================================================
"use client";

import type React from "react";
import { useState, useRef, useEffect } from "react";
import { motion, Variants, useMotionValue, useSpring, useTransform } from "framer-motion";
import { cn } from "../../../utils/cn";

interface AnimatedTextareaProps {
  placeholder: string;
  variant: string;
  textareaClassName?: string;
  labelClassName?: string;
  value: string;
  onChange: (value: string) => void;
  onFocus?: () => void;
  onBlur?: () => void;
  disabled?: boolean;
  error?: string;
  success?: boolean;
  icon?: React.ElementType;
  maxLength?: number;
  minRows?: number;
  maxRows?: number;
  size?: "sm" | "md" | "lg";
  showCharacterCount?: boolean;
  autoResize?: boolean;
  theme?: "light" | "dark" | "auto";
  glowEffect?: boolean;
}

interface TextareaVariant {
  label: Variants;
  textarea: Variants;
  extra?: Variants;
  container?: Variants;
}

// Enhanced particle creation with better physics
const createAdvancedParticles = (container: HTMLElement, count = 12) => {
  const particles: HTMLElement[] = [];
  
  for (let i = 0; i < count; i++) {
    const particle = document.createElement("div");
    particle.className = cn(
      "absolute rounded-full pointer-events-none",
      "bg-gradient-to-r from-blue-400 to-cyan-400",
      "shadow-lg shadow-blue-400/50"
    );
    
    const size = Math.random() * 4 + 2;
    particle.style.width = `${size}px`;
    particle.style.height = `${size}px`;
    particle.style.left = `${Math.random() * 100}%`;
    particle.style.top = `${Math.random() * 100}%`;
    particle.style.boxShadow = `0 0 ${size * 2}px rgba(59, 130, 246, 0.6)`;
    
    // Enhanced animation
    particle.style.animation = `particleFloat ${Math.random() * 3 + 2}s ease-in-out infinite`;
    particle.style.animationDelay = `${Math.random() * 2}s`;
    
    container.appendChild(particle);
    particles.push(particle);
    
    setTimeout(() => {
      if (container.contains(particle)) {
        container.removeChild(particle);
      }
    }, 4000);
  }
  
  return particles;
};

const AnimatedTextarea: React.FC<AnimatedTextareaProps> = ({
  placeholder,
  variant,
  textareaClassName = "",
  labelClassName = "",
  onChange,
  value,
  onFocus,
  onBlur,
  disabled = false,
  error,
  success,
  icon: Icon,
  maxLength = 1000,
  minRows = 3,
  maxRows = 10,
  size = "md",
  showCharacterCount = false,
  autoResize = true,
  glowEffect = false,
}) => {
  const [isFocused, setIsFocused] = useState(false);
  const [height, setHeight] = useState("auto");
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const particleRef = useRef<HTMLDivElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  // Advanced mouse tracking for premium effects
  const mouseX = useMotionValue(0);
  const mouseY = useMotionValue(0);
  const rotateX = useSpring(useTransform(mouseY, [-100, 100], [2, -2]));
  const rotateY = useSpring(useTransform(mouseX, [-100, 100], [-2, 2]));

  // Size configurations
  const sizeConfig = {
    sm: { 
      textarea: "min-h-[80px] px-3 py-2 text-sm", 
      label: "text-sm", 
      icon: "h-4 w-4",
      minHeight: 80
    },
    md: { 
      textarea: "min-h-[100px] px-4 py-3 text-base", 
      label: "text-base", 
      icon: "h-5 w-5",
      minHeight: 100
    },
    lg: { 
      textarea: "min-h-[120px] px-5 py-4 text-lg", 
      label: "text-lg", 
      icon: "h-6 w-6",
      minHeight: 120
    }
  };

  const config = sizeConfig[size];

  const handleFocus = () => {
    setIsFocused(true);
    onFocus?.();
  };

  const handleBlur = () => {
    setIsFocused(false);
    onBlur?.();
  };

  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    if (disabled) return;
    
    const newValue = e.target.value;
    if (maxLength && newValue.length > maxLength) return;
    
    onChange?.(newValue);
    
    // Auto-resize functionality
    if ((variant === "expandable" || variant === "smoothExpand" || autoResize) && textareaRef.current) {
      const textarea = textareaRef.current;
      textarea.style.height = 'auto';
      const scrollHeight = textarea.scrollHeight;
      const maxHeight = config.minHeight * maxRows / minRows;
      const newHeight = Math.min(Math.max(scrollHeight, config.minHeight), maxHeight);
      setHeight(`${newHeight}px`);
    }
  };

  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!containerRef.current) return;
    const rect = containerRef.current.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    mouseX.set((e.clientX - centerX) * 0.3);
    mouseY.set((e.clientY - centerY) * 0.3);
  };

  // Auto-resize effect
  useEffect(() => {
    if ((variant === "expandable" || variant === "smoothExpand" || autoResize) && textareaRef.current) {
      const textarea = textareaRef.current;
      textarea.style.height = 'auto';
      const scrollHeight = textarea.scrollHeight;
      const maxHeight = config.minHeight * maxRows / minRows;
      const newHeight = Math.min(Math.max(scrollHeight, config.minHeight), maxHeight);
      setHeight(`${newHeight}px`);
    }
  }, [value, variant, autoResize, config.minHeight, maxRows, minRows]);

  // Enhanced particle effects
  useEffect(() => {
    if (variant === "particleField" && particleRef.current && isFocused) {
      const interval = setInterval(() => {
        if (particleRef.current) {
          createAdvancedParticles(particleRef.current, 8);
        }
      }, 300);
      
      return () => clearInterval(interval);
    }
  }, [variant, isFocused]);

  const variants = textareaVariants[variant as keyof typeof textareaVariants];
  const hasValue = value.length > 0;
  const isActive = isFocused || hasValue;

  // Character count logic
  const characterCount = value.length;
  const isNearLimit = maxLength && characterCount > maxLength * 0.8;
  const isOverLimit = maxLength && characterCount > maxLength;

  return (
    <motion.div
      ref={containerRef}
      className={cn(
        "relative mb-6 group",
        disabled && "opacity-60 cursor-not-allowed"
      )}
      initial="initial"
      animate={isActive ? "animate" : "initial"}
      style={{ 
        perspective: 2000,
        rotateX: variant === "holographic3D" ? rotateX : undefined,
        rotateY: variant === "holographic3D" ? rotateY : undefined
      }}
      onMouseMove={handleMouseMove}
      onMouseLeave={() => {
        mouseX.set(0);
        mouseY.set(0);
      }}
      variants={variants.container}
    >
      {/* Enhanced Background Effects */}
      {(variant === "glassmorphism" || variant === "premiumGlass") && (
        <motion.div
          className="absolute inset-0 bg-gradient-to-br from-white/10 via-white/5 to-transparent backdrop-blur-xl rounded-2xl border border-white/20 dark:border-white/10"
          initial={{ opacity: 0 }}
          animate={{ opacity: isActive ? 1 : 0.7 }}
          transition={{ duration: 0.3 }}
        />
      )}

      {/* Premium Shimmer Effect */}
      {(variant === "luxuryShimmer" || variant === "gradientBorder") && (
        <motion.div
          className="absolute inset-0 bg-gradient-to-r from-transparent via-blue-500/20 to-transparent -skew-x-12 rounded-xl"
          transition={{
            x: {
              duration: 1.5,
              repeat: isActive ? Infinity : 0,
              repeatDelay: 1,
              ease: "easeInOut"
            }
          }}
        />
      )}

      {/* Enhanced glow effect */}
      {glowEffect && isActive && (
        <motion.div
          className="absolute inset-0 rounded-xl opacity-30"
          style={{
            background: `radial-gradient(ellipse, rgba(59, 130, 246, 0.4) 0%, transparent 70%)`,
            filter: "blur(12px)",
            transform: "scale(1.1)"
          }}
          animate={{
            scale: [1.1, 1.2, 1.1],
            opacity: [0.3, 0.5, 0.3]
          }}
          transition={{
            duration: 3,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
      )}

      {/* Enhanced Animated Label */}
      <motion.label
        className={cn(
          "absolute left-4 pointer-events-none transition-colors duration-300 z-10 origin-left",
          "text-muted-foreground group-focus-within:text-primary",
          error && "text-red-500",
          success && "text-emerald-500",
          config.label,
          labelClassName
        )}
        variants={variants.label}
        style={{
          originX: 0,
          originY: 0.5,
        }}
      >
        {placeholder}
      </motion.label>

      {/* Textarea Container */}
      <div className="relative">
        {/* Leading Icon */}
        {Icon && (
          <motion.div
            className={cn(
              "absolute left-3 top-3 z-20",
              "text-muted-foreground group-focus-within:text-primary transition-colors duration-300",
              config.icon
            )}
            initial={{ scale: 0.8, opacity: 0.6 }}
            animate={{ 
              scale: isActive ? 1 : 0.8, 
              opacity: isActive ? 1 : 0.6,
            }}
            transition={{ duration: 0.3 }}
          >
            <Icon className={config.icon} />
          </motion.div>
        )}

        {/* Enhanced Textarea */}
        <motion.textarea
          ref={textareaRef}
          className={cn(
            // Base enhanced styles
            "w-full bg-background/90 backdrop-blur-sm border border-border/60 rounded-xl resize-none",
            "text-foreground placeholder:text-transparent transition-all duration-300",
            "focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary/60",
            "disabled:cursor-not-allowed disabled:opacity-50",
            "shadow-sm hover:shadow-md focus:shadow-lg",
            "shadow-black/5 dark:shadow-white/5",
            
            // Size configuration
            config.textarea,
            
            // Icon padding
            Icon && "pl-10",
            
            // Status variants
            error && "border-red-500/60 focus:border-red-500 focus:ring-red-500/20",
            success && "border-emerald-500/60 focus:border-emerald-500 focus:ring-emerald-500/20",
            
            // Theme adaptations
            "dark:bg-background/60 dark:border-border/40",
            "hover:border-border/80 dark:hover:border-border/60",
            
            textareaClassName
          )}
          style={{
            height: (variant === "expandable" || variant === "smoothExpand" || autoResize) ? height : undefined,
            minHeight: `${config.minHeight}px`,
            maxHeight: variant === "expandable" || variant === "smoothExpand" || autoResize 
              ? `${config.minHeight * maxRows / minRows}px` 
              : undefined,
          }}
          onFocus={handleFocus}
          onBlur={handleBlur}
          onChange={handleChange}
          value={value}
          disabled={disabled}
          maxLength={maxLength}
          variants={variants.textarea}
          rows={minRows}
        />

        {/* Enhanced Particle Field */}
        {variant === "particleField" && (
          <motion.div
            ref={particleRef}
            className="absolute inset-0 pointer-events-none overflow-hidden rounded-xl"
            initial={{ opacity: 0 }}
            animate={{ opacity: isActive ? 1 : 0 }}
            transition={{ duration: 0.3 }}
          />
        )}

        {/* Enhanced Character Count */}
        {(variant === "characterCount" || showCharacterCount) && (
          <motion.div
            className={cn(
              "absolute bottom-3 right-3 text-xs font-medium px-2 py-1 rounded-md backdrop-blur-sm z-20",
              "bg-background/80 border border-border/40",
              isNearLimit && !isOverLimit && "text-amber-600 border-amber-400/40 bg-amber-50/80 dark:bg-amber-950/80",
              isOverLimit && "text-red-600 border-red-400/40 bg-red-50/80 dark:bg-red-950/80",
              !isNearLimit && "text-muted-foreground"
            )}
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ 
              opacity: isActive ? 1 : 0.7,
              scale: isOverLimit ? 1.1 : 1,
            }}
            transition={{ duration: 0.2 }}
          >
            {characterCount}{maxLength && ` / ${maxLength}`}
          </motion.div>
        )}

        {/* Enhanced Line Highlight */}
        {variant === "lineHighlight" && value && (
          <motion.div
            className="absolute left-0 w-full h-6 bg-gradient-to-r from-primary/10 to-primary/5 pointer-events-none rounded"
            style={{
              top: `${Math.floor(value.split('\n').length - 1) * 24 + 12}px`,
            }}
            initial={{ opacity: 0, scaleX: 0 }}
            animate={{ opacity: 0.5, scaleX: 1 }}
            transition={{ duration: 0.3 }}
          />
        )}

        {/* Ripple Effect */}
        {variant === "rippleEffect" && isActive && (
          <motion.div
            className="absolute inset-0 rounded-xl pointer-events-none"
            initial={{ scale: 0, opacity: 0.5 }}
            animate={{
              scale: 2,
              opacity: 0,
            }}
            transition={{
              duration: 1,
              ease: "easeOut",
            }}
            style={{
              background: "radial-gradient(circle, rgba(59,130,246,0.3) 0%, transparent 70%)"
            }}
          />
        )}

      </div>
    </motion.div>
  );
};

// Enhanced textarea variants (ALL existing variants with premium improvements)
const textareaVariants: Record<string, TextareaVariant> = {
  clean: {
    container: {
      initial: { scale: 1 },
      animate: { scale: 1.005 },
    },
    label: {
      initial: { y: 0, scale: 1, color: "#6b7280" },
      animate: { 
        y: -32, 
        scale: 0.85, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    textarea: {
      initial: { 
        borderColor: "var(--border)",
        boxShadow: "0 1px 3px rgba(0,0,0,0.1)"
      },
      animate: { 
        borderColor: "var(--primary)",
        boxShadow: "0 0 0 3px rgba(var(--primary), 0.1), 0 4px 12px rgba(var(--primary), 0.1)"
      },
    },
  },

  expandable: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    textarea: {
      initial: { 
        borderColor: "var(--border)",
        transform: "scale(1)"
      },
      animate: { 
        borderColor: "var(--primary)",
        transform: "scale(1.01)",
        boxShadow: "0 4px 12px rgba(59, 130, 246, 0.15)"
      },
    },
  },

  smoothExpand: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: {
        y: -32,
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 },
      },
    },
    textarea: {
      initial: { 
        borderColor: "var(--border)",
        boxShadow: "0 1px 3px rgba(0,0,0,0.1)"
      },
      animate: {
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px rgba(var(--primary), 0.15)",
        transition: { duration: 0.3, ease: "easeOut" },
      },
    },
  },

  glowBorder: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        textShadow: "0 0 12px rgba(var(--primary), 0.6)"
      },
    },
    textarea: {
      initial: { 
        boxShadow: "0 0 0 0 rgba(var(--border), 0)",
        borderColor: "var(--border)"
      },
      animate: { 
        boxShadow: "0 0 0 3px rgba(var(--border), 0.3), 0 0 20px rgba(var(--border), 0.2)",
        borderColor: "var(--primary)"
      },
    },
  },

  characterCount: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    textarea: {
      initial: { 
        paddingBottom: "2.5rem",
        borderColor: "var(--border)"
      },
      animate: { 
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px rgba(var(--primary), 0.15)"
      },
    },
  },

  lineHighlight: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    textarea: {
      initial: { 
        lineHeight: "1.5",
        borderColor: "var(--border)"
      },
      animate: { 
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px rgba(var(--primary), 0.15)"
      },
    },
  },

  typewriterSound: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "#3b82f6",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    textarea: {
      initial: { 
        borderColor: "var(--border)",
        fontFamily: "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace"
      },
      animate: {
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px rgba(var(--primary), 0.15)",
        transition: { type: "spring", stiffness: 500, damping: 20 },
      },
    },
  },

  markdownPreview: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "#3b82f6",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    textarea: {
      initial: { 
        borderRadius: "12px",
        borderColor: "var(--border)"
      },
      animate: { 
        borderRadius: "16px",
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px rgba(var(--primary), 0.15)"
      },
    },
  },

  autoComplete: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "#3b82f6",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    textarea: {
      initial: { 
        backgroundColor: "var(--background)",
        borderColor: "var(--border)"
      },
      animate: { 
        backgroundColor: "var(--card)",
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px rgba(var(--primary), 0.15)"
      },
    },
  },

  syntaxHighlight: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "#3b82f6",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    textarea: {
      initial: { 
        fontFamily: "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
        borderColor: "var(--border)",
        backgroundColor: "var(--background)"
      },
      animate: { 
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px rgba(var(--primary), 0.15)"
      },
    },
  },

  rippleEffect: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "#3b82f6",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    textarea: {
      initial: { 
        transform: "scale(1)",
        borderColor: "var(--border)"
      },
      animate: {
        transform: "scale(1.005)",
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px rgba(var(--primary), 0.15)",
        transition: { type: "spring", stiffness: 300, damping: 20 },
      },
    },
  },

  gradientBorder: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "#3b82f6",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    textarea: {
      initial: {
        border: "2px solid transparent",
        backgroundImage: `
          linear-gradient(white, white),
          linear-gradient(90deg, #3b82f6, #8b5cf6, #3b82f6)
        `,
        backgroundClip: "padding-box, border-box",
        backgroundOrigin: "padding-box, border-box",
        backgroundSize: "100% 100%, 300% 100%",
        backgroundPosition: "0 0, 100% 0",
      },
      animate: {
        backgroundPosition: ["0 0, 100% 0", "0 0, -100% 0"],
        boxShadow: "0 4px 15px rgba(var(--primary), 0.15)",
        transition: {
          backgroundPosition: { duration: 2, repeat: Infinity, ease: "linear" },
        },
      },
    },
  },

  neonGlow: {
    label: {
      initial: { 
        textShadow: "0 0 0px #fff", 
        color: "var(--primary)" 
      },
      animate: {
        textShadow: "0 0 12px var(--primary), 0 0 24px var(--primary), 0 0 36px var(--primary)",
        y: -32,
        color: "var(--primary)",
      },
    },
    textarea: {
      initial: { 
        boxShadow: "0 0 0px #fff",
        borderColor: "var(--border)"
      },
      animate: {
        boxShadow: "0 0 8px var(--primary), 0 0 16px var(--primary), 0 0 24px var(--primary)",
        borderColor: "var(--primary)",
        transition: {
          boxShadow: { repeat: Infinity, duration: 2, repeatType: "reverse" as const },
        },
      },
    },
  },

  particleField: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        textShadow: "0 0 12px rgba(var(--primary), 0.4)"
      },
    },
    textarea: {
      initial: {
        borderColor: "var(--border)",
        boxShadow: "0 0 0 rgba(59, 130, 246, 0)",
      },
      animate: {
        borderColor: "var(--primary)",
        boxShadow: "0 0 20px rgba(var(--primary), 0.3)",
      },
    },
    extra: {
      initial: { opacity: 0 },
      animate: {
        opacity: 1,
        transition: { duration: 0.2 },
      },
    },
  },

  elastic: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: {
        y: -32,
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 400, damping: 15 },
      },
    },
    textarea: {
      initial: { 
        scale: 1,
        borderColor: "var(--border)"
      },
      animate: { 
        scale: 1.02,
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px rgba(var(--primary), 0.15)",
        transition: { 
          scale: { 
            type: "spring", 
            stiffness: 300, 
            damping: 15,
            restDelta: 0.001,
            restSpeed: 10
          }
        }
      },
    },
  },

  wave: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    textarea: {
      initial: { 
        y: 0,
        borderColor: "var(--border)"
      },
      animate: {
        y: [0, -3, 3, 0],
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px rgba(var(--primary), 0.15)",
        transition: { 
          y: { repeat: Infinity, duration: 2.5, ease: "easeInOut" } 
        },
      },
    },
  },

  spotlight: {
    label: {
      initial: { 
        y: 0, 
        filter: "brightness(1)", 
        color: "var(--primary)" 
      },
      animate: { 
        y: -32, 
        filter: "brightness(1.3) drop-shadow(0 0 8px rgba(var(--primary), 0.5))", 
        color: "var(--primary)"
      },
    },
    textarea: {
      initial: { 
        filter: "brightness(1)",
        borderColor: "var(--border)"
      },
      animate: {
        filter: ["brightness(1)", "brightness(1.1)", "brightness(1)"],
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px rgba(var(--primary), 0.15)",
        transition: { 
          filter: { repeat: Infinity, duration: 3, ease: "easeInOut" }
        },
      },
    },
  },

  liquid: {
    label: {
      initial: { y: 0, color: "#6b7280" },
      animate: { 
        y: -32, 
        color: "var(--primary)",
        transition: { type: "spring", stiffness: 300, damping: 20 }
      },
    },
    textarea: {
      initial: { 
        borderRadius: "12px",
        borderColor: "var(--border)"
      },
      animate: {
        borderRadius: ["12px", "16px", "20px", "16px", "12px"],
        borderColor: "var(--primary)",
        boxShadow: "0 4px 12px rgba(var(--primary), 0.15)",
        transition: { 
          borderRadius: { repeat: Infinity, duration: 4, ease: "easeInOut" } 
        },
      },
    },
  },

  cosmic: {
    label: {
      initial: { 
        y: 0, 
        rotate: 0, 
        color: "#6b7280",
        filter: "hue-rotate(0deg)"
      },
      animate: { 
        y: -32, 
        rotate: 360, 
        color: "#8b5cf6",
        filter: "hue-rotate(360deg)",
        textShadow: "0 0 15px rgba(139, 92, 246, 0.6)",
        transition: { 
          rotate: { duration: 2, repeat: Infinity, ease: "linear" },
          filter: { duration: 3, repeat: Infinity, ease: "linear" }
        }
      },
    },
    textarea: {
      initial: { 
        scale: 1,
        borderColor: "rgba(139, 92, 246, 0.2)",
        background: "radial-gradient(ellipse at center, rgba(139, 92, 246, 0.05) 0%, transparent 50%)"
      },
      animate: {
        scale: [1, 1.01, 0.99, 1],
        borderColor: "rgba(139, 92, 246, 0.6)",
        background: "radial-gradient(ellipse at center, rgba(139, 92, 246, 0.1) 0%, rgba(236, 72, 153, 0.05) 50%, transparent 100%)",
        boxShadow: "0 0 25px rgba(139, 92, 246, 0.3)",
        transition: { 
          scale: { repeat: Infinity, duration: 3, ease: "easeInOut" } 
        },
      },
    },
  },

  hologram: {
    label: {
      initial: { 
        y: 0, 
        opacity: 0.8, 
        color: "var(--primary)",
        filter: "blur(0px)"
      },
      animate: {
        y: -32,
        opacity: [0.8, 1, 0.6, 1],
        color: "var(--primary)",
        filter: "blur(0px) drop-shadow(0 0 8px rgba(var(--primary), 0.5))",
        textShadow: "0 0 15px rgba(var(--primary), 0.6)",
        transition: { 
          opacity: { repeat: Infinity, duration: 2.5, ease: "easeInOut" } 
        },
      },
    },
    textarea: {
      initial: { 
        opacity: 0.9,
        borderColor: "var(--border)"
      },
      animate: {
        opacity: [0.9, 1, 0.8, 1],
        borderColor: "var(--primary)",
        boxShadow: "0 0 20px rgba(var(--primary), 0.4), inset 0 0 20px rgba(var(--primary), 0.1)",
        transition: { 
          opacity: { repeat: Infinity, duration: 2.5, ease: "easeInOut" } 
        },
      },
    },
    extra: {
      initial: { opacity: 0 },
      animate: {
        opacity: [0, 0.6, 0],
        transition: { repeat: Infinity, duration: 2.5, ease: "easeInOut" },
      },
    },
  },
};

export default AnimatedTextarea;



================================================
File: src/components/UI/toast/demos.tsx
================================================
import { useState } from 'react';
import { useToast } from "./use-toast";
import { 
  CheckCircledIcon, 
  CrossCircledIcon, 
  ExclamationTriangleIcon, 
  InfoCircledIcon,
  SunIcon,
  MoonIcon,
  MagicWandIcon,
  ClockIcon
} from "@radix-ui/react-icons";

// Simple Toast Demo for main preview
export const SimpleToastDemo = () => {
  const toast = useToast();
  
  const showToast = (): void => {
    toast.addToast({
      message: "Hello from Toast!",
      variant: "info",
      animation: "slide",
      icon: <InfoCircledIcon className="w-5 h-5" />
    });
  };
  
  return (
    <button
      onClick={showToast}
      className="px-6 py-3 bg-blue-500 text-white rounded-md hover:bg-blue-600 flex items-center justify-center gap-2"
    >
      <InfoCircledIcon className="w-5 h-5" />
      Show Toast
    </button>
  );
};

// Basic Toast Types Demo
export const BasicToastDemo = () => {
  const toast = useToast();
  
  const showToast = (variant: 'success' | 'error' | 'warning' | 'info') => {
    const icons = {
      success: <CheckCircledIcon className="w-5 h-5" />,
      error: <CrossCircledIcon className="w-5 h-5" />,
      warning: <ExclamationTriangleIcon className="w-5 h-5" />,
      info: <InfoCircledIcon className="w-5 h-5" />
    };
    
    toast.addToast({
      message: `${variant.charAt(0).toUpperCase() + variant.slice(1)} message`,
      variant,
      animation: 'slide',
      mode: 'light',
      icon: icons[variant]
    });
  };
  
  return (
    <div className="grid grid-cols-2 gap-4">
      <button
        onClick={() => showToast('success')}
        className="px-6 py-3 bg-green-500 text-white rounded-md hover:bg-green-600 flex items-center justify-center gap-2"
      >
        <CheckCircledIcon className="w-5 h-5" />
        Success Toast
      </button>
      <button
        onClick={() => showToast('error')}
        className="px-6 py-3 bg-red-500 text-white rounded-md hover:bg-red-600 flex items-center justify-center gap-2"
      >
        <CrossCircledIcon className="w-5 h-5" />
        Error Toast
      </button>
      <button
        onClick={() => showToast('warning')}
        className="px-6 py-3 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 flex items-center justify-center gap-2"
      >
        <ExclamationTriangleIcon className="w-5 h-5" />
        Warning Toast
      </button>
      <button
        onClick={() => showToast('info')}
        className="px-6 py-3 bg-blue-500 text-white rounded-md hover:bg-blue-600 flex items-center justify-center gap-2"
      >
        <InfoCircledIcon className="w-5 h-5" />
        Info Toast
      </button>
    </div>
  );
};

// Animation Demo
export const AnimationDemo = () => {
  const toast = useToast();
  const animations = ['slide', 'fade', 'bounce', 'pop'] as const;
  
  return (
    <div className="grid grid-cols-2 gap-4">
      {animations.map((anim) => (
        <button
          key={anim}
          onClick={() => {
            toast.addToast({
              message: `${anim} animation`,
              variant: "info",
              animation: anim,
              mode: "light",
              icon: <InfoCircledIcon className="w-5 h-5" />
            });
          }}
          className="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600"
        >
          {anim.charAt(0).toUpperCase() + anim.slice(1)} Animation
        </button>
      ))}
    </div>
  );
};

// Appearance Demo
export const AppearanceDemo = () => {
  const toast = useToast();
  
  return (
    <div className="flex gap-4">
      <button
        onClick={() => {
          toast.addToast({
            message: "Glow effect toast",
            variant: "info",
            animation: "slide",
            mode: "light",
            appearance: "glow",
            icon: <InfoCircledIcon className="w-5 h-5" />
          });
        }}
        className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Glow Effect
      </button>
      
      <button
        onClick={() => {
          toast.addToast({
            message: "Gradient effect toast",
            variant: "info",
            animation: "slide",
            mode: "light",
            appearance: "gradient",
            gradientColor: "rgba(59, 130, 246, 1)",
            icon: <InfoCircledIcon className="w-5 h-5" />
          });
        }}
        className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Gradient Effect
      </button>
    </div>
  );
};

// Theme Demo
export const ThemeDemo = () => {
  const toast = useToast();
  const [mode, setMode] = useState<'light' | 'dark'>('light');

  return (
    <div className={`p-4 rounded ${mode === 'light' ? 'bg-white' : 'bg-gray-800'}`}>
      <div className="flex gap-4 mb-4">
        <button
          onClick={() => {
            setMode(m => m === 'light' ? 'dark' : 'light');
          }}
          className={`px-4 py-2 rounded flex items-center gap-2 ${
            mode === 'light' 
              ? 'bg-gray-800 text-white' 
              : 'bg-yellow-400 text-gray-900'
          }`}
        >
          {mode === 'light' ? (
            <><MoonIcon className="w-4 h-4" /> Dark Mode</>
          ) : (
            <><SunIcon className="w-4 h-4" /> Light Mode</>
          )}
        </button>
        <button
          onClick={() => {
            toast.addToast({
              message: "Theme demo message",
              variant: "info",
              animation: "slide",
              mode,
              icon: <InfoCircledIcon className="w-5 h-5" />
            });
          }}
          className={`px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600`}
        >
          Show Toast
        </button>
      </div>
    </div>
  );
};

// Full Featured Demo
export const FullFeaturedDemo = () => {
  const toast = useToast();
  const [mode, setMode] = useState<'light' | 'dark'>('light');
  const [animation, setAnimation] = useState<'slide' | 'fade' | 'bounce' | 'pop'>('slide');
  const [appearance, setAppearance] = useState<'glow' | 'gradient'>('gradient');
  const [customDuration, setCustomDuration] = useState(4000);
  const [customMessage, setCustomMessage] = useState('Custom message here');

  const showToast = (variant: 'success' | 'error' | 'warning' | 'info', message?: string) => {
    const icons = {
      success: <CheckCircledIcon className="w-5 h-5" />,
      error: <CrossCircledIcon className="w-5 h-5" />,
      warning: <ExclamationTriangleIcon className="w-5 h-5" />,
      info: <InfoCircledIcon className="w-5 h-5" />
    };

    const gradientColors = {
      success: 'rgba(34, 197, 94, 1)',
      error: 'rgba(239, 68, 68, 1)',
      warning: 'rgba(234, 179, 8, 1)',
      info: 'rgba(59, 130, 246, 1)'
    };

    toast.addToast({
      message: message || `${variant.charAt(0).toUpperCase() + variant.slice(1)} message`,
      variant,
      animation,
      mode,
      icon: icons[variant],
      appearance,
      gradientColor: gradientColors[variant],
      duration: customDuration
    });
  };

  return (
    <div className={`p-6 rounded-lg ${mode === 'light' ? 'bg-white' : 'bg-gray-900'} shadow-lg`}>
      <div className="mb-6">
        <h2 className={`text-xl font-bold mb-4 ${mode === 'light' ? 'text-gray-900' : 'text-white'}`}>Toast Demo</h2>
        
        <div className="flex flex-wrap gap-4 mb-6">
          <button
            onClick={() => setMode(m => m === 'light' ? 'dark' : 'light')}
            className={`flex items-center gap-2 px-4 py-2 rounded-md ${
              mode === 'light' 
                ? 'bg-gray-800 text-white' 
                : 'bg-yellow-400 text-gray-900'
            }`}
          >
            {mode === 'light' ? (
              <><MoonIcon className="w-4 h-4" /> Dark Mode</>
            ) : (
              <><SunIcon className="w-4 h-4" /> Light Mode</>
            )}
          </button>
          
          <button
            onClick={() => setAppearance(a => a === 'glow' ? 'gradient' : 'glow')}
            className="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-md"
          >
            <MagicWandIcon className="w-4 h-4" />
            {appearance === 'glow' ? 'Glow' : 'Gradient'} Effect
          </button>
        </div>

        <div className="mb-6">
          <h3 className={`text-lg font-semibold mb-2 ${mode === 'light' ? 'text-gray-900' : 'text-white'}`}>Animation</h3>
          <div className="flex flex-wrap gap-2">
            {['slide', 'fade', 'bounce', 'pop'].map((anim) => (
              <button
                key={anim}
                onClick={() => setAnimation(anim as any)}
                className={`px-3 py-1 rounded-md ${
                  animation === anim
                    ? 'bg-blue-600 text-white'
                    : mode === 'light'
                      ? 'bg-gray-200 hover:bg-gray-300 text-gray-900'
                      : 'bg-gray-700 hover:bg-gray-600 text-white'
                }`}
              >
                {anim.charAt(0).toUpperCase() + anim.slice(1)}
              </button>
            ))}
          </div>
        </div>

        <div className="mb-6">
          <h3 className={`text-lg font-semibold mb-2 ${mode === 'light' ? 'text-gray-900' : 'text-white'}`}>
            Duration: {customDuration}ms
          </h3>
          <div className="flex items-center gap-4">
            <input
              type="range"
              min="1000"
              max="10000"
              step="500"
              value={customDuration}
              onChange={(e) => setCustomDuration(Number(e.target.value))}
              className="flex-1"
            />
            <div className={`text-sm ${mode === 'light' ? 'text-gray-500' : 'text-gray-400'} flex items-center`}>
              <ClockIcon className="w-4 h-4 mr-1" />
              {customDuration / 1000}s
            </div>
          </div>
        </div>

        <div className="mb-6">
          <h3 className={`text-lg font-semibold mb-2 ${mode === 'light' ? 'text-gray-900' : 'text-white'}`}>Custom Message</h3>
          <div className="flex gap-2">
            <input
              type="text"
              value={customMessage}
              onChange={(e) => setCustomMessage(e.target.value)}
              className={`flex-1 px-3 py-2 border rounded-md ${
                mode === 'light'
                  ? 'border-gray-300 bg-white text-gray-900'
                  : 'border-gray-600 bg-gray-800 text-white'
              }`}
              placeholder="Enter custom message"
            />
            <button
              onClick={() => showToast('info', customMessage)}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              Show Toast
            </button>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <button
          onClick={() => showToast('success')}
          className="px-6 py-3 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors flex items-center justify-center gap-2"
        >
          <CheckCircledIcon className="w-5 h-5" />
          Success Toast
        </button>
        
        <button
          onClick={() => showToast('error')}
          className="px-6 py-3 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors flex items-center justify-center gap-2"
        >
          <CrossCircledIcon className="w-5 h-5" />
          Error Toast
        </button>
        
        <button
          onClick={() => showToast('warning')}
          className="px-6 py-3 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 transition-colors flex items-center justify-center gap-2"
        >
          <ExclamationTriangleIcon className="w-5 h-5" />
          Warning Toast
        </button>
        
        <button
          onClick={() => showToast('info')}
          className="px-6 py-3 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors flex items-center justify-center gap-2"
        >
          <InfoCircledIcon className="w-5 h-5" />
          Info Toast
        </button>
      </div>
    </div>
  );
};



================================================
File: src/components/UI/toast/index.tsx
================================================
import React, { useRef, useState, useEffect, useCallback } from 'react';
import { AnimatePresence, motion } from 'framer-motion';
import {
  CrossCircledIcon,
  CheckCircledIcon,
  ExclamationTriangleIcon,
  InfoCircledIcon,
} from '@radix-ui/react-icons';
import { ToastVariantTypes, ToastAnimationTypes } from './types';
import { cn } from '../../../utils/cn';

interface ToastContainerData {
  id: number;
  message: string;
  variant: ToastVariantTypes;
  animation: ToastAnimationTypes;
  mode?: 'dark' | 'light';
  icon?: React.ReactNode;
  appearance?: 'glow' | 'gradient' | 'glassmorphism' | 'premium' | 'neon';
  gradientColor?: string;
  duration?: number;
  size?: 'sm' | 'md' | 'lg';
  position?:
    | 'top-right'
    | 'top-left'
    | 'bottom-right'
    | 'bottom-left'
    | 'top-center'
    | 'bottom-center';
  showProgress?: boolean;
  pauseOnHover?: boolean;
  actionButton?: {
    label: string;
    onClick: () => void;
  };
  dismissible?: boolean;
  priority?: 'low' | 'normal' | 'high' | 'urgent';
}

interface ToastNotificationProps extends ToastContainerData {
  onClose: (id: number) => void;
  timeoutMapRef: React.RefObject<Map<number, ReturnType<typeof setTimeout>>>;
  index: number; // Add index for proper positioning
}

export type ToastDataArgs = Omit<ToastContainerData, 'id'>;

export interface ToastManagerRef {
  addToast: (data: ToastDataArgs) => void;
  removeToast: (id: number) => void;
  clearAll: () => void;
}

const variantColors = {
  success: {
    primary: 'hsl(142.1, 76.2%, 36.3%)',
    secondary: 'hsl(142.1, 70.6%, 45.3%)',
    light: 'hsl(143, 85%, 96%)',
    dark: 'hsl(144.9, 80.4%, 10%)',
  },
  error: {
    primary: 'hsl(0, 84.2%, 60.2%)',
    secondary: 'hsl(0, 84.2%, 60.2%)',
    light: 'hsl(0, 100%, 98%)',
    dark: 'hsl(0, 72.2%, 50.6%)',
  },
  warning: {
    primary: 'hsl(38, 92%, 50%)',
    secondary: 'hsl(32, 94.6%, 43.7%)',
    light: 'hsl(48, 100%, 96.1%)',
    dark: 'hsl(20, 90.2%, 48.2%)',
  },
  info: {
    primary: 'hsl(221.2, 83.2%, 53.3%)',
    secondary: 'hsl(222.2, 89.8%, 61.8%)',
    light: 'hsl(210, 100%, 98%)',
    dark: 'hsl(224.3, 76.3%, 48%)',
  },
  default: {
    primary: 'rgb(100, 116, 139)',
    secondary: 'rgb(71, 85, 105)',
    light: 'rgb(248, 250, 252)',
    dark: 'rgb(51, 65, 85)',
  },
};

export const ToastContext = React.createContext<ToastManagerRef | undefined>(undefined);

// FIXED: Enhanced animation variants with proper positioning
const animationVariants = {
  slide: {
    hidden: {
      x: '120%',
      opacity: 0,
      scale: 0.8,
      filter: 'blur(8px)',
    },
    visible: (index: number) => ({
      x: 0,
      opacity: 1,
      scale: 1,
      filter: 'blur(0px)',
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 25,
        mass: 0.8,
        delay: index * 0.1, // Stagger animation based on position
      },
    }),
    exit: {
      x: '120%',
      opacity: 0,
      scale: 0.8,
      filter: 'blur(8px)',
      transition: {
        duration: 0.3,
        ease: [0.4, 0, 1, 1],
      },
    },
  },
  fade: {
    hidden: {
      opacity: 0,
      scale: 0.95,
      filter: 'blur(4px)',
    },
    visible: (index: number) => ({
      opacity: 1,
      scale: 1,
      filter: 'blur(0px)',
      transition: {
        duration: 0.4,
        ease: [0.4, 0, 0.2, 1],
        delay: index * 0.05,
      },
    }),
    exit: {
      opacity: 0,
      scale: 0.95,
      filter: 'blur(4px)',
      transition: {
        duration: 0.2,
        ease: [0.4, 0, 1, 1],
      },
    },
  },
  bounce: {
    hidden: {
      y: -100,
      opacity: 0,
      scale: 0.3,
    },
    visible: (index: number) => ({
      y: 0,
      opacity: 1,
      scale: 1,
      transition: {
        type: 'spring',
        stiffness: 400,
        damping: 15,
        mass: 0.6,
        delay: index * 0.1,
      },
    }),
    exit: {
      y: -100,
      opacity: 0,
      scale: 0.3,
      transition: {
        duration: 0.3,
        ease: [0.4, 0, 1, 1],
      },
    },
  },
  pop: {
    hidden: {
      opacity: 0,
      scale: 0,
      filter: 'brightness(0.5)',
    },
    visible: (index: number) => ({
      opacity: 1,
      scale: [0, 1.1, 1],
      filter: 'brightness(1)',
      transition: {
        type: 'spring',
        stiffness: 500,
        damping: 20,
        mass: 0.5,
        delay: index * 0.08,
      },
    }),
    exit: {
      opacity: 0,
      scale: 0,
      filter: 'brightness(0.5)',
      transition: {
        duration: 0.2,
        ease: [0.4, 0, 1, 1],
      },
    },
  },
  elastic: {
    hidden: {
      opacity: 0,
      scale: 0,
      x: -50,
    },
    visible: (index: number) => ({
      opacity: 1,
      scale: [0, 1.2, 0.9, 1.05, 1],
      x: 0,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 12,
        mass: 0.8,
        delay: index * 0.1,
      },
    }),
    exit: {
      opacity: 0,
      scale: 0,
      x: 50,
      transition: {
        duration: 0.3,
        ease: [0.4, 0, 1, 1],
      },
    },
  },
  flip: {
    hidden: {
      opacity: 0,
      rotateX: -90,
      scale: 0.8,
    },
    visible: (index: number) => ({
      opacity: 1,
      rotateX: 0,
      scale: 1,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 20,
        delay: index * 0.08,
      },
    }),
    exit: {
      opacity: 0,
      rotateX: 90,
      scale: 0.8,
      transition: {
        duration: 0.3,
        ease: [0.4, 0, 1, 1],
      },
    },
  },
};

// Enhanced variant styles (same as before)
// Helper function to get enhanced variant styles
const getEnhancedVariantStyles = (
  appearance: ToastContainerData['appearance'],
  variant: ToastVariantTypes,
  gradientColor: string,
  size: 'sm' | 'md' | 'lg' = 'md'
): { className: string; style: React.CSSProperties } => {
  const sizeStyles = {
    sm: 'min-w-[280px] max-w-[320px] p-3',
    md: 'min-w-[320px] max-w-[400px] p-4',
    lg: 'min-w-[400px] max-w-[500px] p-5',
  };

  const baseStyles = cn(
    'relative overflow-hidden backdrop-blur-sm border rounded-xl shadow-lg',
    'transform-gpu will-change-transform',
    sizeStyles[size]
  );

  const colors = variantColors[variant as keyof typeof variantColors] || variantColors.default;

  switch (appearance) {
    case 'premium':
      return {
        className: cn(
          baseStyles,
          'bg-gradient-to-br from-background to-muted/20',
          'border-border/40 shadow-2xl'
        ),
        style: {
          background: `
            linear-gradient(135deg,
              ${colors.light} 0%,
              ${colors.primary}10 50%,
              ${colors.secondary}10 100%
            )
          `,
          borderLeft: `4px solid ${colors.primary}`,
          boxShadow: `
            0 20px 25px -5px rgba(0,0,0,0.1),
            0 10px 10px -5px rgba(0,0,0,0.04),
            0 0 0 1px ${colors.primary}20,
            inset 0 1px 0 rgba(255,255,255,0.1)
          `,
        },
      };
      

    case 'gradient':
    default: {
      const parsedColor = gradientColor.includes('rgb') ? gradientColor : colors.primary;
      return {
        className: baseStyles,
        style: {
          borderLeft: `4px solid ${parsedColor}`,
          background: `
            linear-gradient(135deg, 
              ${createEnhancedGradient(parsedColor)} 0%, 
              ${parsedColor}20 100%
            )
          `,
          boxShadow: `
            0 10px 15px -3px rgba(0,0,0,0.1),
            0 4px 6px -2px rgba(0,0,0,0.05),
            0 0 0 1px ${parsedColor}20
          `,
          color: 'hsl(0, 0%, 100%)', // Ensure text is always readable
        },
      };
    }
  }
};

const createEnhancedGradient = (color: string) => {
  if (!color.includes('rgb')) return 'rgba(59, 130, 246, 0.1)';

  const arr = color.slice(color.indexOf('(') + 1, color.indexOf(')')).split(',');
  if (arr.length > 3) arr.pop();

  return `rgba(${arr.join(',')}, 0.08)`;
};

// FIXED: Position configurations
const positionConfig = {
  'top-right': 'top-4 right-4',
  'top-left': 'top-4 left-4',
  'bottom-right': 'bottom-4 right-4',
  'bottom-left': 'bottom-4 left-4',
  'top-center': 'top-4 left-1/2 -translate-x-1/2',
  'bottom-center': 'bottom-4 left-1/2 -translate-x-1/2',
};

export const ToastProvider = ({
  children,
  maxToasts = 5,
  defaultPosition = 'top-right',
}: {
  children: React.ReactNode;
  maxToasts?: number;
  defaultPosition?: keyof typeof positionConfig;
}) => {
  const [toasts, setToasts] = useState<ToastContainerData[]>([]);
  const timeoutMapRef = useRef<Map<number, ReturnType<typeof setTimeout>>>(new Map());

  const removeToast = useCallback((id: number) => {
    setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));
    const timeout = timeoutMapRef.current.get(id);
    if (timeout) {
      clearTimeout(timeout);
      timeoutMapRef.current.delete(id);
    }
  }, []);

  const clearAll = useCallback(() => {
    setToasts([]);
    timeoutMapRef.current.forEach((timeout) => clearTimeout(timeout));
    timeoutMapRef.current.clear();
  }, []);

  const addToast = useCallback(
    (data: ToastDataArgs) => {
      const {
        message,
        variant,
        animation,
        mode,
        icon,
        appearance = 'premium',
        gradientColor = 'var(--primary)',
        duration = 4000,
        size = 'md',
        position = defaultPosition,
        showProgress = true,
        pauseOnHover = true,
        actionButton,
        dismissible = true,
        priority = 'normal',
      } = data;

      const newToast: ToastContainerData = {
        id: Date.now() + Math.random(),
        message,
        variant,
        animation,
        mode,
        icon,
        appearance,
        gradientColor,
        duration,
        size,
        position,
        showProgress,
        pauseOnHover,
        actionButton,
        dismissible,
        priority,
      };

      setToasts((prevToasts) => {
        // FIXED: Always add new toasts to the beginning (top)
        let updatedToasts = [newToast, ...prevToasts];

        // Handle priority-based insertion
        if (priority === 'urgent') {
          const urgentToasts = [newToast];
          const nonUrgentToasts = prevToasts.filter((t) => t.priority !== 'urgent');
          updatedToasts = [...urgentToasts, ...nonUrgentToasts];
        }

        // Remove excess toasts from the end (bottom)
        if (updatedToasts.length > maxToasts) {
          const toRemove = updatedToasts.slice(maxToasts);
          toRemove.forEach((toast) => {
            const timeout = timeoutMapRef.current.get(toast.id);
            if (timeout) {
              clearTimeout(timeout);
              timeoutMapRef.current.delete(toast.id);
            }
          });
          updatedToasts = updatedToasts.slice(0, maxToasts);
        }

        return updatedToasts;
      });
    },
    [maxToasts, defaultPosition]
  );

  return (
    <ToastContext.Provider value={{ addToast, removeToast, clearAll }}>
      {children}
      {/* FIXED: Container with proper flex layout */}
      <div
        className={cn(
          'fixed flex flex-col gap-3 pointer-events-none',
          'z-[9999]', // Increased z-index to ensure it's above other content
          positionConfig[defaultPosition],
          'backdrop-blur-sm'
        )}
        style={
          {
            '--primary': variantColors.default.primary,
            '--primary-foreground': 'hsl(0, 0%, 100%)',
          } as React.CSSProperties
        }
      >
        {/* FIXED: Use proper AnimatePresence with layout */}
        <AnimatePresence mode="popLayout" initial={false}>
          {toasts.map((toast, index) => (
            <motion.div
              key={toast.id}
              layout // CRITICAL: This ensures proper repositioning
              className="pointer-events-auto"
            >
              <Toast
                {...toast}
                index={index} // Pass index for staggered animations
                onClose={removeToast}
                timeoutMapRef={timeoutMapRef}
              />
            </motion.div>
          ))}
        </AnimatePresence>
      </div>
    </ToastContext.Provider>
  );
};

// FIXED: Enhanced Toast Component with proper index handling
const Toast = ({
  message,
  onClose,
  id,
  animation,
  variant = 'default',
  mode = 'light',
  icon,
  appearance = 'premium',
  gradientColor = 'rgb(59, 130, 246)',
  duration = 4000,
  size = 'md',
  showProgress = true,
  pauseOnHover = true,
  actionButton,
  dismissible = true,
  index, // FIXED: Accept index prop
  timeoutMapRef,
}: ToastNotificationProps) => {
  const [isPaused, setIsPaused] = useState(false);
  const [progress, setProgress] = useState(100);

  const progressRef = useRef<number>(100);
  const intervalRef = useRef<ReturnType<typeof setInterval>>(null);

  // Default icons for variants
  const getDefaultIcon = (variant: ToastVariantTypes) => {
    const iconClass = 'h-5 w-5';
    switch (variant) {
      case 'success':
        return <CheckCircledIcon className={cn(iconClass, 'text-emerald-500')} />;
      case 'error':
        return <CrossCircledIcon className={cn(iconClass, 'text-red-500')} />;
      case 'warning':
        return <ExclamationTriangleIcon className={cn(iconClass, 'text-amber-500')} />;
      case 'info':
        return <InfoCircledIcon className={cn(iconClass, 'text-blue-500')} />;
      default:
        return <InfoCircledIcon className={cn(iconClass, 'text-(var(--primary))')} />;
    }
  };

  const displayIcon = icon || getDefaultIcon(variant);
  const styles = getEnhancedVariantStyles(appearance, variant, gradientColor, size);

  // Progress bar logic
  useEffect(() => {
    if (!showProgress || duration <= 0) return;

    const interval = 50;
    const step = (100 / duration) * interval;

    intervalRef.current = setInterval(() => {
      if (!isPaused) {
        progressRef.current = Math.max(0, progressRef.current - step);
        setProgress(progressRef.current);

        if (progressRef.current <= 0) {
          onClose(id);
        }
      }
    }, interval);

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [duration, isPaused, showProgress, id, onClose]);

  // Auto-close timeout
  useEffect(() => {
    if (duration <= 0) return;

    const timeoutId = setTimeout(() => onClose(id), duration);
    timeoutMapRef.current?.set(id, timeoutId);

    return () => {
      clearTimeout(timeoutId);
      timeoutMapRef.current?.delete(id);
    };
  }, [duration, id, onClose, timeoutMapRef]);

  const handleMouseEnter = () => {
    if (pauseOnHover) {
      setIsPaused(true);
    }
  };

  const handleMouseLeave = () => {
    if (pauseOnHover) {
      setIsPaused(false);
    }
  };

  return (
    <motion.div
      className={styles.className}
      style={styles.style}
      variants={animationVariants[animation]}
      initial="hidden"
      animate="visible"
      exit="exit"
      custom={index} // FIXED: Pass index to animation variants
      layout="position" // FIXED: Only animate position changes
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      whileHover={{
        scale: 1.02,
        transition: { duration: 0.2 },
      }}
      aria-live="assertive"
      role="alert"
    >
      {/* Progress Bar */}
      {showProgress && duration > 0 && (
        <motion.div
          className="absolute top-0 left-0 h-1 bg-gradient-to-r from-primary/60 to-primary rounded-t-xl"
          initial={{ width: '100%' }}
          animate={{ width: `${progress}%` }}
          transition={{ duration: 0.1, ease: 'linear' }}
        />
      )}

      <div className="flex items-start gap-3 relative z-[1]">
        {/* Icon */}
        <motion.div
          className="flex-shrink-0 mt-0.5"
          initial={{ scale: 0, rotate: -180 }}
          animate={{ scale: 1, rotate: 0 }}
          transition={{
            type: 'spring',
            stiffness: 400,
            damping: 15,
            delay: 0.1,
          }}
        >
          {displayIcon}
        </motion.div>

        {/* Content */}
        <div className="flex-1 min-w-0">
          <motion.p
            className={cn(
              'text-sm font-medium leading-relaxed',
              mode === 'dark' ? 'text-card-foreground' : 'text-foreground'
            )}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            {message}
          </motion.p>

          {/* Action Button */}
          {actionButton && (
            <motion.button
              className={cn(
                'mt-2 px-3 py-1 text-xs font-medium rounded-md',
                'bg-primary/10 hover:bg-primary/20 text-primary',
                'transition-colors duration-200'
              )}
              onClick={actionButton.onClick}
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.3 }}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              {actionButton.label}
            </motion.button>
          )}
        </div>

        {/* Close Button */}
        {dismissible && (
          <motion.button
            onClick={() => onClose(id)}
            className={cn(
              'flex-shrink-0 p-1 rounded-md transition-all duration-200',
              'hover:bg-black/10 dark:hover:bg-white/10',
              'text-muted-foreground hover:text-foreground'
            )}
            initial={{ opacity: 0, scale: 0 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.4 }}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            aria-label="Close notification"
          >
            <CrossCircledIcon className="h-4 w-4" />
          </motion.button>
        )}
      </div>
    </motion.div>
  );
};

// Enhanced hook for using toasts
export const useToast = () => {
  const context = React.useContext(ToastContext);
  if (!context) {
    throw new Error('useToast must be used within a ToastProvider');
  }

  return {
    ...context,
    success: (message: string, options?: Partial<ToastDataArgs>) =>
      context.addToast({
        message,
        variant: 'success',
        animation: 'slide',
        ...options,
      }),
    error: (message: string, options?: Partial<ToastDataArgs>) =>
      context.addToast({
        message,
        variant: 'error',
        animation: 'bounce',
        ...options,
      }),
    warning: (message: string, options?: Partial<ToastDataArgs>) =>
      context.addToast({
        message,
        variant: 'warning',
        animation: 'pop',
        ...options,
      }),
    info: (message: string, options?: Partial<ToastDataArgs>) =>
      context.addToast({
        message,
        variant: 'info',
        animation: 'fade',
        ...options,
      }),
  };
};

export default { ToastProvider, useToast };



================================================
File: src/components/UI/toast/types.ts
================================================
export type ToastAnimationTypes = 'slide' | 'fade' | 'bounce' | 'pop';
export type ToastVariantTypes = 'success' | 'error' | 'warning' | 'info' | 'default';

export type RGB = `rgb(${number}, ${number}, ${number})`;
export type RGBA = `rgba(${number}, ${number}, ${number}, ${number})`;
export type HEX = `#${string}`;
export type Color = RGB | RGBA | HEX | string;

export interface GradientOptions {
  start: Color;
  end: Color;
  angle?: number;
}

export const DEFAULT_GRADIENTS: Record<ToastVariantTypes, GradientOptions> = {
  success: {
    start: 'var(--success)',
    end: 'var(--success)',
    angle: 135
  },
  error: {
    start: 'var(--destructive)',
    end: 'var(--destructive)',
    angle: 135
  },
  warning: {
    start: 'var(--warning)',
    end: 'var(--warning)',
    angle: 135
  },
  info: { 
    start: 'var(--info)',
    end: 'var(--info)',
    angle: 135
  },
  default: {
    start: 'var(--primary)',
    end: 'var(--primary)',
    angle: 135
  }
};


================================================
File: src/components/UI/toast/use-toast.ts
================================================
import { useContext } from "react";
import { ToastContext } from "."; //! might have to replace with the absolute path

export const useToast = () => {
    const ctx = useContext(ToastContext);
    if (!ctx) throw new Error('useToast must be used within a ToastProvider');
    return ctx;
};


================================================
File: src/components/UI/tooltip/index.tsx
================================================
import * as TooltipPrimitive from "@radix-ui/react-tooltip";
import { motion, AnimatePresence } from "framer-motion";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "../../../utils/cn";
import { ReactNode, useState } from "react";

// Define animation variants
const motionVariants = {
  fade: {
    initial: { opacity: 0 },
    animate: { opacity: 1, transition: { duration: 0.15 } },
    exit: { opacity: 0, transition: { duration: 0.1 } },
  },
  scale: {
    initial: { opacity: 0, scale: 0.95 },
    animate: { opacity: 1, scale: 1, transition: { duration: 0.15 } },
    exit: { opacity: 0, scale: 0.95, transition: { duration: 0.1 } },
  },
  slideUp: {
    initial: { opacity: 0, y: 6 },
    animate: { opacity: 1, y: 0, transition: { duration: 0.15 } },
    exit: { opacity: 0, y: 6, transition: { duration: 0.1 } },
  },
  slideDown: {
    initial: { opacity: 0, y: -6 },
    animate: { opacity: 1, y: 0, transition: { duration: 0.15 } },
    exit: { opacity: 0, y: -6, transition: { duration: 0.1 } },
  },
  slideLeft: {
    initial: { opacity: 0, x: 6 },
    animate: { opacity: 1, x: 0, transition: { duration: 0.15 } },
    exit: { opacity: 0, x: 6, transition: { duration: 0.1 } },
  },
  slideRight: {
    initial: { opacity: 0, x: -6 },
    animate: { opacity: 1, x: 0, transition: { duration: 0.15 } },
    exit: { opacity: 0, x: -6, transition: { duration: 0.1 } },
  },
};

type AnimationVariant = keyof typeof motionVariants;

// Tooltip style
const tooltipVariants = cva(
  "px-3 py-1.5 text-sm shadow-md border z-50 select-none",
  {
    variants: {
      rounded: {
        sm: "rounded-md",
        md: "rounded-xl",
        full: "rounded-full",
      },
      bg: {
        dark: "bg-zinc-900 text-white border-zinc-800",
        light: "bg-white text-zinc-900 border-zinc-200",
        slate: "bg-slate-800 text-white border-slate-700",
        default: "bg-white text-gray-900",
        transparent: "bg-transparent text-transparent",
        glass: "bg-white/10 backdrop-blur-lg text-blue-200",
        gradient: "bg-gradient-to-r from-blue-500 to-purple-500 text-white",
        primary: "bg-blue-400 text-white",
      },
    },
    defaultVariants: {
      rounded: "sm",
      bg: "dark",
    },
  }
);

interface TooltipProps extends VariantProps<typeof tooltipVariants> {
  content: ReactNode;
  children: ReactNode;
  className?: string;
  animation?: AnimationVariant;
}

export const Tooltip = ({
  children,
  content,
  className,
  animation = "fade",
  rounded,
  bg,
}: TooltipProps) => {
  const [open, setOpen] = useState(false);

  return (
    <TooltipPrimitive.Provider delayDuration={200}>
      <TooltipPrimitive.Root open={open} onOpenChange={setOpen}>
        <TooltipPrimitive.Trigger asChild>{children}</TooltipPrimitive.Trigger>
        <AnimatePresence>
          {open && (
            <TooltipPrimitive.Portal forceMount>
              <TooltipPrimitive.Content asChild sideOffset={6}>
                <motion.div
                  key="tooltip"
                  initial="initial"
                  animate="animate"
                  exit="exit"
                  variants={motionVariants[animation]}
                  className={cn(tooltipVariants({ rounded, bg }), className)}
                >
                  {content}
                </motion.div>
              </TooltipPrimitive.Content>
            </TooltipPrimitive.Portal>
          )}
        </AnimatePresence>
      </TooltipPrimitive.Root>
    </TooltipPrimitive.Provider>
  );
};



================================================
File: src/css/custom.css
================================================
/**
 * Any CSS included here will be global. The classic template
 * bundles Infima by default. Infima is a CSS framework designed to
 * work well with Docusaurus.
 */

@import 'tailwindcss';
/* Custom styles for the Docusaurus theme */

:root {
  --ifm-color-primary: #99000d;
  --ifm-color-primary-dark: #8a000c;
  --ifm-color-primary-darker: #82000b;
  --ifm-color-primary-darkest: #6b0009;
  --ifm-color-primary-light: #a8000e;
  --ifm-color-primary-lighter: #b0000f;
  --ifm-color-primary-lightest: #c70011;
  --ifm-background-color: #ffffff;


  /* Theme Colors */
  --radius: 0.625rem;
  --background: var(--ifm-background-color, #ffffff);
  --foreground: var(--ifm-font-color-base, #1c1e21);
  --card: var(--ifm-card-background-color, #ffffff);
  --card-foreground: var(--ifm-font-color-base, #1c1e21);
  --popover: var(--ifm-card-background-color, #ffffff);
  --popover-foreground: var(--ifm-font-color-base, #1c1e21);
  --primary: var(--ifm-color-primary);
  --primary-foreground: #ffffff;
  --secondary: var(--ifm-color-emphasis-200, #f5f5f5);
  --secondary-foreground: var(--ifm-color-emphasis-800, #3e3e3e);
  --muted: var(--ifm-color-emphasis-300, #e0e0e0);
  --muted-foreground: var(--ifm-color-emphasis-600, #757575);
  --accent: var(--ifm-color-emphasis-200, #f5f5f5);
  --accent-foreground: var(--ifm-color-emphasis-800, #3e3e3e);
  --destructive: var(--ifm-color-danger, #d93636);
  --border: var(--ifm-color-emphasis-300, #e0e0e0);
  --input: var(--ifm-color-emphasis-300, #e0e0e0);
  --ring: var(--ifm-color-primary-light);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: var(--ifm-background-color, #ffffff);
  --sidebar-foreground: var(--ifm-font-color-base, #1c1e21);
  --sidebar-primary: var(--ifm-color-primary);
  --sidebar-primary-foreground: #ffffff;
  --sidebar-accent: var(--ifm-color-emphasis-200, #f5f5f5);
  --sidebar-accent-foreground: var(--ifm-color-emphasis-800, #3e3e3e);
  --sidebar-border: var(--ifm-color-emphasis-300, #e0e0e0);
  --sidebar-ring: var(--ifm-color-primary-light);
  --warning: var(--ifm-color-warning);
  --warning-foreground: var(--ifm-color-warning-foreground);
  --success: var(--ifm-color-success);
  --success-foreground: var(--ifm-color-success-foreground);
  --error: var(--ifm-color-error);
  --error-foreground: var(--ifm-color-error-foreground);

  --primary-light: var(--ifm-color-primary-light);
  --primary-dark: var(--ifm-color-primary-dark);
  --destructive-light: #ef4444; /* red-400 */
  --destructive-dark: #b91c1c; /* red-700 */
  --success-light: #34d399; /* emerald-400 */
  --success-dark: #047857; /* emerald-700 */
  --warning-light: #fbbf24; /* yellow-300 */
  --warning-dark: #b45309; /* yellow-500 */
  --info: #06b6d4; /* cyan-500 */
  --info-light: #22d3ee; /* cyan-400 */
  --info-dark: #0e7490; /* cyan-600 */
  --info-foreground: #ffffff;
  --red-primary: #f12828; /* red-400 */

  --ifm-paragraph-margin-bottom: 0rem;
  
}

[data-theme='dark'] {
  --ifm-color-primary: #fb6a4a;
  --ifm-color-primary-dark: #fa502a;
  --ifm-color-primary-darker: #fa431a;
  --ifm-color-primary-darkest: #df2c05;
  --ifm-color-primary-light: #fc846a;
  --ifm-color-primary-lighter: #fc917a;
  --ifm-color-primary-lightest: #fdb9a9;
  /* Theme Colors */
  --radius: 0.625rem;
  --background: var(--ifm-background-color, #000000);
  --foreground: var(--ifm-font-color-base, #ffffff);
  --card: var(--ifm-card-background-color, #242526);
  --card-foreground: var(--ifm-font-color-base, #ffffff);
  --popover: var(--ifm-card-background-color, #242526);
  --popover-foreground: var(--ifm-font-color-base, #ffffff);
  --primary: var(--ifm-color-primary);
  --primary-foreground: #121212;
  --secondary: var(--ifm-color-emphasis-200, #303030);
  --secondary-foreground: var(--ifm-color-emphasis-800, #d4d4d4);
  --muted: var(--ifm-color-emphasis-300, #424242);
  --muted-foreground: var(--ifm-color-emphasis-600, #a3a3a3);
  --accent: var(--ifm-color-emphasis-200, #303030);
  --accent-foreground: var(--ifm-color-emphasis-800, #d4d4d4);
  --destructive: var(--ifm-color-danger, #ff6b6b);
  --border: var(--ifm-color-emphasis-300, #424242);
  --input: var(--ifm-color-emphasis-300, #424242);
  --ring: var(--ifm-color-primary-light);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: var(--ifm-background-color, #121212);
  --sidebar-foreground: var(--ifm-font-color-base, #ffffff);
  --sidebar-primary: var(--ifm-color-primary);
  --sidebar-primary-foreground: #121212;
  --sidebar-accent: var(--ifm-color-emphasis-200, #303030);
  --sidebar-accent-foreground: var(--ifm-color-emphasis-800, #d4d4d4);
  --sidebar-border: var(--ifm-color-emphasis-300, #424242);
  --sidebar-ring: var(--ifm-color-primary-light);
  --warning: var(--ifm-color-warning);
  --warning-foreground: var(--ifm-color-warning-foreground);
  --success: var(--ifm-color-success);
  --success-foreground: var(--ifm-color-success-foreground);
  --error: var(--ifm-color-error);
  --error-foreground: var(--ifm-color-error-foreground);

  --red-primary: var(--ifm-color-primary);

  --primary-light: var(--ifm-color-primary-light);
  --primary-dark: var(--ifm-color-primary-dark);
  --destructive-light: #ef4444; /* red-400 */
  --destructive-dark: #b91c1c; /* red-700 */
  --success-light: #34d399; /* emerald-400 */
  --success-dark: #047857; /* emerald-700 */
  --warning-light: #fbbf24; /* yellow-300 */
  --warning-dark: #b45309; /* yellow-500 */
  --info: #06b6d4; /* cyan-500 */
  --info-light: #22d3ee; /* cyan-400 */
  --info-dark: #0e7490; /* cyan-600 */
  --info-foreground: #ffffff;

}

@theme inline{
  --color-primary: var(--primary);
  --color-background: var(--background);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);  
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-warning: var(--warning);
  --color-success: var(--success);
  --color-error: var(--error);
  --color-warning-foreground: var(--warning-foreground);
  --color-success-foreground: var(--success-foreground);
  --color-error-foreground: var(--error-foreground);
  --color-red-primary: var(--red-primary);

  --color-primary-light: var(--primary-light);
  --color-primary-dark: var(--primary-dark);
  --color-destructive-light: var(--destructive-light);
  --color-destructive-dark: var(--destructive-dark);
  --color-success-light: var(--success-light);
  --color-success-dark: var(--success-dark);
  --color-warning-light: var(--warning-light);
  --color-warning-dark: var(--warning-dark);
  --color-info: var(--info);
  --color-info-light: var(--info-light);
  --color-info-dark: var(--info-dark);
  --color-info-foreground: var(--info-foreground);

  --animate-shine: shine var(--duration) infinite linear;
 
  @keyframes shine {
    0% {
      background-position: 0% 0%;
    }
    50% {
      background-position: 100% 100%;
    }
    to {
      background-position: 0% 0%;
    }
  }

  --animate-marquee: marquee var(--duration) infinite linear;
  --animate-marquee-vertical: marquee-vertical var(--duration) linear infinite;
 
  @keyframes marquee {
    from {
      transform: translateX(0);
    }
    to {
      transform: translateX(calc(-100% - var(--gap)));
    }
  }
  @keyframes marquee-vertical {
    from {
      transform: translateY(0);
    }
    to {
      transform: translateY(calc(-100% - var(--gap)));
    }
  }
}

.theme-code-block {
  font-size: 1.1rem;
}

.theme-code-block-highlighted-line {
  background-color: #ffeeba;
}

.navbar {
  background: hsl(var(--background) / 0.1);
  -webkit-backdrop-filter: blur(10px);
  -moz-backdrop-filter: blur(10px);
  width: 100%;
  display: flex;
  box-shadow: none;
  justify-content: center;
  align-items: center;
  margin: 0 auto;
  backdrop-filter: blur(10px);
  
  @media (min-width: 1024px) {
    padding: 2rem 2rem;
  }
}

.footer {
  background: transparent;
  border-top-color: hsl(var(--border));
}

.header--github-link {
  width: 32px;
  height: 32px;
  padding: 6px;
  margin-right: 4px;
  border-radius: 50%;
  transition: background var(--ifm-transition-fast);
}

.header--github-link:hover {
  background: var(--ifm-color-emphasis-200);
}

.breadcrumbs {
  display: flex;
  align-items: center;
}

.breadcrumbs__item {
  display: flex;
  align-items: center;
}

.header--github-link:before {
  content: '';
  height: 100%;
  display: block;
  background: url("data:image/svg+xml,%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12'/%3E%3C/svg%3E")
    no-repeat;
}

html[data-theme='dark'] .header--github-link:before {
  background: url("data:image/svg+xml,%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='white' d='M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12'/%3E%3C/svg%3E")
    no-repeat;
  }

h1{
  margin: 0.5rem;
}


================================================
File: src/pages/floating-components.tsx
================================================
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Slider } from '../components/UI/slider';
import { Switch } from '../components/UI/switch';
import { Button } from '../components/UI/button';
import { Spinner } from '../components/UI/spinner';
import { Badge } from '../components/UI/badge';
import { ChevronRight, Mail } from 'lucide-react';
import { Breadcrumbs } from '../components/UI/breadcrumbs';
import { Tooltip } from '../components/UI/tooltip';

const FloatingComponents: React.FC = () => {
  const [animatedStates, setAnimatedStates] = useState<Record<string, any>>({
    currentStep: 0,
    isTooltipOpen: false,
    tooltipHovered: false,
  });

  useEffect(() => {
    const intervals: NodeJS.Timeout[] = [];

    // Toggle switch state
    const switchInterval = setInterval(() => {
      setAnimatedStates((prev) => ({
        ...prev,
        switchChecked: !prev.switchChecked,
      }));
    }, 3000);

    // Update slider value with smoother transitions
    let direction = 1;
    const sliderInterval = setInterval(() => {
      setAnimatedStates((prev) => {
        const currentValue = prev.sliderValue || 0;
        let newValue = currentValue + (direction * 20);
        
        // Reverse direction at boundaries
        if (newValue >= 100) {
          newValue = 80;
          direction = -1;
        } else if (newValue <= 0) {
          newValue = 20;
          direction = 1;
        }
        
        return {
          ...prev,
          sliderValue: newValue,
        };
      });
    }, 4000); // Slower interval for smoother transitions

    // Update badge count
    const badgeInterval = setInterval(() => {
      setAnimatedStates((prev) => ({
        ...prev,
        badgeCount: ((prev.badgeCount || 0) % 9) + 1,
      }));
    }, 2000);

    // Cycle through breadcrumb steps (0, 1, 2)
    const breadcrumbInterval = setInterval(() => {
      setAnimatedStates((prev) => ({
        ...prev,
        currentStep: (prev.currentStep + 1) % 3, // Cycle through 0, 1, 2
      }));
    }, 3000);

    // Auto-show tooltip if not hovered
    const tooltipInterval = setInterval(() => {
      setAnimatedStates((prev) => ({
        ...prev,
        isTooltipOpen: !prev.tooltipHovered && !prev.isTooltipOpen, // Only show if not hovered
      }));
    }, 8000);

    intervals.push(switchInterval, sliderInterval, badgeInterval, breadcrumbInterval, tooltipInterval);
    return () => intervals.forEach(clearInterval);
  }, []);

  const showcaseComponents = [
    {
      id: 'breadcrumbs',
      demo: (
        <div className="w-full">
          <Breadcrumbs
            steps={['Pay', 'Confirm']}
            currentStep={animatedStates.currentStep}
            separatorIcon={ChevronRight}
            variant="step"
            onStepClick={(step) => {
              setAnimatedStates(prev => ({
                ...prev,
                currentStep: step
              }));
            }}
            className="cursor-pointer transition-all duration-300 hover:scale-105"
          />
        </div>
      ),
      position: { top: '5%', left: '10%', width: '60%', height: '12%', zIndex: 1 },
    },
    {
      id: 'square-switch',
      demo: (
        <div className="flex items-center justify-center">
          <Switch
            variant="square"
            animation="bounce"
            checked={animatedStates.switchChecked ?? true}
          />
        </div>
      ),
      position: { top: '8%', right: '5%', width: '20%', height: '8%', zIndex: 3 },
    },
    {
      id: 'variant-button',
      demo: (
        <div className="flex items-center justify-center h-full">
          <Button variant="default" animationVariant="wobble" size="sm">
            Wobble
          </Button>
        </div>
      ),
      position: { top: '25%', left: '25%', width: '25%', height: '10%', zIndex: 2 },
    },
    {
      id: 'badge',
      demo: (
        <div className="flex items-center justify-center h-full">
          <div className="relative inline-flex items-center">
            <Mail className="h-8 w-8" />
            <Badge text={String(animatedStates.badgeCount || 3)} type="primary" variant="bounce" className='w-8' />
          </div>
        </div>
      ),
      position: { top: '25%', right: '25%', width: '20%', height: '15%', zIndex: 4 },
    },
    {
      id: 'spinner',
      demo: (
        <div className="flex items-center justify-center h-full">
          <Spinner size={32} color="border-primary" />
        </div>
      ),
      position: { top: '45%', left: '15%', width: '30%', height: '18%', zIndex: 5 },
    },
    {
      id: 'ios-switch',
      demo: (
        <div className="flex items-center justify-center h-full">
          <Switch variant="ios" animation="jelly" checked={animatedStates.switchChecked} />
        </div>
      ),
      position: { top: '35%', right: '5%', width: '25%', height: '8%', zIndex: 1 },
    },
    {
      id: 'retro-slider',
      demo: (
        <div className="w-full px-2">
          <Slider
            value={[100 - (animatedStates.sliderValue || 50)]}
            max={100}
            variant="retro"
            showValue
          />
        </div>
      ),
      position: { top: '75%', left: '15%', width: '35%', height: '20%', zIndex: 1 },
    },
    {
      id: 'bouncy-button',
      demo: (
        <div className="flex items-center justify-center h-full">
          <Button variant="default" animationVariant="bounceSmooth" size="sm">
            Bouncy
          </Button>
        </div>
      ),
      position: { top: '70%', right: '10%', width: '30%', height: '12%', zIndex: 2 },
    },
    {
      id: 'tooltip',
      demo: (
        <div className="flex items-center justify-center h-full">
          <Tooltip 
            content={
                <div>Wassup!</div>
            } 
            animation="slideUp"
            bg="glass"
            className="transition-all duration-300"
          >
            <button 
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors duration-200"
            >
              Hover Me
            </button>
          </Tooltip>
        </div>
      ),
      position: { top: '55%', right: '30%', width: '30%', height: '15%', zIndex: 4 },
    },
  ];

  return (
    // Changed from 'fixed' to 'absolute' and positioned relative to container
    <div className="absolute top-0 right-0 w-1/2 h-full overflow-hidden pointer-events-none">
      {showcaseComponents.map((component, index) => {
        const position = component.position;

        return (
          <motion.div
            key={component.id}
            className="absolute pointer-events-auto"
            style={{
              top: position.top,
              left: position.left,
              right: position.right,
              width: position.width,
              height: position.height,
              zIndex: position.zIndex,
            }}
            initial={{
              opacity: 0,
              scale: 0.8,
              y: 20,
            }}
            animate={{
              opacity: 1,
              scale: 1,
              y: 0,
            }}
            transition={{
              duration: 0.6,
              delay: index * 0.2,
              ease: 'easeOut',
            }}
          >
            <motion.div
              animate={{
                y: [0, -6, 0],
                rotate: [0, 1, 0, -1, 0],
              }}
              transition={{
                duration: 4 + (index % 3),
                repeat: Infinity,
                ease: 'easeInOut',
              }}
              className="h-full"
            >
              <div className="relative h-full backdrop-blur-md rounded-2xl p-8 border border-gray-700/50 hover:border-gray-600/70 transition-all duration-300 group hover:bg-gray-800/50">
                <div className="flex-1 flex items-center justify-center h-full">
                  {component.demo}
                </div>
                {/* <div className="absolute inset-0 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                <div className="absolute inset-0 rounded-2xl border border-white/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300" /> */}
              </div>
            </motion.div>
          </motion.div>
        );
      })}
    </div>
  );
};

export default FloatingComponents;



================================================
File: src/pages/index.module.css
================================================
.heroBanner {
  text-align: center;
  position: relative;
  overflow: hidden;
  background: transparent;

}

.heroContent {
  position: relative;
  z-index: 1;
  padding: 1rem 0;
  margin: 0 auto;
  max-width: 100%;
  width: 100%;

  @media (min-width: 640px) {
    padding: 1.5rem 0;
    max-width: 90%;
  }
  
  @media (min-width: 1024px) {
    padding: 2rem 0;
    max-width: 1200px;
  }
}

.heroTitle {
  font-size: 4.5rem;
  letter-spacing: -0.05em;
  background-clip: text;
}

.heroSubtitle {
  font-size: 1.25rem;
  max-width: 650px;
  margin: 0 auto 2.5rem;
  line-height: 1.6;
  color: #99000d;

  [data-theme='dark'] {
    color: hsl(var(--primary));
    color: #fb6a4a;
  }
}

.buttons {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
}

/* Responsive adjustments */
@media (max-width: 996px) {
  .heroTitle {
    font-size: 4.5rem;
  }
}

@media (max-width: 768px) {
  .heroBanner {
    padding: 6rem 2rem;
  }
  .heroTitle {
    font-size: 3.5rem;
  }
  .heroSubtitle {
    font-size: 1.1rem;
  }
}




================================================
File: src/pages/index.tsx
================================================
import { useEffect, useState, type ReactElement } from 'react';
import clsx from 'clsx';
import Link from '@docusaurus/Link';
import Layout from '@theme/Layout';
import HomepageFeatures from '@site/src/components/HomepageFeatures';
import { motion } from 'framer-motion';

import styles from './index.module.css';
import { ArrowRight, Briefcase, Code, Download, Github, Layers, Palette } from 'lucide-react';
import { Button } from '../components/UI/button';
import { ToastProvider } from '../components/UI/toast';
import '../css/custom.css';
import DarkVeil from '../components/UI/darkveil';
import LightVeil from '../components/UI/darkveil/lightveil';
import { ShineBorder } from '../components/UI/shimmercard';

const getTheme = (): string => {
  if (typeof window === 'undefined') {
    return 'dark';
  }
  return document.documentElement.getAttribute('data-theme') || 'dark';
};

function HomepageHeader(): ReactElement {
  return (
    <header className={clsx(styles.heroBanner, "flex items-center")}>
      <div className={clsx(styles.heroContent, "w-full relative overflow-hidden")}>

        
        <section className="relative">
          <div className="relative z-10 max-w-7xl mx-auto px-4">
            
            {/* Logo and Title */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
            >
              <div className="group inline-flex items-center gap-2 hover:gap-4 transition-all duration-300">
                <div className="relative">
                  <div className="relative rounded-2xl px-5 py-4 group-hover:scale-105 transition-all duration-300">
                    <img
                      src="img/logo.png"
                      alt="Ignix UI"
                      width={32}
                      height={32}
                      className="group-hover:scale-110 transition-transform duration-300"
                    />
                  </div>
                </div>
                <h1 className={clsx(
                  styles.heroTitle,
                  'text-4xl md:text-5xl p-0'
                )}>
                  <span className="bg-clip-text text-transparent bg-primary mr-2 font-medium">
                  Ignix
                  </span>
                  <span className="bg-clip-text text-primary ml-2 font-bold">
                    UI
                  </span>
                </h1>
              </div>
            </motion.div>

            {/* Tagline */}
            <motion.div
              className="max-w-3xl mx-auto mb-6 text-center"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.4 }}
            >
              <span className="text-2xl md:text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-neutral-700 to-neutral-900 dark:from-neutral-200 dark:to-white">
                Ship your vision, not your components
              </span>
              <p className="text-lg md:text-xl ">
                build stunning UIs faster with our powerful, versatile component library
              </p>
            </motion.div>

            {/* Quick Stats */}
            <motion.div
              className="flex flex-wrap justify-center gap-6 mb-6"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.6 }}
            >
              <div className="flex items-center gap-3 px-4 py-2 rounded-full backdrop-blur-sm">
                <Download className="h-5 w-5 text-red-500" />
                <span className="text-sm font-mono">npm i @mindfiredigital/ignix-ui</span>
              </div>
              <div className="flex items-center gap-3 px-4 py-2 rounded-full backdrop-blur-sm">
                <Code className="h-5 w-5 text-orange-500" />
                <span className="text-sm font-mono">typescript ready</span>
              </div>
            </motion.div>

            {/* CTA Buttons */}
            <motion.div
              className="flex flex-wrap justify-center gap-4 mb-6"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.8 }}
            >
              <Link to="/docs/introduction">
                <Button
                  size="xl"
                  className="px-8 py-3 transition-all duration-300"
                >
                  Get Started
                  <ArrowRight className="ml-2 h-5 w-5" strokeWidth={2.5} />
                </Button>
              </Link>

              <Link to="https://github.com/mindfiredigital/ignix-ui">
                <Button
                  variant="outline"
                  size="xl"
                  className="px-8 py-3 border-2 hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors duration-300"
                >
                  <Github className="mr-2 h-5 w-5" strokeWidth={2.5} />
                  GitHub
                </Button>
              </Link>
            </motion.div>
          </div>
          <ValuePropsSection />
          <HomepageFeatures />

        </section>
      </div>
    </header>
  );
}

const ValuePropsSection = () => {
  const features = [
    {
      icon: <Layers className="h-6 w-6 text-red-500" />,
      title: '100+ Components',
      description: 'Pre-built, customizable components with infinite variations for React and Next.js. Stop fiddling with CSS and start shipping features.',
    },
    {
      icon: <Briefcase className="h-6 w-6 text-red-500" />,
      title: 'Domain-Specific Kits',
      description: '(Coming Soon) Specialized component kits for healthcare, fintech, and more. Launch faster with domain-specific UI patterns.',
    },
    {
      icon: <Palette className="h-6 w-6 text-red-500" />,
      title: 'Custom Theming',
      description: 'Fully themeable components that adapt to your brand. No design debt, just beautiful UIs that scale.',
    },
  ];

  return (
    <section className="py-20 px-4 relative z-10">
      <div className="max-w-7xl mx-auto">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {features.map((feature, index) => (
            <motion.div
              key={index}
              className="p-4 bg-white/5 dark:bg-black/5 backdrop-blur-lg shadow-lg rounded-xl"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
            >
              <ShineBorder shineColor="#fa431a, #fc917a" className='rounded-xl' />

              <div className="relative z-10 flex flex-col items-start text-left ">
                <div className='flex items-center gap-2'>
                  <div className='p-2 rounded-full'>
                  {feature.icon} 
                  </div>
                  <p className="text-xl font-medium text-left">{feature.title}</p>
                </div>
                <p className="text-neutral-600 text-left">{feature.description}</p>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default function Home(): ReactElement {
  // Usage in component
  const [theme, setTheme] = useState(() => getTheme());

  useEffect(() => {
    const observer = new MutationObserver(() => {
      setTheme(getTheme());
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme'],
    });

    return () => observer.disconnect();
  }, []);
  // const {siteConfig} = useDocusaurusContext();
  return (
    <Layout
      title={`Home`}
      description="Beautiful, animated UI components for modern web applications"
    >
      <ToastProvider>
        <div style={{ position: 'relative', minHeight: '100vh', overflow: 'hidden' }}>
          {/* DarkVeil background */}
          {theme === 'light' ? (
            <div
              className="display-component-display"
              style={{
                position: 'fixed',
                top: 0,
                left: 0,
                width: '100%',
                height: '100%',
                zIndex: 0,
              }}
            >
              <LightVeil speed={0.6} hueShift={50} warpAmount={1.4} />
            </div>
          ) : (
            <div
              className="display-component-display"
              style={{
                position: 'fixed',
                top: 0,
                left: 0,
                width: '100%',
                height: '100%',
                zIndex: 0,
              }}
            >
              <DarkVeil speed={0.6} hueShift={234} warpAmount={1.4} />
            </div>
          )}
          {/* Content */}
          <div style={{ position: 'relative', zIndex: 1 }}>
            <HomepageHeader />
            {/* <main>
              <HomepageFeatures />
            </main> */}
          </div>
        </div>
      </ToastProvider>
    </Layout>
  );
}



================================================
File: src/pages/markdown-page.md
================================================
---
title: Markdown page example
---

# Markdown page example

You don't need React to write simple standalone pages.



================================================
File: src/utils/cn.ts
================================================
import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


================================================
File: static/.nojekyll
================================================




================================================
File: versioned_docs/version-1.0.0/installation.mdx
================================================
---
sidebar_position: 2
---
# Installation

Add Ignix UI to your React project in a few simple steps.

## Install Package

```bash
# npm
npm install @mindfiredigital/ignix-ui

# yarn
yarn add @mindfiredigital/ignix-ui

# pnpm
pnpm add @mindfiredigital/ignix-ui
```

## Setup

1. Initialize the package:
```bash
npx @mindfiredigital/ignix-ui init
```

## Next Steps

Explore available components:
- [Button](/docs/components/button)
- [Accordion](/docs/components/accordion)
- [Badge](/docs/components/badge)
- [Breadcrumbs](/docs/components/breadcrumbs)
- [Dialog Box](/docs/components/dialog-box)
- [Dropdown](/docs/components/dropdown)
- [Input](/docs/components/input)
- [Navbar](/docs/components/navbar)
- [Sidebar](/docs/components/sidebar)
- [Slider](/docs/components/slider)
- [Spinner](/docs/components/spinner)
- [Stepper](/docs/components/stepper)
- [Switch](/docs/components/switch)
- [Tab](/docs/components/tab)
- [Table](/docs/components/table)
- [Textarea](/docs/components/textarea)
- [Toast](/docs/components/toast)
- [Tooltip](/docs/components/tooltip)


================================================
File: versioned_docs/version-1.0.0/introduction.mdx
================================================
---
sidebar_position: 1
---
# Introduction

Ignix UI is a lightweight React component library with smooth animations built-in.

## What is Ignix UI?

A collection of reusable React components that combine clean design with subtle animations. Built with TypeScript and Framer Motion, it helps you create engaging interfaces quickly.

## Key Features

- **Clean Design**: Simple, modern components ready to use
- **Smooth Animations**: Built with Framer Motion for fluid interactions
- **Customizable**: Easy to style and adapt to your needs
- **TypeScript Ready**: Full type safety included
- **Accessible**: Built following accessibility best practices

## Why Choose Ignix UI?

Modern web interfaces need more than just static components. Ignix UI provides the right balance of design and motion to create engaging experiences without unnecessary complexity.

## Get Started

Ready to begin? Check out the [Installation](/docs/installation) guide to get started.


================================================
File: versioned_docs/version-1.0.0/components/accordion.mdx
================================================
---
sidebar_position: 1
title: Accordion
description: A vertically stacked set of interactive headings that each reveal a section of content.
---

import AccordionDemo from '@site/src/components/Demo/Accordion';
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from '@site/src/components/UI/accordion';

## Overview

A vertically stacked set of interactive headings that each reveal a section of content.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
<div className="flex flex-col space-y-4 mb-8">
  <Accordion type="single" collapsible className="w-full">
    <AccordionItem value="item-1">
      <AccordionTrigger>Is it accessible?</AccordionTrigger>
      <AccordionContent>
        Yes. It adheres to the WAI-ARIA design pattern.
      </AccordionContent>
    </AccordionItem>
    <AccordionItem value="item-2">
      <AccordionTrigger>Is it styled?</AccordionTrigger>
      <AccordionContent>
        Yes. It comes with default styles that matches the other components' aesthetics.
      </AccordionContent>
    </AccordionItem>
    <AccordionItem value="item-3">
      <AccordionTrigger>Is it animated?</AccordionTrigger>
      <AccordionContent>
        Yes! It's animated by default, but you can disable it if you prefer.
      </AccordionContent>
    </AccordionItem>
  </Accordion>
</div>
</TabItem>
<TabItem value="code" label="Code">
```tsx
<div className="flex flex-col space-y-4 mb-8">
  <Accordion type="single" collapsible className="w-full">
    <AccordionItem value="item-1">
      <AccordionTrigger>Is it accessible?</AccordionTrigger>
      <AccordionContent>
        Yes. It adheres to the WAI-ARIA design pattern.
      </AccordionContent>
    </AccordionItem>
    <AccordionItem value="item-2">
      <AccordionTrigger>Is it styled?</AccordionTrigger>
      <AccordionContent>
        Yes. It comes with default styles that matches the other components' aesthetics.
      </AccordionContent>
    </AccordionItem>
    <AccordionItem value="item-3">
      <AccordionTrigger>Is it animated?</AccordionTrigger>
      <AccordionContent>
        Yes! It's animated by default, but you can disable it if you prefer.
      </AccordionContent>
    </AccordionItem>
  </Accordion>
</div>
```
</TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add accordion
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add accordion
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add accordion
    ```
  </TabItem>
</Tabs>

## Usage

Import the components:

```tsx
import * as React from 'react';
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from './components/ui';
```

### Basic Example

```tsx
export function AccordionDemo() {
  return (
    <Accordion type="single" collapsible className="w-full">
      <AccordionItem value="item-1">
        <AccordionTrigger>Is it accessible?</AccordionTrigger>
        <AccordionContent>
          Yes. It adheres to the WAI-ARIA design pattern.
        </AccordionContent>
      </AccordionItem>
    </Accordion>
  )
}
```

## Variants

<AccordionDemo />



================================================
File: versioned_docs/version-1.0.0/components/badge.mdx
================================================
---
sidebar_position: 3
title: Badge
description: A small status descriptor for UI elements that can display numbers, text, or a small dot.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Badge } from '@site/src/components/UI/badge';
import { Mail } from 'lucide-react';
import BadgeDemo from '@site/src/components/Demo/BadgeDemo';

## Overview

Badges are small status descriptors that can be used to highlight specific information, such as notification counts, status indicators, or labels. They can include text, numbers, or just a dot indicator.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="flex items-center gap-8 border rounded-lg p-4">
      <div className="relative inline-flex items-center">
        <Mail className="h-6 w-6" />
        <Badge text="3" type="primary" />
      </div>
      <div className="relative inline-flex items-center">
        <span className="text-lg font-medium">Notifications</span>
        <Badge text="99+" type="error" variant="pulse" />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Badge } from '@mindfiredigital/ignix-ui';
    import { Mail } from 'lucide-react';


    function BadgeDemo() {
      return (
        <div className="flex items-center gap-8">
          <div className="relative inline-flex items-center">
            <Mail className="h-6 w-6" />
            <Badge text="3" type="primary" />
          </div>
          <div className="relative inline-flex items-center">
            <span className="text-lg font-medium">Notifications</span>
            <Badge text="99+" type="error" variant="pulse" />
          </div>
        </div>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add badge
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add badge
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add badge
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Badge } from './components/ui';
```

### Basic Usage

```tsx
function BasicBadge() {
  return (
    <div className="relative inline-flex items-center">
      <Mail className="h-6 w-6" />
      <Badge text="3" type="primary" />
    </div>
  );
}
```

## Variants

<BadgeDemo />



================================================
File: versioned_docs/version-1.0.0/components/breadcrumbs.mdx
================================================
---
sidebar_position: 2
title: Breadcrumbs
description: A navigational aid that shows the user's current location within a website's hierarchy.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Breadcrumbs } from '@site/src/components/UI/breadcrumbs';
import { ChevronRight } from 'lucide-react';

## Overview

Breadcrumbs provide users with a way to navigate back to previous pages or sections in a hierarchical structure. They help users understand their current location within the website and provide quick access to parent pages.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg">
      <Breadcrumbs 
        items={[
          { label: 'Home', href: '#' },
          { label: 'Products', href: '#' },
          { label: 'Electronics', href: '#' },
          { label: 'Smartphones' }
        ]}
        separatorIcon={ChevronRight}
      />
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Breadcrumbs } from './components/ui';
    import { ChevronRight } from 'lucide-react';

    function BreadcrumbDemo() {
      return (
        <Breadcrumbs 
          items={[
            { label: 'Home', href: '#' },
            { label: 'Products', href: '#' },
            { label: 'Electronics', href: '#' },
            { label: 'Smartphones' }
          ]}
          separatorIcon={ChevronRight}
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add breadcrumbs
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add breadcrumbs
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add breadcrumbs
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Breadcrumbs } from './components/ui';
```

### Basic Usage

```tsx
function BasicBreadcrumb() {
  return (
    <Breadcrumbs
      items={[
        { label: 'Home', href: '/' },
        { label: 'Products', href: '/products' },
        { label: 'Current Page' }
      ]}
    />
  );
}
```

import BreadcrumbsDemo from '@site/src/components/Demo/BreadcrumbsDemo';

## Variants

<BreadcrumbsDemo />


================================================
File: versioned_docs/version-1.0.0/components/button.mdx
================================================
---
sidebar_position: 4
title: Button
description: A customizable button component with variants, sizes, and animations.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Button } from '@site/src/components/UI/button';
import { Mail, ArrowRight, Loader2 } from 'lucide-react';

## Overview

Buttons allow users to take actions with a single tap. They can be customized with different styles, sizes, and animations.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg">
      <Button>Click me</Button>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Button } from './components/ui';

    function MyComponent() {
      return <Button>Click me</Button>;
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add button
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add button
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add button
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Button } from './components/ui';
```

### Basic Usage

```tsx
function BasicButton() {
  return (
    <Button>Click me</Button>
  );
}
```

import ButtonDemo from '@site/src/components/Demo/ButtonDemo';

## Variants

<ButtonDemo />


================================================
File: versioned_docs/version-1.0.0/components/card.mdx
================================================
---
sidebar_position: 5
title: Card
description: A versatile card component for displaying content in a structured format.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@site/src/components/UI/card';
import {CardsDemo, FeatureCardDemo, StatCardDemo} from '@site/src/components/Demo/CardsDemo';

## Overview

The card component is a container for text, photos, and actions in the context of a single subject.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg">
      <Card>
        <CardHeader>
          <CardTitle>Card Title</CardTitle>
          <CardDescription>Card Description</CardDescription>
        </CardHeader>
        <CardContent>
          <p>Card Content</p>
        </CardContent>
        <CardFooter>
          Card Footer
        </CardFooter>
      </Card>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Card } from './components/ui';

    function MyComponent() {
      return <Card>
        <CardHeader>
          <CardTitle>Card Title</CardTitle>
          <CardDescription>Card Description</CardDescription>
        </CardHeader>
        <CardContent>
          <p>Card Content</p>
        </CardContent>
        <CardFooter>
          Card Footer
        </CardFooter>
      </Card>;
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add card
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add card
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add card
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Card } from '@mindfiredigital/ignix-ui';
```

### Basic Usage

```tsx
function BasicCard() {
  return (
    <Card>
      This is a basic card.
    </Card>
  );
}
```

## Examples

<CardsDemo />

## Feature Card

<FeatureCardDemo />

## Stat Card

<StatCardDemo />




================================================
File: versioned_docs/version-1.0.0/components/dialog-box.mdx
================================================
---
sidebar_position: 5
title: Dialog Box
description: A flexible and animated dialog component for displaying content and capturing user input.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { DialogProvider } from '@site/src/components/UI/dialog-box';
import DialogDemo from '@site/src/components/UI/dialog-box/dialog-demo';

## Overview

The Dialog Box component provides a flexible way to display modal dialogs with various animations and types. It's built on top of Framer Motion for smooth animations and supports different dialog types like alerts, confirmations, and custom content.


## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg">
      <DialogProvider>
        <div className="space-y-4">
          <DialogDemo />
        </div>
      </DialogProvider>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { DialogProvider, useDialog } from './components/ui';
    import { Button } from './components/ui';

    function Demo() {
      const { openDialog } = useDialog();
      
      return (
        <Button 
          onClick={() => openDialog({
            title: 'Alert',
            content: 'This is an alert dialog.',
            dialogType: 'alert'
          })}
        >
          Show Alert Dialog
        </Button>
      );
    }

    // In your app:
    <DialogProvider>
      <Demo />
    </DialogProvider>
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add dialog-box
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add dialog-box
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add dialog-box
    ```
  </TabItem>
</Tabs>

## Basic Usage

### 1. Wrap your app with DialogProvider

```tsx
import { DialogProvider } from './components/ui';

function App() {
  return (
    <DialogProvider>
      {/* Your app components */}
    </DialogProvider>
  );
}
```

### 2. Use the useDialog hook in your components

```tsx
import { useDialog } from './components/ui';

function MyComponent() {
  const { openDialog } = useDialog();

  const handleClick = () => {
    openDialog({
      title: 'Hello',
      content: 'This is a dialog!',
      dialogType: 'alert'
    });
  };

  return <button onClick={handleClick}>Open Dialog</button>;
}
```

## Dialog Types

The dialog supports several built-in types with different styles:

import DialogBoxDemo from '@site/src/components/Demo/DialogBoxDemo';

## Variants

<DialogBoxDemo />


================================================
File: versioned_docs/version-1.0.0/components/dropdown.mdx
================================================
---
sidebar_position: 3
title: Dropdown
description: A reusable dropdown menu component with various styling options and animations.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Dropdown, DropdownItem } from '@site/src/components/UI/dropdown';
import { Button } from '@site/src/components/UI/button';

## Overview

The Dropdown component provides a flexible and customizable way to create dropdown menus with various styling options, animations, and sizing variants. Built with Radix UI and Framer Motion, it offers smooth animations and accessible functionality out of the box.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg">
      <Dropdown
        trigger={<Button>Open Menu</Button>}
        animation="default"
      >
        <DropdownItem>Profile</DropdownItem>
        <DropdownItem>Settings</DropdownItem>
        <DropdownItem>Logout</DropdownItem>
      </Dropdown>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Dropdown, DropdownItem } from './components/ui';

    function DropdownDemo() {
      return (
        <Dropdown
          trigger={<Button>Open Menu</Button>}
          animation="default"
        >
          <DropdownItem>Profile</DropdownItem>
          <DropdownItem>Settings</DropdownItem>
          <DropdownItem>Logout</DropdownItem>
        </Dropdown>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add dropdown
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add dropdown
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add dropdown
    ```
  </TabItem>
</Tabs>

## Usage

Import the components:

```tsx
import { Dropdown, DropdownItem } from './components/ui';
```

### Basic Usage

```tsx
function BasicDropdown() {
  return (
    <Dropdown trigger={<Button>Click me</Button>}>
      <DropdownItem>Option 1</DropdownItem>
      <DropdownItem>Option 2</DropdownItem>
      <DropdownItem>Option 3</DropdownItem>
    </Dropdown>
  );
}
```

import DropdownDemo from '@site/src/components/Demo/DropdownDemo';

## Variants

<DropdownDemo />


================================================
File: versioned_docs/version-1.0.0/components/input.mdx
================================================
---
sidebar_position: 4
title: Input
description: A collection of animated input components with various effects and styles.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { AnimatedInput } from '@site/src/components/UI/input';
import { useState } from 'react';
import { InputBasicDemo, InputAdvancedDemo } from '@site/src/components/UI/input/InputDemo';


## Overview

The AnimatedInput component provides a rich collection of animated input fields with various effects and styles. Each variant offers unique animations for both the input field and its label, creating engaging user interactions.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg space-y-4">
      <InputBasicDemo />
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { AnimatedInput } from './components/ui';
    import { useState } from 'react';

    function InputDemo() {
      const [value, setValue] = useState('');
      
      return (
        <AnimatedInput
          placeholder="Type something..."
          variant="clean"
          value={value}
          onChange={setValue}
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add input
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add input
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add input
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { AnimatedInput } from './components/ui';
```

### Basic Usage

```tsx
function BasicInput() {
  const [value, setValue] = useState('');
  
  return (
    <AnimatedInput
      placeholder="Enter your name"
      variant="clean"
      value={value}
      onChange={(newValue) => setValue(newValue)}
    />
  );
}
```

import InputDemo from '@site/src/components/Demo/InputDemo';

## Variants

<InputDemo />



================================================
File: versioned_docs/version-1.0.0/components/navbar.mdx
================================================
---
sidebar_position: 9
title: Navbar
description: A flexible and animated navbar component for displaying content and capturing user input.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Navbar } from '@site/src/components/UI/navbar';
import { Button } from '@site/src/components/UI/button';

## Overview

The Navbar component is a versatile and animated navigation bar that supports multiple styles, animations, and layouts. Built with Framer Motion, it offers smooth animations and various interactive features including submenu support and spotlight effects.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="space-y-4">
      <Navbar variant="default" size="md">
        <div className="flex gap-4">
          <Button>Home</Button>
          <Button>About</Button>
          <Button>Contact</Button>
        </div>
      </Navbar>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Navbar } from './components/ui';

    function NavbarDemo() {
      return (
        <Navbar variant="default" size="md">
          <div className="flex gap-4">
            <Button>Home</Button>
            <Button>About</Button>
            <Button>Contact</Button>
          </div>
        </Navbar>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add navbar
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add navbar
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add navbar
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Navbar } from './components/ui';
```

### Basic Usage

```tsx
function BasicNavbar() {
  return (
    <Navbar variant="default" size="md">
      <div className="flex gap-4">
        <Button>Home</Button>
        <Button>About</Button>
        <Button>Contact</Button>
      </div>
    </Navbar>
  );
}
```

import NavbarDemo from '@site/src/components/Demo/NavbarDemo';

## Variants

<NavbarDemo />

### Responsive Navigation

Create a responsive navigation bar that adapts to different screen sizes:

```tsx
import { useState } from 'react';
import { Menu, X } from 'lucide-react';

function ResponsiveNavbar() {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <Navbar variant="default" size="md">
      <div className="flex justify-between w-full">
        <div className="flex gap-4 items-center">
          <Button>Logo</Button>
        </div>
        
        {/* Mobile menu button */}
        <button
          className="md:hidden"
          onClick={() => setIsOpen(!isOpen)}
        >
          {isOpen ? <X /> : <Menu />}
        </button>

        {/* Desktop menu */}
        <div className="hidden md:flex gap-4">
          <Button>Home</Button>
          <Button>About</Button>
          <Button>Contact</Button>
        </div>

        {/* Mobile menu */}
        {isOpen && (
          <div className="absolute top-16 left-0 right-0 bg-white md:hidden">
            <div className="flex flex-col gap-2 p-4">
              <Button>Home</Button>
              <Button>About</Button>
              <Button>Contact</Button>
            </div>
          </div>
        )}
      </div>
    </Navbar>
  );
}
```



================================================
File: versioned_docs/version-1.0.0/components/sidebar.mdx
================================================
---
sidebar_position: 10
title: Sidebar
description: A flexible and animated sidebar component for displaying content.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import Sidebar from '@site/src/components/UI/sidebar';
import { Home, Settings, User, Mail, HelpCircle } from 'lucide-react';

## Overview

The Sidebar component is a versatile and animated navigation element that provides an elegant way to organize navigation links and actions in your application. It supports multiple positions, variants, and animations built with Framer Motion.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full h-[400px] relative border rounded-lg overflow-hidden bg-slate-100 shadow-lg">
      <div className="w-full h-8 bg-gray-200 flex items-center px-2 gap-2">
        <div className="w-3 h-3 rounded-full bg-red-500"/>
        <div className="w-3 h-3 rounded-full bg-yellow-500"/>
        <div className="w-3 h-3 rounded-full bg-green-500"/>
        <span className="text-sm text-gray-600 ml-2">Demo Window</span>
      </div>
      <div className="relative h-[calc(100%-2rem)] bg-white">
        <Sidebar
          links={[
            { label: 'Home', href: '#', icon: Home },
            { label: 'Profile', href: '#', icon: User },
            { label: 'Settings', href: '#', icon: Settings },
            { label: 'Help', href: '#', icon: HelpCircle },
          ]}
          brandName="Demo App"
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Sidebar } from './components/ui';
    import { Home, User, Settings, HelpCircle } from 'lucide-react';

    function SidebarDemo() {
      const links = [
        { label: 'Home', href: '#', icon: Home },
        { label: 'Profile', href: '#', icon: User },
        { label: 'Settings', href: '#', icon: Settings },
        { label: 'Help', href: '#', icon: HelpCircle },
      ];

      return (
        <Sidebar
          links={links}
          brandName="Demo App"
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add sidebar
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add sidebar
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add sidebar
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Sidebar } from './components/ui';
```

### Basic Usage

```tsx
import { Home, Settings, User, Mail } from 'lucide-react';

function BasicSidebar() {
  const links = [
    { label: 'Home', href: '/', icon: Home },
    { label: 'Profile', href: '/profile', icon: User },
    { label: 'Settings', href: '/settings', icon: Settings },
    { label: 'Contact', href: '/contact', icon: Mail },
  ];

  return (
    <Sidebar
      links={links}
      brandName="My App"
    />
  );
}
```

import SidebarDemo from '@site/src/components/Demo/SidebarDemo';

## Variants

<SidebarDemo />

## Customization

### With Custom Link Styling

```tsx
function CustomStyledSidebar() {
  const links = [
    { label: 'Home', href: '/', icon: Home },
    { label: 'Settings', href: '/settings', icon: Settings },
  ];

  return (
    <Sidebar
      links={links}
      brandName="Custom Links"
      className="[&_a]:hover:bg-blue-500 [&_a]:transition-colors"
    />
  );
}
```

### Responsive Sidebar

Create a responsive sidebar that adapts to different screen sizes:

```tsx
import { useState, useEffect } from 'react';

function ResponsiveSidebar() {
  const [isOpen, setIsOpen] = useState(true);

  useEffect(() => {
    const handleResize = () => {
      setIsOpen(window.innerWidth > 768);
    };

    window.addEventListener('resize', handleResize);
    handleResize();

    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <Sidebar
      links={links}
      isOpen={isOpen}
      onClose={() => setIsOpen(false)}
      className="md:relative absolute"
    />
  );
}
```



================================================
File: versioned_docs/version-1.0.0/components/slider.mdx
================================================
---
sidebar_position: 12
title: Slider
description: A flexible and animated slider component for displaying content and capturing user input.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Slider } from '@site/src/components/UI/slider';
import { useState } from 'react';

## Overview

The Slider component is a highly customizable input element that allows users to select a value within a range. Built with Radix UI and Framer Motion, it offers various styles, animations, and interactive features.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 border rounded-lg">
      <div className="p-6 rounded-lg">
        <Slider
          defaultValue={[50]}
          max={100}
          step={1}
          variant="default"
          showValue
          valueSuffix="%"
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Slider } from './components/ui';

    function SliderDemo() {
      return (
        <Slider
          defaultValue={[50]}
          max={100}
          step={1}
          variant="default"
          showValue
          valueSuffix="%"
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add slider
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add slider
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add slider
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Slider } from './components/ui';
```

### Basic Usage

```tsx
function BasicSlider() {
  const [value, setValue] = useState([50]);
  
  return (
    <Slider
      value={value}
      onValueChange={setValue}
      max={100}
      step={1}
    />
  );
}
```

import SliderDemo from '@site/src/components/Demo/SliderDemo';

## Variants

<SliderDemo />

### Custom Range Values

Create a slider with custom range and step values:

```tsx
<Slider
  defaultValue={[0]}
  min={-50}
  max={50}
  step={5}
  showValue
  valuePrefix="Temperature: "
  valueSuffix="Â°C"
/>
```


================================================
File: versioned_docs/version-1.0.0/components/spinner.mdx
================================================
---
sidebar_position: 13
title: Spinner
description: A flexible and animated spinner component for displaying loading states.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Spinner } from '@site/src/components/UI/spinner';

## Overview

The Spinner component is a versatile loading indicator that comes with multiple variants and customization options. Built with Framer Motion, it provides smooth animations and various styles to indicate loading states in your application.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 border rounded-lg">
      <div className=" p-6 rounded-lg">
        <div className="flex items-center justify-center gap-8">
          <Spinner size={40} color="border-primary" />
          <Spinner size={40} variant="bars" color="bg-primary" />
          <Spinner size={40} variant="dots-bounce" color="bg-primary" />
        </div>
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Spinner } from './components/ui';

    function SpinnerDemo() {
      return (
        <div className="flex items-center gap-8">
          <Spinner size={40} color="border-primary" />
          <Spinner size={40} variant="bars" color="bg-primary" />
          <Spinner size={40} variant="dots-bounce" color="bg-primary" />
        </div>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add spinner
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add spinner
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add spinner
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Spinner } from './components/ui';
```

### Basic Usage

```tsx
function BasicSpinner() {
  return <Spinner size={40} color="border-primary" />;
}
```

import SpinnerDemo from '@site/src/components/Demo/SpinnerDemo';

## Variants

<SpinnerDemo />

## Customization

### Custom Styling

You can customize the appearance using Tailwind CSS classes:

```tsx
<Spinner
  className="my-4"
  size={50}
  color="border-primary"
  thickness={6}
/>
```


================================================
File: versioned_docs/version-1.0.0/components/stepper.mdx
================================================
---
sidebar_position: 14
title: Stepper
description: A flexible and animated stepper component for displaying multi-step processes.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Stepper } from '@site/src/components/UI/stepper';
import StepperDemo from '@site/src/components/UI/stepper/demo';

## Overview

The Stepper component helps visualize progress through a multi-step process. It's perfect for forms, wizards, or any sequential workflow in your application. The component includes support for completed states, active states, and optional descriptions for each step.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 rounded-lg border ">
      <div className="p-6 rounded-lg">
        <Stepper
          steps={[
            { label: 'Details', description: 'Personal info' },
            { label: 'Address', description: 'Shipping info' },
            { label: 'Payment', description: 'Card details' },
            { label: 'Review', description: 'Final check' },
          ]}
          activeStep={1}
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Stepper } from './components/ui';

    function StepperDemo() {
      return (
        <Stepper
          steps={[
            { label: 'Details', description: 'Personal info' },
            { label: 'Address', description: 'Shipping info' },
            { label: 'Payment', description: 'Card details' },
            { label: 'Review', description: 'Final check' },
          ]}
          activeStep={1}
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add stepper
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add stepper
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add stepper
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Stepper } from './components/ui';
```

### Basic Usage

```tsx
function BasicStepper() {
  const [currentStep, setCurrentStep] = useState(0);
  
  const steps = [
    { label: 'Step 1' },
    { label: 'Step 2' },
    { label: 'Step 3' },
  ];

  return (
    <Stepper
      steps={steps}
      activeStep={currentStep}
    />
  );
}
```

## Examples

### Basic Stepper

<Tabs>
  <TabItem value="basic-preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 border rounded-lg">
      <div className="p-6 rounded-lg">
        <Stepper
          steps={[
            { label: 'Step 1' },
            { label: 'Step 2' },
            { label: 'Step 3' },
          ]}
          activeStep={1}
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="basic-code" label="Code">
    ```tsx
    <Stepper
      steps={[
        { label: 'Step 1' },
        { label: 'Step 2' },
        { label: 'Step 3' },
      ]}
      activeStep={1}
    />
    ```
  </TabItem>
</Tabs>

### With Descriptions

<Tabs>
  <TabItem value="descriptions-preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 border rounded-lg">
      <div className="p-6 rounded-lg">
        <Stepper
          steps={[
            { label: 'Account', description: 'Create account' },
            { label: 'Profile', description: 'Complete profile' },
            { label: 'Verify', description: 'Verification' },
            { label: 'Done', description: 'Final step' },
          ]}
          activeStep={2}
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="descriptions-code" label="Code">
    ```tsx
    <Stepper
      steps={[
        { label: 'Account', description: 'Create account' },
        { label: 'Profile', description: 'Complete profile' },
        { label: 'Verify', description: 'Verification' },
        { label: 'Done', description: 'Final step' },
      ]}
      activeStep={2}
    />
    ```
  </TabItem>
</Tabs>

### Interactive Example

<Tabs>
  <TabItem value="interactive-preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 border rounded-lg">
      <div className="p-6 rounded-lg space-y-4">
       <StepperDemo />
      </div>
    </div>
  </TabItem>
  <TabItem value="interactive-code" label="Code">
    ```tsx
    function InteractiveStepper() {
      const [step, setStep] = useState(0);
      
      return (
        <div className="space-y-4">
          <Stepper
            steps={[
              { label: 'Cart', description: 'Review items' },
              { label: 'Shipping', description: 'Delivery info' },
              { label: 'Payment', description: 'Card details' },
            ]}
            activeStep={step}
          />
          <div className="flex justify-between mt-4">
            <button
              onClick={() => setStep(Math.max(0, step - 1))}
              disabled={step === 0}
              className="px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
            >
              Previous
            </button>
            <button
              onClick={() => setStep(Math.min(2, step + 1))}
              disabled={step === 2}
              className="px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
            >
              Next
            </button>
          </div>
        </div>
      );
    }
    ```
  </TabItem>
</Tabs>

## Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `steps` | `Array<{ label: string; description?: string; }>` | `[]` | Array of step objects with labels and optional descriptions |
| `activeStep` | `number` | `0` | Current active step (0-based index) |
| `className` | `string` | - | Additional CSS classes |

## Customization

### Custom Styling

You can customize the appearance using Tailwind CSS classes:

```tsx
<Stepper
  className="max-w-2xl mx-auto"
  steps={[
    { label: 'Start', description: 'Begin here' },
    { label: 'Middle', description: 'Continue' },
    { label: 'End', description: 'Complete' },
  ]}
  activeStep={1}
/>
```

### Form Integration Example

```tsx
function StepperForm() {
  const [currentStep, setCurrentStep] = useState(0);
  const [formData, setFormData] = useState({
    personal: {},
    address: {},
    payment: {},
  });

  const steps = [
    { label: 'Personal', description: 'Basic info' },
    { label: 'Address', description: 'Shipping details' },
    { label: 'Payment', description: 'Payment method' },
  ];

  const renderStepContent = (step: number) => {
    switch (step) {
      case 0:
        return <PersonalInfoForm data={formData.personal} onSave={handleSave} />;
      case 1:
        return <AddressForm data={formData.address} onSave={handleSave} />;
      case 2:
        return <PaymentForm data={formData.payment} onSave={handleSave} />;
      default:
        return null;
    }
  };

  return (
    <div className="space-y-6">
      <Stepper steps={steps} activeStep={currentStep} />
      <div className="mt-8">
        {renderStepContent(currentStep)}
      </div>
    </div>
  );
}
```



================================================
File: versioned_docs/version-1.0.0/components/switch.mdx
================================================
---
sidebar_position: 15
title: Switch
description: A flexible and animated switch component for displaying content and capturing user input.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Switch } from '@site/src/components/UI/switch';

## Overview

The Switch component is a toggleable form control built on top of Radix UI's Switch Primitive, enhanced with beautiful animations using Framer Motion. It provides a user-friendly way to toggle between two states with smooth transitions and various visual styles.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 border rounded-lg">
      <div className="p-6 rounded-lg">
          <Switch />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Switch } from './components/ui';

    function SwitchDemo() {
      return (
          <Switch />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add switch
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add switch
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add switch
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Switch } from './components/ui';
```

### Basic Usage

```tsx
function BasicSwitch() {
  return <Switch defaultChecked />;
}
```

import SwitchDemo from '@site/src/components/Demo/SwitchDemo';

## Variants

<SwitchDemo />




================================================
File: versioned_docs/version-1.0.0/components/tab.mdx
================================================
---
sidebar_position: 16
title: Tab
description: A flexible and animated tab component for displaying content and capturing user input.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Tabs as TabsComponent } from '@site/src/components/UI/tab';

## Overview

The Tabs component is a versatile navigation interface that allows users to switch between different views within the same context. Built with Framer Motion for smooth animations and powered by Class Variance Authority for flexible styling, it provides multiple variants and themes for different design needs.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 rounded-lg border shadow-lg">
      <div className="p-6 rounded-lg">
        <TabsComponent
          options={["Home", "Profile", "Settings", "About"]}
          selected={0}
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Tabs } from './components/ui';

    function TabsDemo() {
      return (
        <Tabs
          options={["Home", "Profile", "Settings", "About"]}
          selected={0}
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add tab
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add tab
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add tab
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { Tabs } from './components/ui';
```

### Basic Usage

```tsx
function BasicTabs() {
  return (
    <Tabs
      options={["Tab 1", "Tab 2", "Tab 3"]}
      selected={0}
      value={(index) => console.log(`Selected tab: ${index}`)}
    />
  );
}
```

import TabDemo from '@site/src/components/Demo/TabDemo';

## Variants

<TabDemo />


================================================
File: versioned_docs/version-1.0.0/components/table.mdx
================================================
---
sidebar_position: 16
title: Table
description: A flexible and customizable table component with sorting and pagination support.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import TableDemo from '@site/src/components/Demo/TableDemo';
import TableExample from '@site/src/components/Examples/TableExample';

## Overview

The Table component provides a way to display data in a structured format with support for sorting, pagination, and customizable styling. It's built on top of Radix UI's table primitives for accessibility and performance.

## Preview

<Tabs defaultValue="preview" groupId="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="p-4 border rounded-lg ">
      <TableExample />
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { useState } from 'react';
    import { Table } from './components/ui';

    function TableExample() {
      const [sortConfig, setSortConfig] = useState({ key: 'name', direction: 'asc' });
      const [currentPage, setCurrentPage] = useState(1);
      const totalPages = 3;

      const data = [
        { id: 1, name: 'John Doe', email: 'john@example.com', status: 'Active' },
        { id: 2, name: 'Jane Smith', email: 'jane@example.com', status: 'Inactive' },
        { id: 3, name: 'Bob Johnson', email: 'bob@example.com', status: 'Active' },
      ];

      const handleSort = (key, direction) => {
        setSortConfig({ key, direction });
        // Implement your sorting logic here
      };

      const handlePageChange = (page) => {
        setCurrentPage(page);
        // Fetch or update data for the new page
      };

      return (
        <Table
          headings={[
            { label: 'Name', key: 'name', sort: 'asc' },
            { label: 'Email', key: 'email', sort: 'asc' },
            { label: 'Status', key: 'status', sort: 'asc' },
          ]}
          data={data}
          applySort={handleSort}
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={handlePageChange}
        />
      );
    }
    ```
  </TabItem>
</Tabs>


## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add table
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add table
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add table
    ```
  </TabItem>
</Tabs>

## Usage

### Basic Usage

```tsx
import { Table } from './components/ui';

function MyTable() {
  const [sortConfig, setSortConfig] = useState({ key: 'name', direction: 'asc' });
  
  const data = [
    { id: 1, name: 'John Doe', email: 'john@example.com' },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com' },
  ];

  const handleSort = (key, direction) => {
    setSortConfig({ key, direction });
    // Implement sorting logic
  };

  return (
    <Table
      headings={[
        { label: 'Name', key: 'name', sort: 'asc' },
        { label: 'Email', key: 'email', sort: 'asc' },
      ]}
      data={data}
      applySort={handleSort}
    />
  );
}
```

### With Pagination

```tsx
function PaginatedTable() {
  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = 5;

  // ... rest of your component code ...

  return (
    <Table
      // ... other props ...
      currentPage={currentPage}
      totalPages={totalPages}
      onPageChange={setCurrentPage}
    />
  );
}
```

### Variants

<TableDemo />


================================================
File: versioned_docs/version-1.0.0/components/textarea.mdx
================================================
---
sidebar_position: 17
title: Textarea
description: A flexible and animated textarea component for displaying content and capturing user input.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import AnimatedTextarea from '@site/src/components/UI/textarea';
import { useState } from 'react';

## Overview

The Textarea component is an enhanced version of the standard HTML textarea with beautiful animations and interactive features. Built with Framer Motion, it provides various animation variants, auto-expanding capabilities, and interactive effects.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 rounded-lg border">
      <div className="p-6 rounded-lg">
        <AnimatedTextarea
          placeholder="Type something..."
          variant="clean"
          value=""
          onChange={() => {}}
        />
      </div>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { AnimatedTextarea } from './components/ui';

    function TextareaDemo() {
      const [value, setValue] = useState('');
      
      return (
        <AnimatedTextarea
          placeholder="Type something..."
          variant="clean"
          value={value}
          onChange={setValue}
        />
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add textarea
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add textarea
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add textarea
    ```
  </TabItem>
</Tabs>

## Usage

Import the component:

```tsx
import { AnimatedTextarea } from './components/ui';
```

### Basic Usage

```tsx
function BasicTextarea() {
  const [value, setValue] = useState('');
  
  return (
    <AnimatedTextarea
      placeholder="Enter your message"
      variant="clean"
      value={value}
      onChange={setValue}
    />
  );
}
```

import TextareaDemo from '@site/src/components/Demo/TextareaDemo';

## Animation Variants

<TextareaDemo />



================================================
File: versioned_docs/version-1.0.0/components/toast.mdx
================================================
---
sidebar_position: 19
title: Toast
description: A flexible and animated toast component for displaying notifications and alerts.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { ToastProvider } from '@site/src/components/UI/toast';
import { BasicToastDemo, AnimationDemo, AppearanceDemo, ThemeDemo, SimpleToastDemo } from '@site/src/components/UI/toast/demos';

## Overview

The Toast component is a versatile notification system that provides animated, customizable alerts. Built with Framer Motion, it supports multiple variants, animations, themes, and appearance styles, making it perfect for providing feedback in your applications.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 space-y-8 rounded-lg border">
      <ToastProvider>
        <SimpleToastDemo />
      </ToastProvider>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { useToast } from './components/ui';
    import { InfoCircledIcon } from "@radix-ui/react-icons";

    function ToastDemo() {
      const toast = useToast();
      
      const showToast = () => {
        toast.addToast({
          message: "Hello from Toast!",
          variant: "info",
          animation: "slide",
          icon: <InfoCircledIcon className="w-5 h-5" />
        });
      };

      return (
        <button
          onClick={showToast}
          className="px-6 py-3 bg-blue-500 text-white rounded-md hover:bg-blue-600 flex items-center justify-center gap-2"
        >
          <InfoCircledIcon className="w-5 h-5" />
          Show Toast
        </button>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add toast
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add toast
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add toast
    ```
  </TabItem>
</Tabs>

## Usage

First, wrap your application with the ToastProvider:

```tsx
import { ToastProvider } from './components/ui';

function App() {
  return (
    <ToastProvider>
      <YourApp />
    </ToastProvider>
  );
}
```

Then use the toast in your components:

```tsx
import { useToast } from './components/ui';

function MyComponent() {
  const toast = useToast();
  
  const showNotification = () => {
    toast.addToast({
      message: "Operation successful!",
      variant: "success",
      animation: "slide",
      mode: "light",
      icon: <CheckCircledIcon />
    });
  };
  
  return <button onClick={showNotification}>Show Toast</button>;
}
```

import ToastDemo from '@site/src/components/Demo/ToastDemo';

## Features

<ToastDemo />



================================================
File: versioned_docs/version-1.0.0/components/tooltip.mdx
================================================
---
sidebar_position: 20
title: Tooltip
description: A flexible tooltip component for displaying additional information on hover.
---

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';
import { Tooltip } from '@site/src/components/UI/tooltip';
import { Button } from '@site/src/components/UI/button';

## Overview

The Tooltip component provides additional information when users hover over or focus on an element. Built with Radix UI and Framer Motion, it supports various animations, themes, and appearance styles.

## Preview

<Tabs defaultValue="preview">
  <TabItem value="preview" label="Preview" default>
    <div className="w-full p-8 rounded-lg border flex items-center justify-center">
      <Tooltip content="Hi, I am a tooltip">
        <Button className="flex items-center gap-2 justify-center">
          Hover me
        </Button>
      </Tooltip>
    </div>
  </TabItem>
  <TabItem value="code" label="Code">
    ```tsx
    import { Tooltip } from './components/ui';
    import { Button } from './components/ui';

    function TooltipDemo() {
      return (
        <Tooltip content="Hi, I am a tooltip">
          <Button>
            Hover me
          </Button>
        </Tooltip>
      );
    }
    ```
  </TabItem>
</Tabs>

## Installation

<Tabs>
  <TabItem value="npm" label="npm" default>
    ```bash
    npx @mindfiredigital/ignix-ui add tooltip
    ```
  </TabItem>
  <TabItem value="yarn" label="Yarn">
    ```bash
    yarn @mindfiredigital/ignix-ui add tooltip
    ```
  </TabItem>
  <TabItem value="pnpm" label="pnpm">
    ```bash
    pnpm @mindfiredigital/ignix-ui add tooltip
    ```
  </TabItem>
</Tabs>

## Usage

```tsx
import { Tooltip } from './components/ui';

function MyComponent() {
  return (
    <Tooltip content="Additional information">
      <button>Hover me</button>
    </Tooltip>
  );
}
```

import TooltipDemo from '@site/src/components/Demo/TooltipDemo';

## Features

<TooltipDemo />



================================================
File: versioned_sidebars/version-1.0.0-sidebars.json
================================================
{
  "tutorialSidebar": [
    {
      "type": "category",
      "label": "Getting Started",
      "items": [
        "introduction",
        "installation"
      ]
    },
    {
      "type": "category",
      "label": "Components",
      "items": [
        "components/accordion",
        "components/badge",
        "components/breadcrumbs",
        "components/button",
        "components/card",
        "components/dialog-box",
        "components/dropdown",
        "components/input",
        "components/navbar",
        "components/sidebar",
        "components/slider",
        "components/spinner",
        "components/stepper",
        "components/switch",
        "components/tab",
        "components/table",
        "components/textarea",
        "components/toast",
        "components/tooltip"
      ]
    }
  ]
}


